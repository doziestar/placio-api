// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/amenity"
	"placio-app/ent/booking"
	"placio-app/ent/business"
	"placio-app/ent/category"
	"placio-app/ent/categoryassignment"
	"placio-app/ent/event"
	"placio-app/ent/faq"
	"placio-app/ent/menu"
	"placio-app/ent/place"
	"placio-app/ent/predicate"
	"placio-app/ent/rating"
	"placio-app/ent/reservation"
	"placio-app/ent/review"
	"placio-app/ent/room"
	"placio-app/ent/user"
	"placio-app/ent/userfollowplace"
	"placio-app/ent/userlikeplace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// PlaceUpdate is the builder for updating Place entities.
type PlaceUpdate struct {
	config
	hooks    []Hook
	mutation *PlaceMutation
}

// Where appends a list predicates to the PlaceUpdate builder.
func (pu *PlaceUpdate) Where(ps ...predicate.Place) *PlaceUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PlaceUpdate) SetName(s string) *PlaceUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetType sets the "type" field.
func (pu *PlaceUpdate) SetType(s string) *PlaceUpdate {
	pu.mutation.SetType(s)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableType(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetType(*s)
	}
	return pu
}

// ClearType clears the value of the "type" field.
func (pu *PlaceUpdate) ClearType() *PlaceUpdate {
	pu.mutation.ClearType()
	return pu
}

// SetDescription sets the "description" field.
func (pu *PlaceUpdate) SetDescription(s string) *PlaceUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableDescription(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PlaceUpdate) ClearDescription() *PlaceUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetLocation sets the "location" field.
func (pu *PlaceUpdate) SetLocation(s string) *PlaceUpdate {
	pu.mutation.SetLocation(s)
	return pu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableLocation(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetLocation(*s)
	}
	return pu
}

// ClearLocation clears the value of the "location" field.
func (pu *PlaceUpdate) ClearLocation() *PlaceUpdate {
	pu.mutation.ClearLocation()
	return pu
}

// SetEmail sets the "email" field.
func (pu *PlaceUpdate) SetEmail(s string) *PlaceUpdate {
	pu.mutation.SetEmail(s)
	return pu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableEmail(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetEmail(*s)
	}
	return pu
}

// ClearEmail clears the value of the "email" field.
func (pu *PlaceUpdate) ClearEmail() *PlaceUpdate {
	pu.mutation.ClearEmail()
	return pu
}

// SetPhone sets the "phone" field.
func (pu *PlaceUpdate) SetPhone(s string) *PlaceUpdate {
	pu.mutation.SetPhone(s)
	return pu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillablePhone(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetPhone(*s)
	}
	return pu
}

// ClearPhone clears the value of the "phone" field.
func (pu *PlaceUpdate) ClearPhone() *PlaceUpdate {
	pu.mutation.ClearPhone()
	return pu
}

// SetWebsite sets the "website" field.
func (pu *PlaceUpdate) SetWebsite(s string) *PlaceUpdate {
	pu.mutation.SetWebsite(s)
	return pu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableWebsite(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetWebsite(*s)
	}
	return pu
}

// ClearWebsite clears the value of the "website" field.
func (pu *PlaceUpdate) ClearWebsite() *PlaceUpdate {
	pu.mutation.ClearWebsite()
	return pu
}

// SetCoverImage sets the "cover_image" field.
func (pu *PlaceUpdate) SetCoverImage(s string) *PlaceUpdate {
	pu.mutation.SetCoverImage(s)
	return pu
}

// SetNillableCoverImage sets the "cover_image" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableCoverImage(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetCoverImage(*s)
	}
	return pu
}

// ClearCoverImage clears the value of the "cover_image" field.
func (pu *PlaceUpdate) ClearCoverImage() *PlaceUpdate {
	pu.mutation.ClearCoverImage()
	return pu
}

// SetPicture sets the "picture" field.
func (pu *PlaceUpdate) SetPicture(s string) *PlaceUpdate {
	pu.mutation.SetPicture(s)
	return pu
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillablePicture(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetPicture(*s)
	}
	return pu
}

// ClearPicture clears the value of the "picture" field.
func (pu *PlaceUpdate) ClearPicture() *PlaceUpdate {
	pu.mutation.ClearPicture()
	return pu
}

// SetCountry sets the "country" field.
func (pu *PlaceUpdate) SetCountry(s string) *PlaceUpdate {
	pu.mutation.SetCountry(s)
	return pu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableCountry(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetCountry(*s)
	}
	return pu
}

// ClearCountry clears the value of the "country" field.
func (pu *PlaceUpdate) ClearCountry() *PlaceUpdate {
	pu.mutation.ClearCountry()
	return pu
}

// SetCity sets the "city" field.
func (pu *PlaceUpdate) SetCity(s string) *PlaceUpdate {
	pu.mutation.SetCity(s)
	return pu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableCity(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetCity(*s)
	}
	return pu
}

// ClearCity clears the value of the "city" field.
func (pu *PlaceUpdate) ClearCity() *PlaceUpdate {
	pu.mutation.ClearCity()
	return pu
}

// SetState sets the "state" field.
func (pu *PlaceUpdate) SetState(s string) *PlaceUpdate {
	pu.mutation.SetState(s)
	return pu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableState(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetState(*s)
	}
	return pu
}

// ClearState clears the value of the "state" field.
func (pu *PlaceUpdate) ClearState() *PlaceUpdate {
	pu.mutation.ClearState()
	return pu
}

// SetPlaceSettings sets the "place_settings" field.
func (pu *PlaceUpdate) SetPlaceSettings(m map[string]interface{}) *PlaceUpdate {
	pu.mutation.SetPlaceSettings(m)
	return pu
}

// ClearPlaceSettings clears the value of the "place_settings" field.
func (pu *PlaceUpdate) ClearPlaceSettings() *PlaceUpdate {
	pu.mutation.ClearPlaceSettings()
	return pu
}

// SetOpeningHours sets the "opening_hours" field.
func (pu *PlaceUpdate) SetOpeningHours(m map[string]interface{}) *PlaceUpdate {
	pu.mutation.SetOpeningHours(m)
	return pu
}

// ClearOpeningHours clears the value of the "opening_hours" field.
func (pu *PlaceUpdate) ClearOpeningHours() *PlaceUpdate {
	pu.mutation.ClearOpeningHours()
	return pu
}

// SetSocialMedia sets the "social_media" field.
func (pu *PlaceUpdate) SetSocialMedia(m map[string]interface{}) *PlaceUpdate {
	pu.mutation.SetSocialMedia(m)
	return pu
}

// ClearSocialMedia clears the value of the "social_media" field.
func (pu *PlaceUpdate) ClearSocialMedia() *PlaceUpdate {
	pu.mutation.ClearSocialMedia()
	return pu
}

// SetPaymentOptions sets the "payment_options" field.
func (pu *PlaceUpdate) SetPaymentOptions(m map[string]interface{}) *PlaceUpdate {
	pu.mutation.SetPaymentOptions(m)
	return pu
}

// ClearPaymentOptions clears the value of the "payment_options" field.
func (pu *PlaceUpdate) ClearPaymentOptions() *PlaceUpdate {
	pu.mutation.ClearPaymentOptions()
	return pu
}

// SetTags sets the "tags" field.
func (pu *PlaceUpdate) SetTags(s []string) *PlaceUpdate {
	pu.mutation.SetTags(s)
	return pu
}

// AppendTags appends s to the "tags" field.
func (pu *PlaceUpdate) AppendTags(s []string) *PlaceUpdate {
	pu.mutation.AppendTags(s)
	return pu
}

// ClearTags clears the value of the "tags" field.
func (pu *PlaceUpdate) ClearTags() *PlaceUpdate {
	pu.mutation.ClearTags()
	return pu
}

// SetFeatures sets the "features" field.
func (pu *PlaceUpdate) SetFeatures(s []string) *PlaceUpdate {
	pu.mutation.SetFeatures(s)
	return pu
}

// AppendFeatures appends s to the "features" field.
func (pu *PlaceUpdate) AppendFeatures(s []string) *PlaceUpdate {
	pu.mutation.AppendFeatures(s)
	return pu
}

// ClearFeatures clears the value of the "features" field.
func (pu *PlaceUpdate) ClearFeatures() *PlaceUpdate {
	pu.mutation.ClearFeatures()
	return pu
}

// SetAdditionalInfo sets the "additional_info" field.
func (pu *PlaceUpdate) SetAdditionalInfo(m map[string]interface{}) *PlaceUpdate {
	pu.mutation.SetAdditionalInfo(m)
	return pu
}

// ClearAdditionalInfo clears the value of the "additional_info" field.
func (pu *PlaceUpdate) ClearAdditionalInfo() *PlaceUpdate {
	pu.mutation.ClearAdditionalInfo()
	return pu
}

// SetImages sets the "images" field.
func (pu *PlaceUpdate) SetImages(s []string) *PlaceUpdate {
	pu.mutation.SetImages(s)
	return pu
}

// AppendImages appends s to the "images" field.
func (pu *PlaceUpdate) AppendImages(s []string) *PlaceUpdate {
	pu.mutation.AppendImages(s)
	return pu
}

// ClearImages clears the value of the "images" field.
func (pu *PlaceUpdate) ClearImages() *PlaceUpdate {
	pu.mutation.ClearImages()
	return pu
}

// SetAvailability sets the "availability" field.
func (pu *PlaceUpdate) SetAvailability(m map[string]interface{}) *PlaceUpdate {
	pu.mutation.SetAvailability(m)
	return pu
}

// ClearAvailability clears the value of the "availability" field.
func (pu *PlaceUpdate) ClearAvailability() *PlaceUpdate {
	pu.mutation.ClearAvailability()
	return pu
}

// SetSpecialOffers sets the "special_offers" field.
func (pu *PlaceUpdate) SetSpecialOffers(s string) *PlaceUpdate {
	pu.mutation.SetSpecialOffers(s)
	return pu
}

// SetNillableSpecialOffers sets the "special_offers" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableSpecialOffers(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetSpecialOffers(*s)
	}
	return pu
}

// ClearSpecialOffers clears the value of the "special_offers" field.
func (pu *PlaceUpdate) ClearSpecialOffers() *PlaceUpdate {
	pu.mutation.ClearSpecialOffers()
	return pu
}

// SetSustainabilityScore sets the "sustainability_score" field.
func (pu *PlaceUpdate) SetSustainabilityScore(f float64) *PlaceUpdate {
	pu.mutation.ResetSustainabilityScore()
	pu.mutation.SetSustainabilityScore(f)
	return pu
}

// SetNillableSustainabilityScore sets the "sustainability_score" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableSustainabilityScore(f *float64) *PlaceUpdate {
	if f != nil {
		pu.SetSustainabilityScore(*f)
	}
	return pu
}

// AddSustainabilityScore adds f to the "sustainability_score" field.
func (pu *PlaceUpdate) AddSustainabilityScore(f float64) *PlaceUpdate {
	pu.mutation.AddSustainabilityScore(f)
	return pu
}

// ClearSustainabilityScore clears the value of the "sustainability_score" field.
func (pu *PlaceUpdate) ClearSustainabilityScore() *PlaceUpdate {
	pu.mutation.ClearSustainabilityScore()
	return pu
}

// SetMapCoordinates sets the "map_coordinates" field.
func (pu *PlaceUpdate) SetMapCoordinates(m map[string]interface{}) *PlaceUpdate {
	pu.mutation.SetMapCoordinates(m)
	return pu
}

// ClearMapCoordinates clears the value of the "map_coordinates" field.
func (pu *PlaceUpdate) ClearMapCoordinates() *PlaceUpdate {
	pu.mutation.ClearMapCoordinates()
	return pu
}

// SetLongitude sets the "longitude" field.
func (pu *PlaceUpdate) SetLongitude(s string) *PlaceUpdate {
	pu.mutation.SetLongitude(s)
	return pu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableLongitude(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetLongitude(*s)
	}
	return pu
}

// ClearLongitude clears the value of the "longitude" field.
func (pu *PlaceUpdate) ClearLongitude() *PlaceUpdate {
	pu.mutation.ClearLongitude()
	return pu
}

// SetLatitude sets the "latitude" field.
func (pu *PlaceUpdate) SetLatitude(s string) *PlaceUpdate {
	pu.mutation.SetLatitude(s)
	return pu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableLatitude(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetLatitude(*s)
	}
	return pu
}

// ClearLatitude clears the value of the "latitude" field.
func (pu *PlaceUpdate) ClearLatitude() *PlaceUpdate {
	pu.mutation.ClearLatitude()
	return pu
}

// SetSearchText sets the "search_text" field.
func (pu *PlaceUpdate) SetSearchText(s string) *PlaceUpdate {
	pu.mutation.SetSearchText(s)
	return pu
}

// SetNillableSearchText sets the "search_text" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableSearchText(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetSearchText(*s)
	}
	return pu
}

// ClearSearchText clears the value of the "search_text" field.
func (pu *PlaceUpdate) ClearSearchText() *PlaceUpdate {
	pu.mutation.ClearSearchText()
	return pu
}

// SetRelevanceScore sets the "relevance_score" field.
func (pu *PlaceUpdate) SetRelevanceScore(f float64) *PlaceUpdate {
	pu.mutation.ResetRelevanceScore()
	pu.mutation.SetRelevanceScore(f)
	return pu
}

// SetNillableRelevanceScore sets the "relevance_score" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableRelevanceScore(f *float64) *PlaceUpdate {
	if f != nil {
		pu.SetRelevanceScore(*f)
	}
	return pu
}

// AddRelevanceScore adds f to the "relevance_score" field.
func (pu *PlaceUpdate) AddRelevanceScore(f float64) *PlaceUpdate {
	pu.mutation.AddRelevanceScore(f)
	return pu
}

// ClearRelevanceScore clears the value of the "relevance_score" field.
func (pu *PlaceUpdate) ClearRelevanceScore() *PlaceUpdate {
	pu.mutation.ClearRelevanceScore()
	return pu
}

// SetFollowersCount sets the "followers_count" field.
func (pu *PlaceUpdate) SetFollowersCount(i int) *PlaceUpdate {
	pu.mutation.ResetFollowersCount()
	pu.mutation.SetFollowersCount(i)
	return pu
}

// SetNillableFollowersCount sets the "followers_count" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableFollowersCount(i *int) *PlaceUpdate {
	if i != nil {
		pu.SetFollowersCount(*i)
	}
	return pu
}

// AddFollowersCount adds i to the "followers_count" field.
func (pu *PlaceUpdate) AddFollowersCount(i int) *PlaceUpdate {
	pu.mutation.AddFollowersCount(i)
	return pu
}

// SetFollowingCount sets the "following_count" field.
func (pu *PlaceUpdate) SetFollowingCount(i int) *PlaceUpdate {
	pu.mutation.ResetFollowingCount()
	pu.mutation.SetFollowingCount(i)
	return pu
}

// SetNillableFollowingCount sets the "following_count" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableFollowingCount(i *int) *PlaceUpdate {
	if i != nil {
		pu.SetFollowingCount(*i)
	}
	return pu
}

// AddFollowingCount adds i to the "following_count" field.
func (pu *PlaceUpdate) AddFollowingCount(i int) *PlaceUpdate {
	pu.mutation.AddFollowingCount(i)
	return pu
}

// SetLikesCount sets the "likes_count" field.
func (pu *PlaceUpdate) SetLikesCount(i int) *PlaceUpdate {
	pu.mutation.ResetLikesCount()
	pu.mutation.SetLikesCount(i)
	return pu
}

// SetNillableLikesCount sets the "likes_count" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableLikesCount(i *int) *PlaceUpdate {
	if i != nil {
		pu.SetLikesCount(*i)
	}
	return pu
}

// AddLikesCount adds i to the "likes_count" field.
func (pu *PlaceUpdate) AddLikesCount(i int) *PlaceUpdate {
	pu.mutation.AddLikesCount(i)
	return pu
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (pu *PlaceUpdate) SetBusinessID(id string) *PlaceUpdate {
	pu.mutation.SetBusinessID(id)
	return pu
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (pu *PlaceUpdate) SetNillableBusinessID(id *string) *PlaceUpdate {
	if id != nil {
		pu = pu.SetBusinessID(*id)
	}
	return pu
}

// SetBusiness sets the "business" edge to the Business entity.
func (pu *PlaceUpdate) SetBusiness(b *Business) *PlaceUpdate {
	return pu.SetBusinessID(b.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (pu *PlaceUpdate) AddUserIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddUserIDs(ids...)
	return pu
}

// AddUsers adds the "users" edges to the User entity.
func (pu *PlaceUpdate) AddUsers(u ...*User) *PlaceUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddUserIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (pu *PlaceUpdate) AddReviewIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddReviewIDs(ids...)
	return pu
}

// AddReviews adds the "reviews" edges to the Review entity.
func (pu *PlaceUpdate) AddReviews(r ...*Review) *PlaceUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddReviewIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (pu *PlaceUpdate) AddEventIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddEventIDs(ids...)
	return pu
}

// AddEvents adds the "events" edges to the Event entity.
func (pu *PlaceUpdate) AddEvents(e ...*Event) *PlaceUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.AddEventIDs(ids...)
}

// AddAmenityIDs adds the "amenities" edge to the Amenity entity by IDs.
func (pu *PlaceUpdate) AddAmenityIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddAmenityIDs(ids...)
	return pu
}

// AddAmenities adds the "amenities" edges to the Amenity entity.
func (pu *PlaceUpdate) AddAmenities(a ...*Amenity) *PlaceUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAmenityIDs(ids...)
}

// AddMenuIDs adds the "menus" edge to the Menu entity by IDs.
func (pu *PlaceUpdate) AddMenuIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddMenuIDs(ids...)
	return pu
}

// AddMenus adds the "menus" edges to the Menu entity.
func (pu *PlaceUpdate) AddMenus(m ...*Menu) *PlaceUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddMenuIDs(ids...)
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (pu *PlaceUpdate) AddRoomIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddRoomIDs(ids...)
	return pu
}

// AddRooms adds the "rooms" edges to the Room entity.
func (pu *PlaceUpdate) AddRooms(r ...*Room) *PlaceUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRoomIDs(ids...)
}

// AddReservationIDs adds the "reservations" edge to the Reservation entity by IDs.
func (pu *PlaceUpdate) AddReservationIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddReservationIDs(ids...)
	return pu
}

// AddReservations adds the "reservations" edges to the Reservation entity.
func (pu *PlaceUpdate) AddReservations(r ...*Reservation) *PlaceUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddReservationIDs(ids...)
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by IDs.
func (pu *PlaceUpdate) AddBookingIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddBookingIDs(ids...)
	return pu
}

// AddBookings adds the "bookings" edges to the Booking entity.
func (pu *PlaceUpdate) AddBookings(b ...*Booking) *PlaceUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddBookingIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (pu *PlaceUpdate) AddCategoryIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddCategoryIDs(ids...)
	return pu
}

// AddCategories adds the "categories" edges to the Category entity.
func (pu *PlaceUpdate) AddCategories(c ...*Category) *PlaceUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCategoryIDs(ids...)
}

// AddCategoryAssignmentIDs adds the "categoryAssignments" edge to the CategoryAssignment entity by IDs.
func (pu *PlaceUpdate) AddCategoryAssignmentIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddCategoryAssignmentIDs(ids...)
	return pu
}

// AddCategoryAssignments adds the "categoryAssignments" edges to the CategoryAssignment entity.
func (pu *PlaceUpdate) AddCategoryAssignments(c ...*CategoryAssignment) *PlaceUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCategoryAssignmentIDs(ids...)
}

// AddFaqIDs adds the "faqs" edge to the FAQ entity by IDs.
func (pu *PlaceUpdate) AddFaqIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddFaqIDs(ids...)
	return pu
}

// AddFaqs adds the "faqs" edges to the FAQ entity.
func (pu *PlaceUpdate) AddFaqs(f ...*FAQ) *PlaceUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddFaqIDs(ids...)
}

// AddLikedByUserIDs adds the "likedByUsers" edge to the UserLikePlace entity by IDs.
func (pu *PlaceUpdate) AddLikedByUserIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddLikedByUserIDs(ids...)
	return pu
}

// AddLikedByUsers adds the "likedByUsers" edges to the UserLikePlace entity.
func (pu *PlaceUpdate) AddLikedByUsers(u ...*UserLikePlace) *PlaceUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddLikedByUserIDs(ids...)
}

// AddFollowerUserIDs adds the "followerUsers" edge to the UserFollowPlace entity by IDs.
func (pu *PlaceUpdate) AddFollowerUserIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddFollowerUserIDs(ids...)
	return pu
}

// AddFollowerUsers adds the "followerUsers" edges to the UserFollowPlace entity.
func (pu *PlaceUpdate) AddFollowerUsers(u ...*UserFollowPlace) *PlaceUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddFollowerUserIDs(ids...)
}

// AddRatingIDs adds the "ratings" edge to the Rating entity by IDs.
func (pu *PlaceUpdate) AddRatingIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddRatingIDs(ids...)
	return pu
}

// AddRatings adds the "ratings" edges to the Rating entity.
func (pu *PlaceUpdate) AddRatings(r ...*Rating) *PlaceUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRatingIDs(ids...)
}

// Mutation returns the PlaceMutation object of the builder.
func (pu *PlaceUpdate) Mutation() *PlaceMutation {
	return pu.mutation
}

// ClearBusiness clears the "business" edge to the Business entity.
func (pu *PlaceUpdate) ClearBusiness() *PlaceUpdate {
	pu.mutation.ClearBusiness()
	return pu
}

// ClearUsers clears all "users" edges to the User entity.
func (pu *PlaceUpdate) ClearUsers() *PlaceUpdate {
	pu.mutation.ClearUsers()
	return pu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (pu *PlaceUpdate) RemoveUserIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveUserIDs(ids...)
	return pu
}

// RemoveUsers removes "users" edges to User entities.
func (pu *PlaceUpdate) RemoveUsers(u ...*User) *PlaceUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveUserIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (pu *PlaceUpdate) ClearReviews() *PlaceUpdate {
	pu.mutation.ClearReviews()
	return pu
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (pu *PlaceUpdate) RemoveReviewIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveReviewIDs(ids...)
	return pu
}

// RemoveReviews removes "reviews" edges to Review entities.
func (pu *PlaceUpdate) RemoveReviews(r ...*Review) *PlaceUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveReviewIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (pu *PlaceUpdate) ClearEvents() *PlaceUpdate {
	pu.mutation.ClearEvents()
	return pu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (pu *PlaceUpdate) RemoveEventIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveEventIDs(ids...)
	return pu
}

// RemoveEvents removes "events" edges to Event entities.
func (pu *PlaceUpdate) RemoveEvents(e ...*Event) *PlaceUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.RemoveEventIDs(ids...)
}

// ClearAmenities clears all "amenities" edges to the Amenity entity.
func (pu *PlaceUpdate) ClearAmenities() *PlaceUpdate {
	pu.mutation.ClearAmenities()
	return pu
}

// RemoveAmenityIDs removes the "amenities" edge to Amenity entities by IDs.
func (pu *PlaceUpdate) RemoveAmenityIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveAmenityIDs(ids...)
	return pu
}

// RemoveAmenities removes "amenities" edges to Amenity entities.
func (pu *PlaceUpdate) RemoveAmenities(a ...*Amenity) *PlaceUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAmenityIDs(ids...)
}

// ClearMenus clears all "menus" edges to the Menu entity.
func (pu *PlaceUpdate) ClearMenus() *PlaceUpdate {
	pu.mutation.ClearMenus()
	return pu
}

// RemoveMenuIDs removes the "menus" edge to Menu entities by IDs.
func (pu *PlaceUpdate) RemoveMenuIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveMenuIDs(ids...)
	return pu
}

// RemoveMenus removes "menus" edges to Menu entities.
func (pu *PlaceUpdate) RemoveMenus(m ...*Menu) *PlaceUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveMenuIDs(ids...)
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (pu *PlaceUpdate) ClearRooms() *PlaceUpdate {
	pu.mutation.ClearRooms()
	return pu
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (pu *PlaceUpdate) RemoveRoomIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveRoomIDs(ids...)
	return pu
}

// RemoveRooms removes "rooms" edges to Room entities.
func (pu *PlaceUpdate) RemoveRooms(r ...*Room) *PlaceUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRoomIDs(ids...)
}

// ClearReservations clears all "reservations" edges to the Reservation entity.
func (pu *PlaceUpdate) ClearReservations() *PlaceUpdate {
	pu.mutation.ClearReservations()
	return pu
}

// RemoveReservationIDs removes the "reservations" edge to Reservation entities by IDs.
func (pu *PlaceUpdate) RemoveReservationIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveReservationIDs(ids...)
	return pu
}

// RemoveReservations removes "reservations" edges to Reservation entities.
func (pu *PlaceUpdate) RemoveReservations(r ...*Reservation) *PlaceUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveReservationIDs(ids...)
}

// ClearBookings clears all "bookings" edges to the Booking entity.
func (pu *PlaceUpdate) ClearBookings() *PlaceUpdate {
	pu.mutation.ClearBookings()
	return pu
}

// RemoveBookingIDs removes the "bookings" edge to Booking entities by IDs.
func (pu *PlaceUpdate) RemoveBookingIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveBookingIDs(ids...)
	return pu
}

// RemoveBookings removes "bookings" edges to Booking entities.
func (pu *PlaceUpdate) RemoveBookings(b ...*Booking) *PlaceUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemoveBookingIDs(ids...)
}

// ClearCategories clears all "categories" edges to the Category entity.
func (pu *PlaceUpdate) ClearCategories() *PlaceUpdate {
	pu.mutation.ClearCategories()
	return pu
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (pu *PlaceUpdate) RemoveCategoryIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveCategoryIDs(ids...)
	return pu
}

// RemoveCategories removes "categories" edges to Category entities.
func (pu *PlaceUpdate) RemoveCategories(c ...*Category) *PlaceUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCategoryIDs(ids...)
}

// ClearCategoryAssignments clears all "categoryAssignments" edges to the CategoryAssignment entity.
func (pu *PlaceUpdate) ClearCategoryAssignments() *PlaceUpdate {
	pu.mutation.ClearCategoryAssignments()
	return pu
}

// RemoveCategoryAssignmentIDs removes the "categoryAssignments" edge to CategoryAssignment entities by IDs.
func (pu *PlaceUpdate) RemoveCategoryAssignmentIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveCategoryAssignmentIDs(ids...)
	return pu
}

// RemoveCategoryAssignments removes "categoryAssignments" edges to CategoryAssignment entities.
func (pu *PlaceUpdate) RemoveCategoryAssignments(c ...*CategoryAssignment) *PlaceUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCategoryAssignmentIDs(ids...)
}

// ClearFaqs clears all "faqs" edges to the FAQ entity.
func (pu *PlaceUpdate) ClearFaqs() *PlaceUpdate {
	pu.mutation.ClearFaqs()
	return pu
}

// RemoveFaqIDs removes the "faqs" edge to FAQ entities by IDs.
func (pu *PlaceUpdate) RemoveFaqIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveFaqIDs(ids...)
	return pu
}

// RemoveFaqs removes "faqs" edges to FAQ entities.
func (pu *PlaceUpdate) RemoveFaqs(f ...*FAQ) *PlaceUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemoveFaqIDs(ids...)
}

// ClearLikedByUsers clears all "likedByUsers" edges to the UserLikePlace entity.
func (pu *PlaceUpdate) ClearLikedByUsers() *PlaceUpdate {
	pu.mutation.ClearLikedByUsers()
	return pu
}

// RemoveLikedByUserIDs removes the "likedByUsers" edge to UserLikePlace entities by IDs.
func (pu *PlaceUpdate) RemoveLikedByUserIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveLikedByUserIDs(ids...)
	return pu
}

// RemoveLikedByUsers removes "likedByUsers" edges to UserLikePlace entities.
func (pu *PlaceUpdate) RemoveLikedByUsers(u ...*UserLikePlace) *PlaceUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveLikedByUserIDs(ids...)
}

// ClearFollowerUsers clears all "followerUsers" edges to the UserFollowPlace entity.
func (pu *PlaceUpdate) ClearFollowerUsers() *PlaceUpdate {
	pu.mutation.ClearFollowerUsers()
	return pu
}

// RemoveFollowerUserIDs removes the "followerUsers" edge to UserFollowPlace entities by IDs.
func (pu *PlaceUpdate) RemoveFollowerUserIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveFollowerUserIDs(ids...)
	return pu
}

// RemoveFollowerUsers removes "followerUsers" edges to UserFollowPlace entities.
func (pu *PlaceUpdate) RemoveFollowerUsers(u ...*UserFollowPlace) *PlaceUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveFollowerUserIDs(ids...)
}

// ClearRatings clears all "ratings" edges to the Rating entity.
func (pu *PlaceUpdate) ClearRatings() *PlaceUpdate {
	pu.mutation.ClearRatings()
	return pu
}

// RemoveRatingIDs removes the "ratings" edge to Rating entities by IDs.
func (pu *PlaceUpdate) RemoveRatingIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveRatingIDs(ids...)
	return pu
}

// RemoveRatings removes "ratings" edges to Rating entities.
func (pu *PlaceUpdate) RemoveRatings(r ...*Rating) *PlaceUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRatingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlaceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlaceUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlaceUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlaceUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PlaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(place.Table, place.Columns, sqlgraph.NewFieldSpec(place.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(place.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(place.FieldType, field.TypeString, value)
	}
	if pu.mutation.TypeCleared() {
		_spec.ClearField(place.FieldType, field.TypeString)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(place.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(place.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Location(); ok {
		_spec.SetField(place.FieldLocation, field.TypeString, value)
	}
	if pu.mutation.LocationCleared() {
		_spec.ClearField(place.FieldLocation, field.TypeString)
	}
	if value, ok := pu.mutation.Email(); ok {
		_spec.SetField(place.FieldEmail, field.TypeString, value)
	}
	if pu.mutation.EmailCleared() {
		_spec.ClearField(place.FieldEmail, field.TypeString)
	}
	if value, ok := pu.mutation.Phone(); ok {
		_spec.SetField(place.FieldPhone, field.TypeString, value)
	}
	if pu.mutation.PhoneCleared() {
		_spec.ClearField(place.FieldPhone, field.TypeString)
	}
	if value, ok := pu.mutation.Website(); ok {
		_spec.SetField(place.FieldWebsite, field.TypeString, value)
	}
	if pu.mutation.WebsiteCleared() {
		_spec.ClearField(place.FieldWebsite, field.TypeString)
	}
	if value, ok := pu.mutation.CoverImage(); ok {
		_spec.SetField(place.FieldCoverImage, field.TypeString, value)
	}
	if pu.mutation.CoverImageCleared() {
		_spec.ClearField(place.FieldCoverImage, field.TypeString)
	}
	if value, ok := pu.mutation.Picture(); ok {
		_spec.SetField(place.FieldPicture, field.TypeString, value)
	}
	if pu.mutation.PictureCleared() {
		_spec.ClearField(place.FieldPicture, field.TypeString)
	}
	if value, ok := pu.mutation.Country(); ok {
		_spec.SetField(place.FieldCountry, field.TypeString, value)
	}
	if pu.mutation.CountryCleared() {
		_spec.ClearField(place.FieldCountry, field.TypeString)
	}
	if value, ok := pu.mutation.City(); ok {
		_spec.SetField(place.FieldCity, field.TypeString, value)
	}
	if pu.mutation.CityCleared() {
		_spec.ClearField(place.FieldCity, field.TypeString)
	}
	if value, ok := pu.mutation.State(); ok {
		_spec.SetField(place.FieldState, field.TypeString, value)
	}
	if pu.mutation.StateCleared() {
		_spec.ClearField(place.FieldState, field.TypeString)
	}
	if value, ok := pu.mutation.PlaceSettings(); ok {
		_spec.SetField(place.FieldPlaceSettings, field.TypeJSON, value)
	}
	if pu.mutation.PlaceSettingsCleared() {
		_spec.ClearField(place.FieldPlaceSettings, field.TypeJSON)
	}
	if value, ok := pu.mutation.OpeningHours(); ok {
		_spec.SetField(place.FieldOpeningHours, field.TypeJSON, value)
	}
	if pu.mutation.OpeningHoursCleared() {
		_spec.ClearField(place.FieldOpeningHours, field.TypeJSON)
	}
	if value, ok := pu.mutation.SocialMedia(); ok {
		_spec.SetField(place.FieldSocialMedia, field.TypeJSON, value)
	}
	if pu.mutation.SocialMediaCleared() {
		_spec.ClearField(place.FieldSocialMedia, field.TypeJSON)
	}
	if value, ok := pu.mutation.PaymentOptions(); ok {
		_spec.SetField(place.FieldPaymentOptions, field.TypeJSON, value)
	}
	if pu.mutation.PaymentOptionsCleared() {
		_spec.ClearField(place.FieldPaymentOptions, field.TypeJSON)
	}
	if value, ok := pu.mutation.Tags(); ok {
		_spec.SetField(place.FieldTags, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, place.FieldTags, value)
		})
	}
	if pu.mutation.TagsCleared() {
		_spec.ClearField(place.FieldTags, field.TypeJSON)
	}
	if value, ok := pu.mutation.Features(); ok {
		_spec.SetField(place.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, place.FieldFeatures, value)
		})
	}
	if pu.mutation.FeaturesCleared() {
		_spec.ClearField(place.FieldFeatures, field.TypeJSON)
	}
	if value, ok := pu.mutation.AdditionalInfo(); ok {
		_spec.SetField(place.FieldAdditionalInfo, field.TypeJSON, value)
	}
	if pu.mutation.AdditionalInfoCleared() {
		_spec.ClearField(place.FieldAdditionalInfo, field.TypeJSON)
	}
	if value, ok := pu.mutation.Images(); ok {
		_spec.SetField(place.FieldImages, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, place.FieldImages, value)
		})
	}
	if pu.mutation.ImagesCleared() {
		_spec.ClearField(place.FieldImages, field.TypeJSON)
	}
	if value, ok := pu.mutation.Availability(); ok {
		_spec.SetField(place.FieldAvailability, field.TypeJSON, value)
	}
	if pu.mutation.AvailabilityCleared() {
		_spec.ClearField(place.FieldAvailability, field.TypeJSON)
	}
	if value, ok := pu.mutation.SpecialOffers(); ok {
		_spec.SetField(place.FieldSpecialOffers, field.TypeString, value)
	}
	if pu.mutation.SpecialOffersCleared() {
		_spec.ClearField(place.FieldSpecialOffers, field.TypeString)
	}
	if value, ok := pu.mutation.SustainabilityScore(); ok {
		_spec.SetField(place.FieldSustainabilityScore, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedSustainabilityScore(); ok {
		_spec.AddField(place.FieldSustainabilityScore, field.TypeFloat64, value)
	}
	if pu.mutation.SustainabilityScoreCleared() {
		_spec.ClearField(place.FieldSustainabilityScore, field.TypeFloat64)
	}
	if value, ok := pu.mutation.MapCoordinates(); ok {
		_spec.SetField(place.FieldMapCoordinates, field.TypeJSON, value)
	}
	if pu.mutation.MapCoordinatesCleared() {
		_spec.ClearField(place.FieldMapCoordinates, field.TypeJSON)
	}
	if value, ok := pu.mutation.Longitude(); ok {
		_spec.SetField(place.FieldLongitude, field.TypeString, value)
	}
	if pu.mutation.LongitudeCleared() {
		_spec.ClearField(place.FieldLongitude, field.TypeString)
	}
	if value, ok := pu.mutation.Latitude(); ok {
		_spec.SetField(place.FieldLatitude, field.TypeString, value)
	}
	if pu.mutation.LatitudeCleared() {
		_spec.ClearField(place.FieldLatitude, field.TypeString)
	}
	if value, ok := pu.mutation.SearchText(); ok {
		_spec.SetField(place.FieldSearchText, field.TypeString, value)
	}
	if pu.mutation.SearchTextCleared() {
		_spec.ClearField(place.FieldSearchText, field.TypeString)
	}
	if value, ok := pu.mutation.RelevanceScore(); ok {
		_spec.SetField(place.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedRelevanceScore(); ok {
		_spec.AddField(place.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if pu.mutation.RelevanceScoreCleared() {
		_spec.ClearField(place.FieldRelevanceScore, field.TypeFloat64)
	}
	if value, ok := pu.mutation.FollowersCount(); ok {
		_spec.SetField(place.FieldFollowersCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedFollowersCount(); ok {
		_spec.AddField(place.FieldFollowersCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.FollowingCount(); ok {
		_spec.SetField(place.FieldFollowingCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedFollowingCount(); ok {
		_spec.AddField(place.FieldFollowingCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.LikesCount(); ok {
		_spec.SetField(place.FieldLikesCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedLikesCount(); ok {
		_spec.AddField(place.FieldLikesCount, field.TypeInt, value)
	}
	if pu.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   place.BusinessTable,
			Columns: []string{place.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   place.BusinessTable,
			Columns: []string{place.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.UsersTable,
			Columns: place.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !pu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.UsersTable,
			Columns: place.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.UsersTable,
			Columns: place.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReviewsTable,
			Columns: []string{place.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !pu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReviewsTable,
			Columns: []string{place.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReviewsTable,
			Columns: []string{place.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.EventsTable,
			Columns: []string{place.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !pu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.EventsTable,
			Columns: []string{place.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.EventsTable,
			Columns: []string{place.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AmenitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.AmenitiesTable,
			Columns: place.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAmenitiesIDs(); len(nodes) > 0 && !pu.mutation.AmenitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.AmenitiesTable,
			Columns: place.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AmenitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.AmenitiesTable,
			Columns: place.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.MenusTable,
			Columns: []string{place.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMenusIDs(); len(nodes) > 0 && !pu.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.MenusTable,
			Columns: []string{place.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.MenusTable,
			Columns: []string{place.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RoomsTable,
			Columns: []string{place.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !pu.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RoomsTable,
			Columns: []string{place.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RoomsTable,
			Columns: []string{place.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReservationsTable,
			Columns: []string{place.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedReservationsIDs(); len(nodes) > 0 && !pu.mutation.ReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReservationsTable,
			Columns: []string{place.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ReservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReservationsTable,
			Columns: []string{place.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.BookingsTable,
			Columns: []string{place.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedBookingsIDs(); len(nodes) > 0 && !pu.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.BookingsTable,
			Columns: []string{place.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.BookingsTable,
			Columns: []string{place.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.CategoriesTable,
			Columns: []string{place.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !pu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.CategoriesTable,
			Columns: []string{place.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.CategoriesTable,
			Columns: []string{place.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CategoryAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.CategoryAssignmentsTable,
			Columns: []string{place.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCategoryAssignmentsIDs(); len(nodes) > 0 && !pu.mutation.CategoryAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.CategoryAssignmentsTable,
			Columns: []string{place.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CategoryAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.CategoryAssignmentsTable,
			Columns: []string{place.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FaqsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.FaqsTable,
			Columns: place.FaqsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faq.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFaqsIDs(); len(nodes) > 0 && !pu.mutation.FaqsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.FaqsTable,
			Columns: place.FaqsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faq.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FaqsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.FaqsTable,
			Columns: place.FaqsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faq.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.LikedByUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   place.LikedByUsersTable,
			Columns: []string{place.LikedByUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userlikeplace.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedLikedByUsersIDs(); len(nodes) > 0 && !pu.mutation.LikedByUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   place.LikedByUsersTable,
			Columns: []string{place.LikedByUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userlikeplace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.LikedByUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   place.LikedByUsersTable,
			Columns: []string{place.LikedByUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userlikeplace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FollowerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.FollowerUsersTable,
			Columns: []string{place.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowplace.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFollowerUsersIDs(); len(nodes) > 0 && !pu.mutation.FollowerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.FollowerUsersTable,
			Columns: []string{place.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowplace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FollowerUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.FollowerUsersTable,
			Columns: []string{place.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowplace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RatingsTable,
			Columns: []string{place.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRatingsIDs(); len(nodes) > 0 && !pu.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RatingsTable,
			Columns: []string{place.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RatingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RatingsTable,
			Columns: []string{place.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{place.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlaceUpdateOne is the builder for updating a single Place entity.
type PlaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaceMutation
}

// SetName sets the "name" field.
func (puo *PlaceUpdateOne) SetName(s string) *PlaceUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetType sets the "type" field.
func (puo *PlaceUpdateOne) SetType(s string) *PlaceUpdateOne {
	puo.mutation.SetType(s)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableType(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetType(*s)
	}
	return puo
}

// ClearType clears the value of the "type" field.
func (puo *PlaceUpdateOne) ClearType() *PlaceUpdateOne {
	puo.mutation.ClearType()
	return puo
}

// SetDescription sets the "description" field.
func (puo *PlaceUpdateOne) SetDescription(s string) *PlaceUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableDescription(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PlaceUpdateOne) ClearDescription() *PlaceUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetLocation sets the "location" field.
func (puo *PlaceUpdateOne) SetLocation(s string) *PlaceUpdateOne {
	puo.mutation.SetLocation(s)
	return puo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableLocation(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetLocation(*s)
	}
	return puo
}

// ClearLocation clears the value of the "location" field.
func (puo *PlaceUpdateOne) ClearLocation() *PlaceUpdateOne {
	puo.mutation.ClearLocation()
	return puo
}

// SetEmail sets the "email" field.
func (puo *PlaceUpdateOne) SetEmail(s string) *PlaceUpdateOne {
	puo.mutation.SetEmail(s)
	return puo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableEmail(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetEmail(*s)
	}
	return puo
}

// ClearEmail clears the value of the "email" field.
func (puo *PlaceUpdateOne) ClearEmail() *PlaceUpdateOne {
	puo.mutation.ClearEmail()
	return puo
}

// SetPhone sets the "phone" field.
func (puo *PlaceUpdateOne) SetPhone(s string) *PlaceUpdateOne {
	puo.mutation.SetPhone(s)
	return puo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillablePhone(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetPhone(*s)
	}
	return puo
}

// ClearPhone clears the value of the "phone" field.
func (puo *PlaceUpdateOne) ClearPhone() *PlaceUpdateOne {
	puo.mutation.ClearPhone()
	return puo
}

// SetWebsite sets the "website" field.
func (puo *PlaceUpdateOne) SetWebsite(s string) *PlaceUpdateOne {
	puo.mutation.SetWebsite(s)
	return puo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableWebsite(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetWebsite(*s)
	}
	return puo
}

// ClearWebsite clears the value of the "website" field.
func (puo *PlaceUpdateOne) ClearWebsite() *PlaceUpdateOne {
	puo.mutation.ClearWebsite()
	return puo
}

// SetCoverImage sets the "cover_image" field.
func (puo *PlaceUpdateOne) SetCoverImage(s string) *PlaceUpdateOne {
	puo.mutation.SetCoverImage(s)
	return puo
}

// SetNillableCoverImage sets the "cover_image" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableCoverImage(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetCoverImage(*s)
	}
	return puo
}

// ClearCoverImage clears the value of the "cover_image" field.
func (puo *PlaceUpdateOne) ClearCoverImage() *PlaceUpdateOne {
	puo.mutation.ClearCoverImage()
	return puo
}

// SetPicture sets the "picture" field.
func (puo *PlaceUpdateOne) SetPicture(s string) *PlaceUpdateOne {
	puo.mutation.SetPicture(s)
	return puo
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillablePicture(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetPicture(*s)
	}
	return puo
}

// ClearPicture clears the value of the "picture" field.
func (puo *PlaceUpdateOne) ClearPicture() *PlaceUpdateOne {
	puo.mutation.ClearPicture()
	return puo
}

// SetCountry sets the "country" field.
func (puo *PlaceUpdateOne) SetCountry(s string) *PlaceUpdateOne {
	puo.mutation.SetCountry(s)
	return puo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableCountry(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetCountry(*s)
	}
	return puo
}

// ClearCountry clears the value of the "country" field.
func (puo *PlaceUpdateOne) ClearCountry() *PlaceUpdateOne {
	puo.mutation.ClearCountry()
	return puo
}

// SetCity sets the "city" field.
func (puo *PlaceUpdateOne) SetCity(s string) *PlaceUpdateOne {
	puo.mutation.SetCity(s)
	return puo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableCity(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetCity(*s)
	}
	return puo
}

// ClearCity clears the value of the "city" field.
func (puo *PlaceUpdateOne) ClearCity() *PlaceUpdateOne {
	puo.mutation.ClearCity()
	return puo
}

// SetState sets the "state" field.
func (puo *PlaceUpdateOne) SetState(s string) *PlaceUpdateOne {
	puo.mutation.SetState(s)
	return puo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableState(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetState(*s)
	}
	return puo
}

// ClearState clears the value of the "state" field.
func (puo *PlaceUpdateOne) ClearState() *PlaceUpdateOne {
	puo.mutation.ClearState()
	return puo
}

// SetPlaceSettings sets the "place_settings" field.
func (puo *PlaceUpdateOne) SetPlaceSettings(m map[string]interface{}) *PlaceUpdateOne {
	puo.mutation.SetPlaceSettings(m)
	return puo
}

// ClearPlaceSettings clears the value of the "place_settings" field.
func (puo *PlaceUpdateOne) ClearPlaceSettings() *PlaceUpdateOne {
	puo.mutation.ClearPlaceSettings()
	return puo
}

// SetOpeningHours sets the "opening_hours" field.
func (puo *PlaceUpdateOne) SetOpeningHours(m map[string]interface{}) *PlaceUpdateOne {
	puo.mutation.SetOpeningHours(m)
	return puo
}

// ClearOpeningHours clears the value of the "opening_hours" field.
func (puo *PlaceUpdateOne) ClearOpeningHours() *PlaceUpdateOne {
	puo.mutation.ClearOpeningHours()
	return puo
}

// SetSocialMedia sets the "social_media" field.
func (puo *PlaceUpdateOne) SetSocialMedia(m map[string]interface{}) *PlaceUpdateOne {
	puo.mutation.SetSocialMedia(m)
	return puo
}

// ClearSocialMedia clears the value of the "social_media" field.
func (puo *PlaceUpdateOne) ClearSocialMedia() *PlaceUpdateOne {
	puo.mutation.ClearSocialMedia()
	return puo
}

// SetPaymentOptions sets the "payment_options" field.
func (puo *PlaceUpdateOne) SetPaymentOptions(m map[string]interface{}) *PlaceUpdateOne {
	puo.mutation.SetPaymentOptions(m)
	return puo
}

// ClearPaymentOptions clears the value of the "payment_options" field.
func (puo *PlaceUpdateOne) ClearPaymentOptions() *PlaceUpdateOne {
	puo.mutation.ClearPaymentOptions()
	return puo
}

// SetTags sets the "tags" field.
func (puo *PlaceUpdateOne) SetTags(s []string) *PlaceUpdateOne {
	puo.mutation.SetTags(s)
	return puo
}

// AppendTags appends s to the "tags" field.
func (puo *PlaceUpdateOne) AppendTags(s []string) *PlaceUpdateOne {
	puo.mutation.AppendTags(s)
	return puo
}

// ClearTags clears the value of the "tags" field.
func (puo *PlaceUpdateOne) ClearTags() *PlaceUpdateOne {
	puo.mutation.ClearTags()
	return puo
}

// SetFeatures sets the "features" field.
func (puo *PlaceUpdateOne) SetFeatures(s []string) *PlaceUpdateOne {
	puo.mutation.SetFeatures(s)
	return puo
}

// AppendFeatures appends s to the "features" field.
func (puo *PlaceUpdateOne) AppendFeatures(s []string) *PlaceUpdateOne {
	puo.mutation.AppendFeatures(s)
	return puo
}

// ClearFeatures clears the value of the "features" field.
func (puo *PlaceUpdateOne) ClearFeatures() *PlaceUpdateOne {
	puo.mutation.ClearFeatures()
	return puo
}

// SetAdditionalInfo sets the "additional_info" field.
func (puo *PlaceUpdateOne) SetAdditionalInfo(m map[string]interface{}) *PlaceUpdateOne {
	puo.mutation.SetAdditionalInfo(m)
	return puo
}

// ClearAdditionalInfo clears the value of the "additional_info" field.
func (puo *PlaceUpdateOne) ClearAdditionalInfo() *PlaceUpdateOne {
	puo.mutation.ClearAdditionalInfo()
	return puo
}

// SetImages sets the "images" field.
func (puo *PlaceUpdateOne) SetImages(s []string) *PlaceUpdateOne {
	puo.mutation.SetImages(s)
	return puo
}

// AppendImages appends s to the "images" field.
func (puo *PlaceUpdateOne) AppendImages(s []string) *PlaceUpdateOne {
	puo.mutation.AppendImages(s)
	return puo
}

// ClearImages clears the value of the "images" field.
func (puo *PlaceUpdateOne) ClearImages() *PlaceUpdateOne {
	puo.mutation.ClearImages()
	return puo
}

// SetAvailability sets the "availability" field.
func (puo *PlaceUpdateOne) SetAvailability(m map[string]interface{}) *PlaceUpdateOne {
	puo.mutation.SetAvailability(m)
	return puo
}

// ClearAvailability clears the value of the "availability" field.
func (puo *PlaceUpdateOne) ClearAvailability() *PlaceUpdateOne {
	puo.mutation.ClearAvailability()
	return puo
}

// SetSpecialOffers sets the "special_offers" field.
func (puo *PlaceUpdateOne) SetSpecialOffers(s string) *PlaceUpdateOne {
	puo.mutation.SetSpecialOffers(s)
	return puo
}

// SetNillableSpecialOffers sets the "special_offers" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableSpecialOffers(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetSpecialOffers(*s)
	}
	return puo
}

// ClearSpecialOffers clears the value of the "special_offers" field.
func (puo *PlaceUpdateOne) ClearSpecialOffers() *PlaceUpdateOne {
	puo.mutation.ClearSpecialOffers()
	return puo
}

// SetSustainabilityScore sets the "sustainability_score" field.
func (puo *PlaceUpdateOne) SetSustainabilityScore(f float64) *PlaceUpdateOne {
	puo.mutation.ResetSustainabilityScore()
	puo.mutation.SetSustainabilityScore(f)
	return puo
}

// SetNillableSustainabilityScore sets the "sustainability_score" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableSustainabilityScore(f *float64) *PlaceUpdateOne {
	if f != nil {
		puo.SetSustainabilityScore(*f)
	}
	return puo
}

// AddSustainabilityScore adds f to the "sustainability_score" field.
func (puo *PlaceUpdateOne) AddSustainabilityScore(f float64) *PlaceUpdateOne {
	puo.mutation.AddSustainabilityScore(f)
	return puo
}

// ClearSustainabilityScore clears the value of the "sustainability_score" field.
func (puo *PlaceUpdateOne) ClearSustainabilityScore() *PlaceUpdateOne {
	puo.mutation.ClearSustainabilityScore()
	return puo
}

// SetMapCoordinates sets the "map_coordinates" field.
func (puo *PlaceUpdateOne) SetMapCoordinates(m map[string]interface{}) *PlaceUpdateOne {
	puo.mutation.SetMapCoordinates(m)
	return puo
}

// ClearMapCoordinates clears the value of the "map_coordinates" field.
func (puo *PlaceUpdateOne) ClearMapCoordinates() *PlaceUpdateOne {
	puo.mutation.ClearMapCoordinates()
	return puo
}

// SetLongitude sets the "longitude" field.
func (puo *PlaceUpdateOne) SetLongitude(s string) *PlaceUpdateOne {
	puo.mutation.SetLongitude(s)
	return puo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableLongitude(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetLongitude(*s)
	}
	return puo
}

// ClearLongitude clears the value of the "longitude" field.
func (puo *PlaceUpdateOne) ClearLongitude() *PlaceUpdateOne {
	puo.mutation.ClearLongitude()
	return puo
}

// SetLatitude sets the "latitude" field.
func (puo *PlaceUpdateOne) SetLatitude(s string) *PlaceUpdateOne {
	puo.mutation.SetLatitude(s)
	return puo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableLatitude(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetLatitude(*s)
	}
	return puo
}

// ClearLatitude clears the value of the "latitude" field.
func (puo *PlaceUpdateOne) ClearLatitude() *PlaceUpdateOne {
	puo.mutation.ClearLatitude()
	return puo
}

// SetSearchText sets the "search_text" field.
func (puo *PlaceUpdateOne) SetSearchText(s string) *PlaceUpdateOne {
	puo.mutation.SetSearchText(s)
	return puo
}

// SetNillableSearchText sets the "search_text" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableSearchText(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetSearchText(*s)
	}
	return puo
}

// ClearSearchText clears the value of the "search_text" field.
func (puo *PlaceUpdateOne) ClearSearchText() *PlaceUpdateOne {
	puo.mutation.ClearSearchText()
	return puo
}

// SetRelevanceScore sets the "relevance_score" field.
func (puo *PlaceUpdateOne) SetRelevanceScore(f float64) *PlaceUpdateOne {
	puo.mutation.ResetRelevanceScore()
	puo.mutation.SetRelevanceScore(f)
	return puo
}

// SetNillableRelevanceScore sets the "relevance_score" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableRelevanceScore(f *float64) *PlaceUpdateOne {
	if f != nil {
		puo.SetRelevanceScore(*f)
	}
	return puo
}

// AddRelevanceScore adds f to the "relevance_score" field.
func (puo *PlaceUpdateOne) AddRelevanceScore(f float64) *PlaceUpdateOne {
	puo.mutation.AddRelevanceScore(f)
	return puo
}

// ClearRelevanceScore clears the value of the "relevance_score" field.
func (puo *PlaceUpdateOne) ClearRelevanceScore() *PlaceUpdateOne {
	puo.mutation.ClearRelevanceScore()
	return puo
}

// SetFollowersCount sets the "followers_count" field.
func (puo *PlaceUpdateOne) SetFollowersCount(i int) *PlaceUpdateOne {
	puo.mutation.ResetFollowersCount()
	puo.mutation.SetFollowersCount(i)
	return puo
}

// SetNillableFollowersCount sets the "followers_count" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableFollowersCount(i *int) *PlaceUpdateOne {
	if i != nil {
		puo.SetFollowersCount(*i)
	}
	return puo
}

// AddFollowersCount adds i to the "followers_count" field.
func (puo *PlaceUpdateOne) AddFollowersCount(i int) *PlaceUpdateOne {
	puo.mutation.AddFollowersCount(i)
	return puo
}

// SetFollowingCount sets the "following_count" field.
func (puo *PlaceUpdateOne) SetFollowingCount(i int) *PlaceUpdateOne {
	puo.mutation.ResetFollowingCount()
	puo.mutation.SetFollowingCount(i)
	return puo
}

// SetNillableFollowingCount sets the "following_count" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableFollowingCount(i *int) *PlaceUpdateOne {
	if i != nil {
		puo.SetFollowingCount(*i)
	}
	return puo
}

// AddFollowingCount adds i to the "following_count" field.
func (puo *PlaceUpdateOne) AddFollowingCount(i int) *PlaceUpdateOne {
	puo.mutation.AddFollowingCount(i)
	return puo
}

// SetLikesCount sets the "likes_count" field.
func (puo *PlaceUpdateOne) SetLikesCount(i int) *PlaceUpdateOne {
	puo.mutation.ResetLikesCount()
	puo.mutation.SetLikesCount(i)
	return puo
}

// SetNillableLikesCount sets the "likes_count" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableLikesCount(i *int) *PlaceUpdateOne {
	if i != nil {
		puo.SetLikesCount(*i)
	}
	return puo
}

// AddLikesCount adds i to the "likes_count" field.
func (puo *PlaceUpdateOne) AddLikesCount(i int) *PlaceUpdateOne {
	puo.mutation.AddLikesCount(i)
	return puo
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (puo *PlaceUpdateOne) SetBusinessID(id string) *PlaceUpdateOne {
	puo.mutation.SetBusinessID(id)
	return puo
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableBusinessID(id *string) *PlaceUpdateOne {
	if id != nil {
		puo = puo.SetBusinessID(*id)
	}
	return puo
}

// SetBusiness sets the "business" edge to the Business entity.
func (puo *PlaceUpdateOne) SetBusiness(b *Business) *PlaceUpdateOne {
	return puo.SetBusinessID(b.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (puo *PlaceUpdateOne) AddUserIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddUserIDs(ids...)
	return puo
}

// AddUsers adds the "users" edges to the User entity.
func (puo *PlaceUpdateOne) AddUsers(u ...*User) *PlaceUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddUserIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (puo *PlaceUpdateOne) AddReviewIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddReviewIDs(ids...)
	return puo
}

// AddReviews adds the "reviews" edges to the Review entity.
func (puo *PlaceUpdateOne) AddReviews(r ...*Review) *PlaceUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddReviewIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (puo *PlaceUpdateOne) AddEventIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddEventIDs(ids...)
	return puo
}

// AddEvents adds the "events" edges to the Event entity.
func (puo *PlaceUpdateOne) AddEvents(e ...*Event) *PlaceUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.AddEventIDs(ids...)
}

// AddAmenityIDs adds the "amenities" edge to the Amenity entity by IDs.
func (puo *PlaceUpdateOne) AddAmenityIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddAmenityIDs(ids...)
	return puo
}

// AddAmenities adds the "amenities" edges to the Amenity entity.
func (puo *PlaceUpdateOne) AddAmenities(a ...*Amenity) *PlaceUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAmenityIDs(ids...)
}

// AddMenuIDs adds the "menus" edge to the Menu entity by IDs.
func (puo *PlaceUpdateOne) AddMenuIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddMenuIDs(ids...)
	return puo
}

// AddMenus adds the "menus" edges to the Menu entity.
func (puo *PlaceUpdateOne) AddMenus(m ...*Menu) *PlaceUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddMenuIDs(ids...)
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (puo *PlaceUpdateOne) AddRoomIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddRoomIDs(ids...)
	return puo
}

// AddRooms adds the "rooms" edges to the Room entity.
func (puo *PlaceUpdateOne) AddRooms(r ...*Room) *PlaceUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRoomIDs(ids...)
}

// AddReservationIDs adds the "reservations" edge to the Reservation entity by IDs.
func (puo *PlaceUpdateOne) AddReservationIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddReservationIDs(ids...)
	return puo
}

// AddReservations adds the "reservations" edges to the Reservation entity.
func (puo *PlaceUpdateOne) AddReservations(r ...*Reservation) *PlaceUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddReservationIDs(ids...)
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by IDs.
func (puo *PlaceUpdateOne) AddBookingIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddBookingIDs(ids...)
	return puo
}

// AddBookings adds the "bookings" edges to the Booking entity.
func (puo *PlaceUpdateOne) AddBookings(b ...*Booking) *PlaceUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddBookingIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (puo *PlaceUpdateOne) AddCategoryIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddCategoryIDs(ids...)
	return puo
}

// AddCategories adds the "categories" edges to the Category entity.
func (puo *PlaceUpdateOne) AddCategories(c ...*Category) *PlaceUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCategoryIDs(ids...)
}

// AddCategoryAssignmentIDs adds the "categoryAssignments" edge to the CategoryAssignment entity by IDs.
func (puo *PlaceUpdateOne) AddCategoryAssignmentIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddCategoryAssignmentIDs(ids...)
	return puo
}

// AddCategoryAssignments adds the "categoryAssignments" edges to the CategoryAssignment entity.
func (puo *PlaceUpdateOne) AddCategoryAssignments(c ...*CategoryAssignment) *PlaceUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCategoryAssignmentIDs(ids...)
}

// AddFaqIDs adds the "faqs" edge to the FAQ entity by IDs.
func (puo *PlaceUpdateOne) AddFaqIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddFaqIDs(ids...)
	return puo
}

// AddFaqs adds the "faqs" edges to the FAQ entity.
func (puo *PlaceUpdateOne) AddFaqs(f ...*FAQ) *PlaceUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddFaqIDs(ids...)
}

// AddLikedByUserIDs adds the "likedByUsers" edge to the UserLikePlace entity by IDs.
func (puo *PlaceUpdateOne) AddLikedByUserIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddLikedByUserIDs(ids...)
	return puo
}

// AddLikedByUsers adds the "likedByUsers" edges to the UserLikePlace entity.
func (puo *PlaceUpdateOne) AddLikedByUsers(u ...*UserLikePlace) *PlaceUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddLikedByUserIDs(ids...)
}

// AddFollowerUserIDs adds the "followerUsers" edge to the UserFollowPlace entity by IDs.
func (puo *PlaceUpdateOne) AddFollowerUserIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddFollowerUserIDs(ids...)
	return puo
}

// AddFollowerUsers adds the "followerUsers" edges to the UserFollowPlace entity.
func (puo *PlaceUpdateOne) AddFollowerUsers(u ...*UserFollowPlace) *PlaceUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddFollowerUserIDs(ids...)
}

// AddRatingIDs adds the "ratings" edge to the Rating entity by IDs.
func (puo *PlaceUpdateOne) AddRatingIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddRatingIDs(ids...)
	return puo
}

// AddRatings adds the "ratings" edges to the Rating entity.
func (puo *PlaceUpdateOne) AddRatings(r ...*Rating) *PlaceUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRatingIDs(ids...)
}

// Mutation returns the PlaceMutation object of the builder.
func (puo *PlaceUpdateOne) Mutation() *PlaceMutation {
	return puo.mutation
}

// ClearBusiness clears the "business" edge to the Business entity.
func (puo *PlaceUpdateOne) ClearBusiness() *PlaceUpdateOne {
	puo.mutation.ClearBusiness()
	return puo
}

// ClearUsers clears all "users" edges to the User entity.
func (puo *PlaceUpdateOne) ClearUsers() *PlaceUpdateOne {
	puo.mutation.ClearUsers()
	return puo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (puo *PlaceUpdateOne) RemoveUserIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveUserIDs(ids...)
	return puo
}

// RemoveUsers removes "users" edges to User entities.
func (puo *PlaceUpdateOne) RemoveUsers(u ...*User) *PlaceUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveUserIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (puo *PlaceUpdateOne) ClearReviews() *PlaceUpdateOne {
	puo.mutation.ClearReviews()
	return puo
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (puo *PlaceUpdateOne) RemoveReviewIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveReviewIDs(ids...)
	return puo
}

// RemoveReviews removes "reviews" edges to Review entities.
func (puo *PlaceUpdateOne) RemoveReviews(r ...*Review) *PlaceUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveReviewIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (puo *PlaceUpdateOne) ClearEvents() *PlaceUpdateOne {
	puo.mutation.ClearEvents()
	return puo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (puo *PlaceUpdateOne) RemoveEventIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveEventIDs(ids...)
	return puo
}

// RemoveEvents removes "events" edges to Event entities.
func (puo *PlaceUpdateOne) RemoveEvents(e ...*Event) *PlaceUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.RemoveEventIDs(ids...)
}

// ClearAmenities clears all "amenities" edges to the Amenity entity.
func (puo *PlaceUpdateOne) ClearAmenities() *PlaceUpdateOne {
	puo.mutation.ClearAmenities()
	return puo
}

// RemoveAmenityIDs removes the "amenities" edge to Amenity entities by IDs.
func (puo *PlaceUpdateOne) RemoveAmenityIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveAmenityIDs(ids...)
	return puo
}

// RemoveAmenities removes "amenities" edges to Amenity entities.
func (puo *PlaceUpdateOne) RemoveAmenities(a ...*Amenity) *PlaceUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAmenityIDs(ids...)
}

// ClearMenus clears all "menus" edges to the Menu entity.
func (puo *PlaceUpdateOne) ClearMenus() *PlaceUpdateOne {
	puo.mutation.ClearMenus()
	return puo
}

// RemoveMenuIDs removes the "menus" edge to Menu entities by IDs.
func (puo *PlaceUpdateOne) RemoveMenuIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveMenuIDs(ids...)
	return puo
}

// RemoveMenus removes "menus" edges to Menu entities.
func (puo *PlaceUpdateOne) RemoveMenus(m ...*Menu) *PlaceUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveMenuIDs(ids...)
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (puo *PlaceUpdateOne) ClearRooms() *PlaceUpdateOne {
	puo.mutation.ClearRooms()
	return puo
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (puo *PlaceUpdateOne) RemoveRoomIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveRoomIDs(ids...)
	return puo
}

// RemoveRooms removes "rooms" edges to Room entities.
func (puo *PlaceUpdateOne) RemoveRooms(r ...*Room) *PlaceUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRoomIDs(ids...)
}

// ClearReservations clears all "reservations" edges to the Reservation entity.
func (puo *PlaceUpdateOne) ClearReservations() *PlaceUpdateOne {
	puo.mutation.ClearReservations()
	return puo
}

// RemoveReservationIDs removes the "reservations" edge to Reservation entities by IDs.
func (puo *PlaceUpdateOne) RemoveReservationIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveReservationIDs(ids...)
	return puo
}

// RemoveReservations removes "reservations" edges to Reservation entities.
func (puo *PlaceUpdateOne) RemoveReservations(r ...*Reservation) *PlaceUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveReservationIDs(ids...)
}

// ClearBookings clears all "bookings" edges to the Booking entity.
func (puo *PlaceUpdateOne) ClearBookings() *PlaceUpdateOne {
	puo.mutation.ClearBookings()
	return puo
}

// RemoveBookingIDs removes the "bookings" edge to Booking entities by IDs.
func (puo *PlaceUpdateOne) RemoveBookingIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveBookingIDs(ids...)
	return puo
}

// RemoveBookings removes "bookings" edges to Booking entities.
func (puo *PlaceUpdateOne) RemoveBookings(b ...*Booking) *PlaceUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemoveBookingIDs(ids...)
}

// ClearCategories clears all "categories" edges to the Category entity.
func (puo *PlaceUpdateOne) ClearCategories() *PlaceUpdateOne {
	puo.mutation.ClearCategories()
	return puo
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (puo *PlaceUpdateOne) RemoveCategoryIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveCategoryIDs(ids...)
	return puo
}

// RemoveCategories removes "categories" edges to Category entities.
func (puo *PlaceUpdateOne) RemoveCategories(c ...*Category) *PlaceUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCategoryIDs(ids...)
}

// ClearCategoryAssignments clears all "categoryAssignments" edges to the CategoryAssignment entity.
func (puo *PlaceUpdateOne) ClearCategoryAssignments() *PlaceUpdateOne {
	puo.mutation.ClearCategoryAssignments()
	return puo
}

// RemoveCategoryAssignmentIDs removes the "categoryAssignments" edge to CategoryAssignment entities by IDs.
func (puo *PlaceUpdateOne) RemoveCategoryAssignmentIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveCategoryAssignmentIDs(ids...)
	return puo
}

// RemoveCategoryAssignments removes "categoryAssignments" edges to CategoryAssignment entities.
func (puo *PlaceUpdateOne) RemoveCategoryAssignments(c ...*CategoryAssignment) *PlaceUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCategoryAssignmentIDs(ids...)
}

// ClearFaqs clears all "faqs" edges to the FAQ entity.
func (puo *PlaceUpdateOne) ClearFaqs() *PlaceUpdateOne {
	puo.mutation.ClearFaqs()
	return puo
}

// RemoveFaqIDs removes the "faqs" edge to FAQ entities by IDs.
func (puo *PlaceUpdateOne) RemoveFaqIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveFaqIDs(ids...)
	return puo
}

// RemoveFaqs removes "faqs" edges to FAQ entities.
func (puo *PlaceUpdateOne) RemoveFaqs(f ...*FAQ) *PlaceUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemoveFaqIDs(ids...)
}

// ClearLikedByUsers clears all "likedByUsers" edges to the UserLikePlace entity.
func (puo *PlaceUpdateOne) ClearLikedByUsers() *PlaceUpdateOne {
	puo.mutation.ClearLikedByUsers()
	return puo
}

// RemoveLikedByUserIDs removes the "likedByUsers" edge to UserLikePlace entities by IDs.
func (puo *PlaceUpdateOne) RemoveLikedByUserIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveLikedByUserIDs(ids...)
	return puo
}

// RemoveLikedByUsers removes "likedByUsers" edges to UserLikePlace entities.
func (puo *PlaceUpdateOne) RemoveLikedByUsers(u ...*UserLikePlace) *PlaceUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveLikedByUserIDs(ids...)
}

// ClearFollowerUsers clears all "followerUsers" edges to the UserFollowPlace entity.
func (puo *PlaceUpdateOne) ClearFollowerUsers() *PlaceUpdateOne {
	puo.mutation.ClearFollowerUsers()
	return puo
}

// RemoveFollowerUserIDs removes the "followerUsers" edge to UserFollowPlace entities by IDs.
func (puo *PlaceUpdateOne) RemoveFollowerUserIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveFollowerUserIDs(ids...)
	return puo
}

// RemoveFollowerUsers removes "followerUsers" edges to UserFollowPlace entities.
func (puo *PlaceUpdateOne) RemoveFollowerUsers(u ...*UserFollowPlace) *PlaceUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveFollowerUserIDs(ids...)
}

// ClearRatings clears all "ratings" edges to the Rating entity.
func (puo *PlaceUpdateOne) ClearRatings() *PlaceUpdateOne {
	puo.mutation.ClearRatings()
	return puo
}

// RemoveRatingIDs removes the "ratings" edge to Rating entities by IDs.
func (puo *PlaceUpdateOne) RemoveRatingIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveRatingIDs(ids...)
	return puo
}

// RemoveRatings removes "ratings" edges to Rating entities.
func (puo *PlaceUpdateOne) RemoveRatings(r ...*Rating) *PlaceUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRatingIDs(ids...)
}

// Where appends a list predicates to the PlaceUpdate builder.
func (puo *PlaceUpdateOne) Where(ps ...predicate.Place) *PlaceUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlaceUpdateOne) Select(field string, fields ...string) *PlaceUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Place entity.
func (puo *PlaceUpdateOne) Save(ctx context.Context) (*Place, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlaceUpdateOne) SaveX(ctx context.Context) *Place {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlaceUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlaceUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PlaceUpdateOne) sqlSave(ctx context.Context) (_node *Place, err error) {
	_spec := sqlgraph.NewUpdateSpec(place.Table, place.Columns, sqlgraph.NewFieldSpec(place.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Place.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, place.FieldID)
		for _, f := range fields {
			if !place.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != place.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(place.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(place.FieldType, field.TypeString, value)
	}
	if puo.mutation.TypeCleared() {
		_spec.ClearField(place.FieldType, field.TypeString)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(place.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(place.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Location(); ok {
		_spec.SetField(place.FieldLocation, field.TypeString, value)
	}
	if puo.mutation.LocationCleared() {
		_spec.ClearField(place.FieldLocation, field.TypeString)
	}
	if value, ok := puo.mutation.Email(); ok {
		_spec.SetField(place.FieldEmail, field.TypeString, value)
	}
	if puo.mutation.EmailCleared() {
		_spec.ClearField(place.FieldEmail, field.TypeString)
	}
	if value, ok := puo.mutation.Phone(); ok {
		_spec.SetField(place.FieldPhone, field.TypeString, value)
	}
	if puo.mutation.PhoneCleared() {
		_spec.ClearField(place.FieldPhone, field.TypeString)
	}
	if value, ok := puo.mutation.Website(); ok {
		_spec.SetField(place.FieldWebsite, field.TypeString, value)
	}
	if puo.mutation.WebsiteCleared() {
		_spec.ClearField(place.FieldWebsite, field.TypeString)
	}
	if value, ok := puo.mutation.CoverImage(); ok {
		_spec.SetField(place.FieldCoverImage, field.TypeString, value)
	}
	if puo.mutation.CoverImageCleared() {
		_spec.ClearField(place.FieldCoverImage, field.TypeString)
	}
	if value, ok := puo.mutation.Picture(); ok {
		_spec.SetField(place.FieldPicture, field.TypeString, value)
	}
	if puo.mutation.PictureCleared() {
		_spec.ClearField(place.FieldPicture, field.TypeString)
	}
	if value, ok := puo.mutation.Country(); ok {
		_spec.SetField(place.FieldCountry, field.TypeString, value)
	}
	if puo.mutation.CountryCleared() {
		_spec.ClearField(place.FieldCountry, field.TypeString)
	}
	if value, ok := puo.mutation.City(); ok {
		_spec.SetField(place.FieldCity, field.TypeString, value)
	}
	if puo.mutation.CityCleared() {
		_spec.ClearField(place.FieldCity, field.TypeString)
	}
	if value, ok := puo.mutation.State(); ok {
		_spec.SetField(place.FieldState, field.TypeString, value)
	}
	if puo.mutation.StateCleared() {
		_spec.ClearField(place.FieldState, field.TypeString)
	}
	if value, ok := puo.mutation.PlaceSettings(); ok {
		_spec.SetField(place.FieldPlaceSettings, field.TypeJSON, value)
	}
	if puo.mutation.PlaceSettingsCleared() {
		_spec.ClearField(place.FieldPlaceSettings, field.TypeJSON)
	}
	if value, ok := puo.mutation.OpeningHours(); ok {
		_spec.SetField(place.FieldOpeningHours, field.TypeJSON, value)
	}
	if puo.mutation.OpeningHoursCleared() {
		_spec.ClearField(place.FieldOpeningHours, field.TypeJSON)
	}
	if value, ok := puo.mutation.SocialMedia(); ok {
		_spec.SetField(place.FieldSocialMedia, field.TypeJSON, value)
	}
	if puo.mutation.SocialMediaCleared() {
		_spec.ClearField(place.FieldSocialMedia, field.TypeJSON)
	}
	if value, ok := puo.mutation.PaymentOptions(); ok {
		_spec.SetField(place.FieldPaymentOptions, field.TypeJSON, value)
	}
	if puo.mutation.PaymentOptionsCleared() {
		_spec.ClearField(place.FieldPaymentOptions, field.TypeJSON)
	}
	if value, ok := puo.mutation.Tags(); ok {
		_spec.SetField(place.FieldTags, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, place.FieldTags, value)
		})
	}
	if puo.mutation.TagsCleared() {
		_spec.ClearField(place.FieldTags, field.TypeJSON)
	}
	if value, ok := puo.mutation.Features(); ok {
		_spec.SetField(place.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, place.FieldFeatures, value)
		})
	}
	if puo.mutation.FeaturesCleared() {
		_spec.ClearField(place.FieldFeatures, field.TypeJSON)
	}
	if value, ok := puo.mutation.AdditionalInfo(); ok {
		_spec.SetField(place.FieldAdditionalInfo, field.TypeJSON, value)
	}
	if puo.mutation.AdditionalInfoCleared() {
		_spec.ClearField(place.FieldAdditionalInfo, field.TypeJSON)
	}
	if value, ok := puo.mutation.Images(); ok {
		_spec.SetField(place.FieldImages, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, place.FieldImages, value)
		})
	}
	if puo.mutation.ImagesCleared() {
		_spec.ClearField(place.FieldImages, field.TypeJSON)
	}
	if value, ok := puo.mutation.Availability(); ok {
		_spec.SetField(place.FieldAvailability, field.TypeJSON, value)
	}
	if puo.mutation.AvailabilityCleared() {
		_spec.ClearField(place.FieldAvailability, field.TypeJSON)
	}
	if value, ok := puo.mutation.SpecialOffers(); ok {
		_spec.SetField(place.FieldSpecialOffers, field.TypeString, value)
	}
	if puo.mutation.SpecialOffersCleared() {
		_spec.ClearField(place.FieldSpecialOffers, field.TypeString)
	}
	if value, ok := puo.mutation.SustainabilityScore(); ok {
		_spec.SetField(place.FieldSustainabilityScore, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedSustainabilityScore(); ok {
		_spec.AddField(place.FieldSustainabilityScore, field.TypeFloat64, value)
	}
	if puo.mutation.SustainabilityScoreCleared() {
		_spec.ClearField(place.FieldSustainabilityScore, field.TypeFloat64)
	}
	if value, ok := puo.mutation.MapCoordinates(); ok {
		_spec.SetField(place.FieldMapCoordinates, field.TypeJSON, value)
	}
	if puo.mutation.MapCoordinatesCleared() {
		_spec.ClearField(place.FieldMapCoordinates, field.TypeJSON)
	}
	if value, ok := puo.mutation.Longitude(); ok {
		_spec.SetField(place.FieldLongitude, field.TypeString, value)
	}
	if puo.mutation.LongitudeCleared() {
		_spec.ClearField(place.FieldLongitude, field.TypeString)
	}
	if value, ok := puo.mutation.Latitude(); ok {
		_spec.SetField(place.FieldLatitude, field.TypeString, value)
	}
	if puo.mutation.LatitudeCleared() {
		_spec.ClearField(place.FieldLatitude, field.TypeString)
	}
	if value, ok := puo.mutation.SearchText(); ok {
		_spec.SetField(place.FieldSearchText, field.TypeString, value)
	}
	if puo.mutation.SearchTextCleared() {
		_spec.ClearField(place.FieldSearchText, field.TypeString)
	}
	if value, ok := puo.mutation.RelevanceScore(); ok {
		_spec.SetField(place.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedRelevanceScore(); ok {
		_spec.AddField(place.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if puo.mutation.RelevanceScoreCleared() {
		_spec.ClearField(place.FieldRelevanceScore, field.TypeFloat64)
	}
	if value, ok := puo.mutation.FollowersCount(); ok {
		_spec.SetField(place.FieldFollowersCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedFollowersCount(); ok {
		_spec.AddField(place.FieldFollowersCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.FollowingCount(); ok {
		_spec.SetField(place.FieldFollowingCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedFollowingCount(); ok {
		_spec.AddField(place.FieldFollowingCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.LikesCount(); ok {
		_spec.SetField(place.FieldLikesCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedLikesCount(); ok {
		_spec.AddField(place.FieldLikesCount, field.TypeInt, value)
	}
	if puo.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   place.BusinessTable,
			Columns: []string{place.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   place.BusinessTable,
			Columns: []string{place.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.UsersTable,
			Columns: place.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !puo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.UsersTable,
			Columns: place.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.UsersTable,
			Columns: place.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReviewsTable,
			Columns: []string{place.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !puo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReviewsTable,
			Columns: []string{place.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReviewsTable,
			Columns: []string{place.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.EventsTable,
			Columns: []string{place.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !puo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.EventsTable,
			Columns: []string{place.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.EventsTable,
			Columns: []string{place.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AmenitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.AmenitiesTable,
			Columns: place.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAmenitiesIDs(); len(nodes) > 0 && !puo.mutation.AmenitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.AmenitiesTable,
			Columns: place.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AmenitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.AmenitiesTable,
			Columns: place.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.MenusTable,
			Columns: []string{place.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMenusIDs(); len(nodes) > 0 && !puo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.MenusTable,
			Columns: []string{place.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.MenusTable,
			Columns: []string{place.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RoomsTable,
			Columns: []string{place.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !puo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RoomsTable,
			Columns: []string{place.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RoomsTable,
			Columns: []string{place.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReservationsTable,
			Columns: []string{place.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedReservationsIDs(); len(nodes) > 0 && !puo.mutation.ReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReservationsTable,
			Columns: []string{place.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ReservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReservationsTable,
			Columns: []string{place.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.BookingsTable,
			Columns: []string{place.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedBookingsIDs(); len(nodes) > 0 && !puo.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.BookingsTable,
			Columns: []string{place.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.BookingsTable,
			Columns: []string{place.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.CategoriesTable,
			Columns: []string{place.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !puo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.CategoriesTable,
			Columns: []string{place.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.CategoriesTable,
			Columns: []string{place.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CategoryAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.CategoryAssignmentsTable,
			Columns: []string{place.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCategoryAssignmentsIDs(); len(nodes) > 0 && !puo.mutation.CategoryAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.CategoryAssignmentsTable,
			Columns: []string{place.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CategoryAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.CategoryAssignmentsTable,
			Columns: []string{place.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FaqsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.FaqsTable,
			Columns: place.FaqsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faq.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFaqsIDs(); len(nodes) > 0 && !puo.mutation.FaqsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.FaqsTable,
			Columns: place.FaqsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faq.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FaqsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.FaqsTable,
			Columns: place.FaqsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faq.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.LikedByUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   place.LikedByUsersTable,
			Columns: []string{place.LikedByUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userlikeplace.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedLikedByUsersIDs(); len(nodes) > 0 && !puo.mutation.LikedByUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   place.LikedByUsersTable,
			Columns: []string{place.LikedByUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userlikeplace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.LikedByUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   place.LikedByUsersTable,
			Columns: []string{place.LikedByUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userlikeplace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FollowerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.FollowerUsersTable,
			Columns: []string{place.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowplace.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFollowerUsersIDs(); len(nodes) > 0 && !puo.mutation.FollowerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.FollowerUsersTable,
			Columns: []string{place.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowplace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FollowerUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.FollowerUsersTable,
			Columns: []string{place.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowplace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RatingsTable,
			Columns: []string{place.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRatingsIDs(); len(nodes) > 0 && !puo.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RatingsTable,
			Columns: []string{place.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RatingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RatingsTable,
			Columns: []string{place.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Place{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{place.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
