// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/businessfollowevent"
	"placio-app/ent/category"
	"placio-app/ent/categoryassignment"
	"placio-app/ent/event"
	"placio-app/ent/faq"
	"placio-app/ent/place"
	"placio-app/ent/predicate"
	"placio-app/ent/rating"
	"placio-app/ent/ticket"
	"placio-app/ent/ticketoption"
	"placio-app/ent/user"
	"placio-app/ent/userfollowevent"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetName sets the "name" field.
func (eu *EventUpdate) SetName(s string) *EventUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eu *EventUpdate) SetNillableName(s *string) *EventUpdate {
	if s != nil {
		eu.SetName(*s)
	}
	return eu
}

// ClearName clears the value of the "name" field.
func (eu *EventUpdate) ClearName() *EventUpdate {
	eu.mutation.ClearName()
	return eu
}

// SetEventType sets the "EventType" field.
func (eu *EventUpdate) SetEventType(et event.EventType) *EventUpdate {
	eu.mutation.SetEventType(et)
	return eu
}

// SetNillableEventType sets the "EventType" field if the given value is not nil.
func (eu *EventUpdate) SetNillableEventType(et *event.EventType) *EventUpdate {
	if et != nil {
		eu.SetEventType(*et)
	}
	return eu
}

// ClearEventType clears the value of the "EventType" field.
func (eu *EventUpdate) ClearEventType() *EventUpdate {
	eu.mutation.ClearEventType()
	return eu
}

// SetStatus sets the "status" field.
func (eu *EventUpdate) SetStatus(s string) *EventUpdate {
	eu.mutation.SetStatus(s)
	return eu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eu *EventUpdate) SetNillableStatus(s *string) *EventUpdate {
	if s != nil {
		eu.SetStatus(*s)
	}
	return eu
}

// ClearStatus clears the value of the "status" field.
func (eu *EventUpdate) ClearStatus() *EventUpdate {
	eu.mutation.ClearStatus()
	return eu
}

// SetLocation sets the "location" field.
func (eu *EventUpdate) SetLocation(s string) *EventUpdate {
	eu.mutation.SetLocation(s)
	return eu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (eu *EventUpdate) SetNillableLocation(s *string) *EventUpdate {
	if s != nil {
		eu.SetLocation(*s)
	}
	return eu
}

// ClearLocation clears the value of the "location" field.
func (eu *EventUpdate) ClearLocation() *EventUpdate {
	eu.mutation.ClearLocation()
	return eu
}

// SetURL sets the "url" field.
func (eu *EventUpdate) SetURL(s string) *EventUpdate {
	eu.mutation.SetURL(s)
	return eu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (eu *EventUpdate) SetNillableURL(s *string) *EventUpdate {
	if s != nil {
		eu.SetURL(*s)
	}
	return eu
}

// ClearURL clears the value of the "url" field.
func (eu *EventUpdate) ClearURL() *EventUpdate {
	eu.mutation.ClearURL()
	return eu
}

// SetTitle sets the "title" field.
func (eu *EventUpdate) SetTitle(s string) *EventUpdate {
	eu.mutation.SetTitle(s)
	return eu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (eu *EventUpdate) SetNillableTitle(s *string) *EventUpdate {
	if s != nil {
		eu.SetTitle(*s)
	}
	return eu
}

// ClearTitle clears the value of the "title" field.
func (eu *EventUpdate) ClearTitle() *EventUpdate {
	eu.mutation.ClearTitle()
	return eu
}

// SetTimeZone sets the "time_zone" field.
func (eu *EventUpdate) SetTimeZone(s string) *EventUpdate {
	eu.mutation.SetTimeZone(s)
	return eu
}

// SetNillableTimeZone sets the "time_zone" field if the given value is not nil.
func (eu *EventUpdate) SetNillableTimeZone(s *string) *EventUpdate {
	if s != nil {
		eu.SetTimeZone(*s)
	}
	return eu
}

// ClearTimeZone clears the value of the "time_zone" field.
func (eu *EventUpdate) ClearTimeZone() *EventUpdate {
	eu.mutation.ClearTimeZone()
	return eu
}

// SetStartTime sets the "start_time" field.
func (eu *EventUpdate) SetStartTime(t time.Time) *EventUpdate {
	eu.mutation.SetStartTime(t)
	return eu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (eu *EventUpdate) SetNillableStartTime(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetStartTime(*t)
	}
	return eu
}

// ClearStartTime clears the value of the "start_time" field.
func (eu *EventUpdate) ClearStartTime() *EventUpdate {
	eu.mutation.ClearStartTime()
	return eu
}

// SetEndTime sets the "end_time" field.
func (eu *EventUpdate) SetEndTime(t time.Time) *EventUpdate {
	eu.mutation.SetEndTime(t)
	return eu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (eu *EventUpdate) SetNillableEndTime(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetEndTime(*t)
	}
	return eu
}

// ClearEndTime clears the value of the "end_time" field.
func (eu *EventUpdate) ClearEndTime() *EventUpdate {
	eu.mutation.ClearEndTime()
	return eu
}

// SetStartDate sets the "start_date" field.
func (eu *EventUpdate) SetStartDate(s string) *EventUpdate {
	eu.mutation.SetStartDate(s)
	return eu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (eu *EventUpdate) SetNillableStartDate(s *string) *EventUpdate {
	if s != nil {
		eu.SetStartDate(*s)
	}
	return eu
}

// ClearStartDate clears the value of the "start_date" field.
func (eu *EventUpdate) ClearStartDate() *EventUpdate {
	eu.mutation.ClearStartDate()
	return eu
}

// SetEndDate sets the "end_date" field.
func (eu *EventUpdate) SetEndDate(s string) *EventUpdate {
	eu.mutation.SetEndDate(s)
	return eu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (eu *EventUpdate) SetNillableEndDate(s *string) *EventUpdate {
	if s != nil {
		eu.SetEndDate(*s)
	}
	return eu
}

// ClearEndDate clears the value of the "end_date" field.
func (eu *EventUpdate) ClearEndDate() *EventUpdate {
	eu.mutation.ClearEndDate()
	return eu
}

// SetFrequency sets the "frequency" field.
func (eu *EventUpdate) SetFrequency(e event.Frequency) *EventUpdate {
	eu.mutation.SetFrequency(e)
	return eu
}

// SetNillableFrequency sets the "frequency" field if the given value is not nil.
func (eu *EventUpdate) SetNillableFrequency(e *event.Frequency) *EventUpdate {
	if e != nil {
		eu.SetFrequency(*e)
	}
	return eu
}

// ClearFrequency clears the value of the "frequency" field.
func (eu *EventUpdate) ClearFrequency() *EventUpdate {
	eu.mutation.ClearFrequency()
	return eu
}

// SetFrequencyInterval sets the "frequency_interval" field.
func (eu *EventUpdate) SetFrequencyInterval(s string) *EventUpdate {
	eu.mutation.SetFrequencyInterval(s)
	return eu
}

// SetNillableFrequencyInterval sets the "frequency_interval" field if the given value is not nil.
func (eu *EventUpdate) SetNillableFrequencyInterval(s *string) *EventUpdate {
	if s != nil {
		eu.SetFrequencyInterval(*s)
	}
	return eu
}

// ClearFrequencyInterval clears the value of the "frequency_interval" field.
func (eu *EventUpdate) ClearFrequencyInterval() *EventUpdate {
	eu.mutation.ClearFrequencyInterval()
	return eu
}

// SetFrequencyDayOfWeek sets the "frequency_day_of_week" field.
func (eu *EventUpdate) SetFrequencyDayOfWeek(s string) *EventUpdate {
	eu.mutation.SetFrequencyDayOfWeek(s)
	return eu
}

// SetNillableFrequencyDayOfWeek sets the "frequency_day_of_week" field if the given value is not nil.
func (eu *EventUpdate) SetNillableFrequencyDayOfWeek(s *string) *EventUpdate {
	if s != nil {
		eu.SetFrequencyDayOfWeek(*s)
	}
	return eu
}

// ClearFrequencyDayOfWeek clears the value of the "frequency_day_of_week" field.
func (eu *EventUpdate) ClearFrequencyDayOfWeek() *EventUpdate {
	eu.mutation.ClearFrequencyDayOfWeek()
	return eu
}

// SetFrequencyDayOfMonth sets the "frequency_day_of_month" field.
func (eu *EventUpdate) SetFrequencyDayOfMonth(s string) *EventUpdate {
	eu.mutation.SetFrequencyDayOfMonth(s)
	return eu
}

// SetNillableFrequencyDayOfMonth sets the "frequency_day_of_month" field if the given value is not nil.
func (eu *EventUpdate) SetNillableFrequencyDayOfMonth(s *string) *EventUpdate {
	if s != nil {
		eu.SetFrequencyDayOfMonth(*s)
	}
	return eu
}

// ClearFrequencyDayOfMonth clears the value of the "frequency_day_of_month" field.
func (eu *EventUpdate) ClearFrequencyDayOfMonth() *EventUpdate {
	eu.mutation.ClearFrequencyDayOfMonth()
	return eu
}

// SetFrequencyMonthOfYear sets the "frequency_month_of_year" field.
func (eu *EventUpdate) SetFrequencyMonthOfYear(s string) *EventUpdate {
	eu.mutation.SetFrequencyMonthOfYear(s)
	return eu
}

// SetNillableFrequencyMonthOfYear sets the "frequency_month_of_year" field if the given value is not nil.
func (eu *EventUpdate) SetNillableFrequencyMonthOfYear(s *string) *EventUpdate {
	if s != nil {
		eu.SetFrequencyMonthOfYear(*s)
	}
	return eu
}

// ClearFrequencyMonthOfYear clears the value of the "frequency_month_of_year" field.
func (eu *EventUpdate) ClearFrequencyMonthOfYear() *EventUpdate {
	eu.mutation.ClearFrequencyMonthOfYear()
	return eu
}

// SetVenueType sets the "venue_type" field.
func (eu *EventUpdate) SetVenueType(et event.VenueType) *EventUpdate {
	eu.mutation.SetVenueType(et)
	return eu
}

// SetNillableVenueType sets the "venue_type" field if the given value is not nil.
func (eu *EventUpdate) SetNillableVenueType(et *event.VenueType) *EventUpdate {
	if et != nil {
		eu.SetVenueType(*et)
	}
	return eu
}

// ClearVenueType clears the value of the "venue_type" field.
func (eu *EventUpdate) ClearVenueType() *EventUpdate {
	eu.mutation.ClearVenueType()
	return eu
}

// SetVenueName sets the "venue_name" field.
func (eu *EventUpdate) SetVenueName(s string) *EventUpdate {
	eu.mutation.SetVenueName(s)
	return eu
}

// SetNillableVenueName sets the "venue_name" field if the given value is not nil.
func (eu *EventUpdate) SetNillableVenueName(s *string) *EventUpdate {
	if s != nil {
		eu.SetVenueName(*s)
	}
	return eu
}

// ClearVenueName clears the value of the "venue_name" field.
func (eu *EventUpdate) ClearVenueName() *EventUpdate {
	eu.mutation.ClearVenueName()
	return eu
}

// SetVenueAddress sets the "venue_address" field.
func (eu *EventUpdate) SetVenueAddress(s string) *EventUpdate {
	eu.mutation.SetVenueAddress(s)
	return eu
}

// SetNillableVenueAddress sets the "venue_address" field if the given value is not nil.
func (eu *EventUpdate) SetNillableVenueAddress(s *string) *EventUpdate {
	if s != nil {
		eu.SetVenueAddress(*s)
	}
	return eu
}

// ClearVenueAddress clears the value of the "venue_address" field.
func (eu *EventUpdate) ClearVenueAddress() *EventUpdate {
	eu.mutation.ClearVenueAddress()
	return eu
}

// SetVenueCity sets the "venue_city" field.
func (eu *EventUpdate) SetVenueCity(s string) *EventUpdate {
	eu.mutation.SetVenueCity(s)
	return eu
}

// SetNillableVenueCity sets the "venue_city" field if the given value is not nil.
func (eu *EventUpdate) SetNillableVenueCity(s *string) *EventUpdate {
	if s != nil {
		eu.SetVenueCity(*s)
	}
	return eu
}

// ClearVenueCity clears the value of the "venue_city" field.
func (eu *EventUpdate) ClearVenueCity() *EventUpdate {
	eu.mutation.ClearVenueCity()
	return eu
}

// SetVenueState sets the "venue_state" field.
func (eu *EventUpdate) SetVenueState(s string) *EventUpdate {
	eu.mutation.SetVenueState(s)
	return eu
}

// SetNillableVenueState sets the "venue_state" field if the given value is not nil.
func (eu *EventUpdate) SetNillableVenueState(s *string) *EventUpdate {
	if s != nil {
		eu.SetVenueState(*s)
	}
	return eu
}

// ClearVenueState clears the value of the "venue_state" field.
func (eu *EventUpdate) ClearVenueState() *EventUpdate {
	eu.mutation.ClearVenueState()
	return eu
}

// SetVenueCountry sets the "venue_country" field.
func (eu *EventUpdate) SetVenueCountry(s string) *EventUpdate {
	eu.mutation.SetVenueCountry(s)
	return eu
}

// SetNillableVenueCountry sets the "venue_country" field if the given value is not nil.
func (eu *EventUpdate) SetNillableVenueCountry(s *string) *EventUpdate {
	if s != nil {
		eu.SetVenueCountry(*s)
	}
	return eu
}

// ClearVenueCountry clears the value of the "venue_country" field.
func (eu *EventUpdate) ClearVenueCountry() *EventUpdate {
	eu.mutation.ClearVenueCountry()
	return eu
}

// SetVenueZip sets the "venue_zip" field.
func (eu *EventUpdate) SetVenueZip(s string) *EventUpdate {
	eu.mutation.SetVenueZip(s)
	return eu
}

// SetNillableVenueZip sets the "venue_zip" field if the given value is not nil.
func (eu *EventUpdate) SetNillableVenueZip(s *string) *EventUpdate {
	if s != nil {
		eu.SetVenueZip(*s)
	}
	return eu
}

// ClearVenueZip clears the value of the "venue_zip" field.
func (eu *EventUpdate) ClearVenueZip() *EventUpdate {
	eu.mutation.ClearVenueZip()
	return eu
}

// SetVenueLat sets the "venue_lat" field.
func (eu *EventUpdate) SetVenueLat(s string) *EventUpdate {
	eu.mutation.SetVenueLat(s)
	return eu
}

// SetNillableVenueLat sets the "venue_lat" field if the given value is not nil.
func (eu *EventUpdate) SetNillableVenueLat(s *string) *EventUpdate {
	if s != nil {
		eu.SetVenueLat(*s)
	}
	return eu
}

// ClearVenueLat clears the value of the "venue_lat" field.
func (eu *EventUpdate) ClearVenueLat() *EventUpdate {
	eu.mutation.ClearVenueLat()
	return eu
}

// SetVenueLon sets the "venue_lon" field.
func (eu *EventUpdate) SetVenueLon(s string) *EventUpdate {
	eu.mutation.SetVenueLon(s)
	return eu
}

// SetNillableVenueLon sets the "venue_lon" field if the given value is not nil.
func (eu *EventUpdate) SetNillableVenueLon(s *string) *EventUpdate {
	if s != nil {
		eu.SetVenueLon(*s)
	}
	return eu
}

// ClearVenueLon clears the value of the "venue_lon" field.
func (eu *EventUpdate) ClearVenueLon() *EventUpdate {
	eu.mutation.ClearVenueLon()
	return eu
}

// SetVenueURL sets the "venue_url" field.
func (eu *EventUpdate) SetVenueURL(s string) *EventUpdate {
	eu.mutation.SetVenueURL(s)
	return eu
}

// SetNillableVenueURL sets the "venue_url" field if the given value is not nil.
func (eu *EventUpdate) SetNillableVenueURL(s *string) *EventUpdate {
	if s != nil {
		eu.SetVenueURL(*s)
	}
	return eu
}

// ClearVenueURL clears the value of the "venue_url" field.
func (eu *EventUpdate) ClearVenueURL() *EventUpdate {
	eu.mutation.ClearVenueURL()
	return eu
}

// SetVenuePhone sets the "venue_phone" field.
func (eu *EventUpdate) SetVenuePhone(s string) *EventUpdate {
	eu.mutation.SetVenuePhone(s)
	return eu
}

// SetNillableVenuePhone sets the "venue_phone" field if the given value is not nil.
func (eu *EventUpdate) SetNillableVenuePhone(s *string) *EventUpdate {
	if s != nil {
		eu.SetVenuePhone(*s)
	}
	return eu
}

// ClearVenuePhone clears the value of the "venue_phone" field.
func (eu *EventUpdate) ClearVenuePhone() *EventUpdate {
	eu.mutation.ClearVenuePhone()
	return eu
}

// SetVenueEmail sets the "venue_email" field.
func (eu *EventUpdate) SetVenueEmail(s string) *EventUpdate {
	eu.mutation.SetVenueEmail(s)
	return eu
}

// SetNillableVenueEmail sets the "venue_email" field if the given value is not nil.
func (eu *EventUpdate) SetNillableVenueEmail(s *string) *EventUpdate {
	if s != nil {
		eu.SetVenueEmail(*s)
	}
	return eu
}

// ClearVenueEmail clears the value of the "venue_email" field.
func (eu *EventUpdate) ClearVenueEmail() *EventUpdate {
	eu.mutation.ClearVenueEmail()
	return eu
}

// SetTags sets the "tags" field.
func (eu *EventUpdate) SetTags(s string) *EventUpdate {
	eu.mutation.SetTags(s)
	return eu
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (eu *EventUpdate) SetNillableTags(s *string) *EventUpdate {
	if s != nil {
		eu.SetTags(*s)
	}
	return eu
}

// ClearTags clears the value of the "tags" field.
func (eu *EventUpdate) ClearTags() *EventUpdate {
	eu.mutation.ClearTags()
	return eu
}

// SetDescription sets the "description" field.
func (eu *EventUpdate) SetDescription(s string) *EventUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDescription(s *string) *EventUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *EventUpdate) ClearDescription() *EventUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetEventSettings sets the "event_settings" field.
func (eu *EventUpdate) SetEventSettings(m map[string]interface{}) *EventUpdate {
	eu.mutation.SetEventSettings(m)
	return eu
}

// ClearEventSettings clears the value of the "event_settings" field.
func (eu *EventUpdate) ClearEventSettings() *EventUpdate {
	eu.mutation.ClearEventSettings()
	return eu
}

// SetCoverImage sets the "cover_image" field.
func (eu *EventUpdate) SetCoverImage(s string) *EventUpdate {
	eu.mutation.SetCoverImage(s)
	return eu
}

// SetNillableCoverImage sets the "cover_image" field if the given value is not nil.
func (eu *EventUpdate) SetNillableCoverImage(s *string) *EventUpdate {
	if s != nil {
		eu.SetCoverImage(*s)
	}
	return eu
}

// ClearCoverImage clears the value of the "cover_image" field.
func (eu *EventUpdate) ClearCoverImage() *EventUpdate {
	eu.mutation.ClearCoverImage()
	return eu
}

// SetCreatedAt sets the "createdAt" field.
func (eu *EventUpdate) SetCreatedAt(t time.Time) *EventUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (eu *EventUpdate) SetNillableCreatedAt(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// SetUpdatedAt sets the "updatedAt" field.
func (eu *EventUpdate) SetUpdatedAt(t time.Time) *EventUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetMapCoordinates sets the "map_coordinates" field.
func (eu *EventUpdate) SetMapCoordinates(m map[string]interface{}) *EventUpdate {
	eu.mutation.SetMapCoordinates(m)
	return eu
}

// ClearMapCoordinates clears the value of the "map_coordinates" field.
func (eu *EventUpdate) ClearMapCoordinates() *EventUpdate {
	eu.mutation.ClearMapCoordinates()
	return eu
}

// SetLongitude sets the "longitude" field.
func (eu *EventUpdate) SetLongitude(s string) *EventUpdate {
	eu.mutation.SetLongitude(s)
	return eu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (eu *EventUpdate) SetNillableLongitude(s *string) *EventUpdate {
	if s != nil {
		eu.SetLongitude(*s)
	}
	return eu
}

// ClearLongitude clears the value of the "longitude" field.
func (eu *EventUpdate) ClearLongitude() *EventUpdate {
	eu.mutation.ClearLongitude()
	return eu
}

// SetLatitude sets the "latitude" field.
func (eu *EventUpdate) SetLatitude(s string) *EventUpdate {
	eu.mutation.SetLatitude(s)
	return eu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (eu *EventUpdate) SetNillableLatitude(s *string) *EventUpdate {
	if s != nil {
		eu.SetLatitude(*s)
	}
	return eu
}

// ClearLatitude clears the value of the "latitude" field.
func (eu *EventUpdate) ClearLatitude() *EventUpdate {
	eu.mutation.ClearLatitude()
	return eu
}

// SetSearchText sets the "search_text" field.
func (eu *EventUpdate) SetSearchText(s string) *EventUpdate {
	eu.mutation.SetSearchText(s)
	return eu
}

// SetNillableSearchText sets the "search_text" field if the given value is not nil.
func (eu *EventUpdate) SetNillableSearchText(s *string) *EventUpdate {
	if s != nil {
		eu.SetSearchText(*s)
	}
	return eu
}

// ClearSearchText clears the value of the "search_text" field.
func (eu *EventUpdate) ClearSearchText() *EventUpdate {
	eu.mutation.ClearSearchText()
	return eu
}

// SetRelevanceScore sets the "relevance_score" field.
func (eu *EventUpdate) SetRelevanceScore(f float64) *EventUpdate {
	eu.mutation.ResetRelevanceScore()
	eu.mutation.SetRelevanceScore(f)
	return eu
}

// SetNillableRelevanceScore sets the "relevance_score" field if the given value is not nil.
func (eu *EventUpdate) SetNillableRelevanceScore(f *float64) *EventUpdate {
	if f != nil {
		eu.SetRelevanceScore(*f)
	}
	return eu
}

// AddRelevanceScore adds f to the "relevance_score" field.
func (eu *EventUpdate) AddRelevanceScore(f float64) *EventUpdate {
	eu.mutation.AddRelevanceScore(f)
	return eu
}

// ClearRelevanceScore clears the value of the "relevance_score" field.
func (eu *EventUpdate) ClearRelevanceScore() *EventUpdate {
	eu.mutation.ClearRelevanceScore()
	return eu
}

// SetFollowersCount sets the "followers_count" field.
func (eu *EventUpdate) SetFollowersCount(i int) *EventUpdate {
	eu.mutation.ResetFollowersCount()
	eu.mutation.SetFollowersCount(i)
	return eu
}

// SetNillableFollowersCount sets the "followers_count" field if the given value is not nil.
func (eu *EventUpdate) SetNillableFollowersCount(i *int) *EventUpdate {
	if i != nil {
		eu.SetFollowersCount(*i)
	}
	return eu
}

// AddFollowersCount adds i to the "followers_count" field.
func (eu *EventUpdate) AddFollowersCount(i int) *EventUpdate {
	eu.mutation.AddFollowersCount(i)
	return eu
}

// SetFollowingCount sets the "following_count" field.
func (eu *EventUpdate) SetFollowingCount(i int) *EventUpdate {
	eu.mutation.ResetFollowingCount()
	eu.mutation.SetFollowingCount(i)
	return eu
}

// SetNillableFollowingCount sets the "following_count" field if the given value is not nil.
func (eu *EventUpdate) SetNillableFollowingCount(i *int) *EventUpdate {
	if i != nil {
		eu.SetFollowingCount(*i)
	}
	return eu
}

// AddFollowingCount adds i to the "following_count" field.
func (eu *EventUpdate) AddFollowingCount(i int) *EventUpdate {
	eu.mutation.AddFollowingCount(i)
	return eu
}

// SetLikesCount sets the "likes_count" field.
func (eu *EventUpdate) SetLikesCount(i int) *EventUpdate {
	eu.mutation.ResetLikesCount()
	eu.mutation.SetLikesCount(i)
	return eu
}

// SetNillableLikesCount sets the "likes_count" field if the given value is not nil.
func (eu *EventUpdate) SetNillableLikesCount(i *int) *EventUpdate {
	if i != nil {
		eu.SetLikesCount(*i)
	}
	return eu
}

// AddLikesCount adds i to the "likes_count" field.
func (eu *EventUpdate) AddLikesCount(i int) *EventUpdate {
	eu.mutation.AddLikesCount(i)
	return eu
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (eu *EventUpdate) AddTicketIDs(ids ...string) *EventUpdate {
	eu.mutation.AddTicketIDs(ids...)
	return eu
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (eu *EventUpdate) AddTickets(t ...*Ticket) *EventUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddTicketIDs(ids...)
}

// AddTicketOptionIDs adds the "ticket_options" edge to the TicketOption entity by IDs.
func (eu *EventUpdate) AddTicketOptionIDs(ids ...string) *EventUpdate {
	eu.mutation.AddTicketOptionIDs(ids...)
	return eu
}

// AddTicketOptions adds the "ticket_options" edges to the TicketOption entity.
func (eu *EventUpdate) AddTicketOptions(t ...*TicketOption) *EventUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddTicketOptionIDs(ids...)
}

// AddPlaceIDs adds the "place" edge to the Place entity by IDs.
func (eu *EventUpdate) AddPlaceIDs(ids ...string) *EventUpdate {
	eu.mutation.AddPlaceIDs(ids...)
	return eu
}

// AddPlace adds the "place" edges to the Place entity.
func (eu *EventUpdate) AddPlace(p ...*Place) *EventUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddPlaceIDs(ids...)
}

// AddEventCategoryIDs adds the "event_categories" edge to the Category entity by IDs.
func (eu *EventUpdate) AddEventCategoryIDs(ids ...string) *EventUpdate {
	eu.mutation.AddEventCategoryIDs(ids...)
	return eu
}

// AddEventCategories adds the "event_categories" edges to the Category entity.
func (eu *EventUpdate) AddEventCategories(c ...*Category) *EventUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddEventCategoryIDs(ids...)
}

// AddEventCategoryAssignmentIDs adds the "event_category_assignments" edge to the CategoryAssignment entity by IDs.
func (eu *EventUpdate) AddEventCategoryAssignmentIDs(ids ...string) *EventUpdate {
	eu.mutation.AddEventCategoryAssignmentIDs(ids...)
	return eu
}

// AddEventCategoryAssignments adds the "event_category_assignments" edges to the CategoryAssignment entity.
func (eu *EventUpdate) AddEventCategoryAssignments(c ...*CategoryAssignment) *EventUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddEventCategoryAssignmentIDs(ids...)
}

// SetOwnerUserID sets the "ownerUser" edge to the User entity by ID.
func (eu *EventUpdate) SetOwnerUserID(id string) *EventUpdate {
	eu.mutation.SetOwnerUserID(id)
	return eu
}

// SetNillableOwnerUserID sets the "ownerUser" edge to the User entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableOwnerUserID(id *string) *EventUpdate {
	if id != nil {
		eu = eu.SetOwnerUserID(*id)
	}
	return eu
}

// SetOwnerUser sets the "ownerUser" edge to the User entity.
func (eu *EventUpdate) SetOwnerUser(u *User) *EventUpdate {
	return eu.SetOwnerUserID(u.ID)
}

// SetOwnerBusinessID sets the "ownerBusiness" edge to the Business entity by ID.
func (eu *EventUpdate) SetOwnerBusinessID(id string) *EventUpdate {
	eu.mutation.SetOwnerBusinessID(id)
	return eu
}

// SetNillableOwnerBusinessID sets the "ownerBusiness" edge to the Business entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableOwnerBusinessID(id *string) *EventUpdate {
	if id != nil {
		eu = eu.SetOwnerBusinessID(*id)
	}
	return eu
}

// SetOwnerBusiness sets the "ownerBusiness" edge to the Business entity.
func (eu *EventUpdate) SetOwnerBusiness(b *Business) *EventUpdate {
	return eu.SetOwnerBusinessID(b.ID)
}

// AddUserFollowerIDs adds the "userFollowers" edge to the UserFollowEvent entity by IDs.
func (eu *EventUpdate) AddUserFollowerIDs(ids ...string) *EventUpdate {
	eu.mutation.AddUserFollowerIDs(ids...)
	return eu
}

// AddUserFollowers adds the "userFollowers" edges to the UserFollowEvent entity.
func (eu *EventUpdate) AddUserFollowers(u ...*UserFollowEvent) *EventUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddUserFollowerIDs(ids...)
}

// AddBusinessFollowerIDs adds the "businessFollowers" edge to the BusinessFollowEvent entity by IDs.
func (eu *EventUpdate) AddBusinessFollowerIDs(ids ...string) *EventUpdate {
	eu.mutation.AddBusinessFollowerIDs(ids...)
	return eu
}

// AddBusinessFollowers adds the "businessFollowers" edges to the BusinessFollowEvent entity.
func (eu *EventUpdate) AddBusinessFollowers(b ...*BusinessFollowEvent) *EventUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return eu.AddBusinessFollowerIDs(ids...)
}

// AddFaqIDs adds the "faqs" edge to the FAQ entity by IDs.
func (eu *EventUpdate) AddFaqIDs(ids ...string) *EventUpdate {
	eu.mutation.AddFaqIDs(ids...)
	return eu
}

// AddFaqs adds the "faqs" edges to the FAQ entity.
func (eu *EventUpdate) AddFaqs(f ...*FAQ) *EventUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.AddFaqIDs(ids...)
}

// AddRatingIDs adds the "ratings" edge to the Rating entity by IDs.
func (eu *EventUpdate) AddRatingIDs(ids ...string) *EventUpdate {
	eu.mutation.AddRatingIDs(ids...)
	return eu
}

// AddRatings adds the "ratings" edges to the Rating entity.
func (eu *EventUpdate) AddRatings(r ...*Rating) *EventUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.AddRatingIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (eu *EventUpdate) ClearTickets() *EventUpdate {
	eu.mutation.ClearTickets()
	return eu
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (eu *EventUpdate) RemoveTicketIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveTicketIDs(ids...)
	return eu
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (eu *EventUpdate) RemoveTickets(t ...*Ticket) *EventUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveTicketIDs(ids...)
}

// ClearTicketOptions clears all "ticket_options" edges to the TicketOption entity.
func (eu *EventUpdate) ClearTicketOptions() *EventUpdate {
	eu.mutation.ClearTicketOptions()
	return eu
}

// RemoveTicketOptionIDs removes the "ticket_options" edge to TicketOption entities by IDs.
func (eu *EventUpdate) RemoveTicketOptionIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveTicketOptionIDs(ids...)
	return eu
}

// RemoveTicketOptions removes "ticket_options" edges to TicketOption entities.
func (eu *EventUpdate) RemoveTicketOptions(t ...*TicketOption) *EventUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveTicketOptionIDs(ids...)
}

// ClearPlace clears all "place" edges to the Place entity.
func (eu *EventUpdate) ClearPlace() *EventUpdate {
	eu.mutation.ClearPlace()
	return eu
}

// RemovePlaceIDs removes the "place" edge to Place entities by IDs.
func (eu *EventUpdate) RemovePlaceIDs(ids ...string) *EventUpdate {
	eu.mutation.RemovePlaceIDs(ids...)
	return eu
}

// RemovePlace removes "place" edges to Place entities.
func (eu *EventUpdate) RemovePlace(p ...*Place) *EventUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemovePlaceIDs(ids...)
}

// ClearEventCategories clears all "event_categories" edges to the Category entity.
func (eu *EventUpdate) ClearEventCategories() *EventUpdate {
	eu.mutation.ClearEventCategories()
	return eu
}

// RemoveEventCategoryIDs removes the "event_categories" edge to Category entities by IDs.
func (eu *EventUpdate) RemoveEventCategoryIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveEventCategoryIDs(ids...)
	return eu
}

// RemoveEventCategories removes "event_categories" edges to Category entities.
func (eu *EventUpdate) RemoveEventCategories(c ...*Category) *EventUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveEventCategoryIDs(ids...)
}

// ClearEventCategoryAssignments clears all "event_category_assignments" edges to the CategoryAssignment entity.
func (eu *EventUpdate) ClearEventCategoryAssignments() *EventUpdate {
	eu.mutation.ClearEventCategoryAssignments()
	return eu
}

// RemoveEventCategoryAssignmentIDs removes the "event_category_assignments" edge to CategoryAssignment entities by IDs.
func (eu *EventUpdate) RemoveEventCategoryAssignmentIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveEventCategoryAssignmentIDs(ids...)
	return eu
}

// RemoveEventCategoryAssignments removes "event_category_assignments" edges to CategoryAssignment entities.
func (eu *EventUpdate) RemoveEventCategoryAssignments(c ...*CategoryAssignment) *EventUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveEventCategoryAssignmentIDs(ids...)
}

// ClearOwnerUser clears the "ownerUser" edge to the User entity.
func (eu *EventUpdate) ClearOwnerUser() *EventUpdate {
	eu.mutation.ClearOwnerUser()
	return eu
}

// ClearOwnerBusiness clears the "ownerBusiness" edge to the Business entity.
func (eu *EventUpdate) ClearOwnerBusiness() *EventUpdate {
	eu.mutation.ClearOwnerBusiness()
	return eu
}

// ClearUserFollowers clears all "userFollowers" edges to the UserFollowEvent entity.
func (eu *EventUpdate) ClearUserFollowers() *EventUpdate {
	eu.mutation.ClearUserFollowers()
	return eu
}

// RemoveUserFollowerIDs removes the "userFollowers" edge to UserFollowEvent entities by IDs.
func (eu *EventUpdate) RemoveUserFollowerIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveUserFollowerIDs(ids...)
	return eu
}

// RemoveUserFollowers removes "userFollowers" edges to UserFollowEvent entities.
func (eu *EventUpdate) RemoveUserFollowers(u ...*UserFollowEvent) *EventUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveUserFollowerIDs(ids...)
}

// ClearBusinessFollowers clears all "businessFollowers" edges to the BusinessFollowEvent entity.
func (eu *EventUpdate) ClearBusinessFollowers() *EventUpdate {
	eu.mutation.ClearBusinessFollowers()
	return eu
}

// RemoveBusinessFollowerIDs removes the "businessFollowers" edge to BusinessFollowEvent entities by IDs.
func (eu *EventUpdate) RemoveBusinessFollowerIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveBusinessFollowerIDs(ids...)
	return eu
}

// RemoveBusinessFollowers removes "businessFollowers" edges to BusinessFollowEvent entities.
func (eu *EventUpdate) RemoveBusinessFollowers(b ...*BusinessFollowEvent) *EventUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return eu.RemoveBusinessFollowerIDs(ids...)
}

// ClearFaqs clears all "faqs" edges to the FAQ entity.
func (eu *EventUpdate) ClearFaqs() *EventUpdate {
	eu.mutation.ClearFaqs()
	return eu
}

// RemoveFaqIDs removes the "faqs" edge to FAQ entities by IDs.
func (eu *EventUpdate) RemoveFaqIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveFaqIDs(ids...)
	return eu
}

// RemoveFaqs removes "faqs" edges to FAQ entities.
func (eu *EventUpdate) RemoveFaqs(f ...*FAQ) *EventUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.RemoveFaqIDs(ids...)
}

// ClearRatings clears all "ratings" edges to the Rating entity.
func (eu *EventUpdate) ClearRatings() *EventUpdate {
	eu.mutation.ClearRatings()
	return eu
}

// RemoveRatingIDs removes the "ratings" edge to Rating entities by IDs.
func (eu *EventUpdate) RemoveRatingIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveRatingIDs(ids...)
	return eu
}

// RemoveRatings removes "ratings" edges to Rating entities.
func (eu *EventUpdate) RemoveRatings(r ...*Rating) *EventUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.RemoveRatingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EventUpdate) defaults() error {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		if event.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized event.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := event.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if v, ok := eu.mutation.EventType(); ok {
		if err := event.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "EventType", err: fmt.Errorf(`ent: validator failed for field "Event.EventType": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Frequency(); ok {
		if err := event.FrequencyValidator(v); err != nil {
			return &ValidationError{Name: "frequency", err: fmt.Errorf(`ent: validator failed for field "Event.frequency": %w`, err)}
		}
	}
	if v, ok := eu.mutation.VenueType(); ok {
		if err := event.VenueTypeValidator(v); err != nil {
			return &ValidationError{Name: "venue_type", err: fmt.Errorf(`ent: validator failed for field "Event.venue_type": %w`, err)}
		}
	}
	return nil
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
	}
	if eu.mutation.NameCleared() {
		_spec.ClearField(event.FieldName, field.TypeString)
	}
	if value, ok := eu.mutation.EventType(); ok {
		_spec.SetField(event.FieldEventType, field.TypeEnum, value)
	}
	if eu.mutation.EventTypeCleared() {
		_spec.ClearField(event.FieldEventType, field.TypeEnum)
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.SetField(event.FieldStatus, field.TypeString, value)
	}
	if eu.mutation.StatusCleared() {
		_spec.ClearField(event.FieldStatus, field.TypeString)
	}
	if value, ok := eu.mutation.Location(); ok {
		_spec.SetField(event.FieldLocation, field.TypeString, value)
	}
	if eu.mutation.LocationCleared() {
		_spec.ClearField(event.FieldLocation, field.TypeString)
	}
	if value, ok := eu.mutation.URL(); ok {
		_spec.SetField(event.FieldURL, field.TypeString, value)
	}
	if eu.mutation.URLCleared() {
		_spec.ClearField(event.FieldURL, field.TypeString)
	}
	if value, ok := eu.mutation.Title(); ok {
		_spec.SetField(event.FieldTitle, field.TypeString, value)
	}
	if eu.mutation.TitleCleared() {
		_spec.ClearField(event.FieldTitle, field.TypeString)
	}
	if value, ok := eu.mutation.TimeZone(); ok {
		_spec.SetField(event.FieldTimeZone, field.TypeString, value)
	}
	if eu.mutation.TimeZoneCleared() {
		_spec.ClearField(event.FieldTimeZone, field.TypeString)
	}
	if value, ok := eu.mutation.StartTime(); ok {
		_spec.SetField(event.FieldStartTime, field.TypeTime, value)
	}
	if eu.mutation.StartTimeCleared() {
		_spec.ClearField(event.FieldStartTime, field.TypeTime)
	}
	if value, ok := eu.mutation.EndTime(); ok {
		_spec.SetField(event.FieldEndTime, field.TypeTime, value)
	}
	if eu.mutation.EndTimeCleared() {
		_spec.ClearField(event.FieldEndTime, field.TypeTime)
	}
	if value, ok := eu.mutation.StartDate(); ok {
		_spec.SetField(event.FieldStartDate, field.TypeString, value)
	}
	if eu.mutation.StartDateCleared() {
		_spec.ClearField(event.FieldStartDate, field.TypeString)
	}
	if value, ok := eu.mutation.EndDate(); ok {
		_spec.SetField(event.FieldEndDate, field.TypeString, value)
	}
	if eu.mutation.EndDateCleared() {
		_spec.ClearField(event.FieldEndDate, field.TypeString)
	}
	if value, ok := eu.mutation.Frequency(); ok {
		_spec.SetField(event.FieldFrequency, field.TypeEnum, value)
	}
	if eu.mutation.FrequencyCleared() {
		_spec.ClearField(event.FieldFrequency, field.TypeEnum)
	}
	if value, ok := eu.mutation.FrequencyInterval(); ok {
		_spec.SetField(event.FieldFrequencyInterval, field.TypeString, value)
	}
	if eu.mutation.FrequencyIntervalCleared() {
		_spec.ClearField(event.FieldFrequencyInterval, field.TypeString)
	}
	if value, ok := eu.mutation.FrequencyDayOfWeek(); ok {
		_spec.SetField(event.FieldFrequencyDayOfWeek, field.TypeString, value)
	}
	if eu.mutation.FrequencyDayOfWeekCleared() {
		_spec.ClearField(event.FieldFrequencyDayOfWeek, field.TypeString)
	}
	if value, ok := eu.mutation.FrequencyDayOfMonth(); ok {
		_spec.SetField(event.FieldFrequencyDayOfMonth, field.TypeString, value)
	}
	if eu.mutation.FrequencyDayOfMonthCleared() {
		_spec.ClearField(event.FieldFrequencyDayOfMonth, field.TypeString)
	}
	if value, ok := eu.mutation.FrequencyMonthOfYear(); ok {
		_spec.SetField(event.FieldFrequencyMonthOfYear, field.TypeString, value)
	}
	if eu.mutation.FrequencyMonthOfYearCleared() {
		_spec.ClearField(event.FieldFrequencyMonthOfYear, field.TypeString)
	}
	if value, ok := eu.mutation.VenueType(); ok {
		_spec.SetField(event.FieldVenueType, field.TypeEnum, value)
	}
	if eu.mutation.VenueTypeCleared() {
		_spec.ClearField(event.FieldVenueType, field.TypeEnum)
	}
	if value, ok := eu.mutation.VenueName(); ok {
		_spec.SetField(event.FieldVenueName, field.TypeString, value)
	}
	if eu.mutation.VenueNameCleared() {
		_spec.ClearField(event.FieldVenueName, field.TypeString)
	}
	if value, ok := eu.mutation.VenueAddress(); ok {
		_spec.SetField(event.FieldVenueAddress, field.TypeString, value)
	}
	if eu.mutation.VenueAddressCleared() {
		_spec.ClearField(event.FieldVenueAddress, field.TypeString)
	}
	if value, ok := eu.mutation.VenueCity(); ok {
		_spec.SetField(event.FieldVenueCity, field.TypeString, value)
	}
	if eu.mutation.VenueCityCleared() {
		_spec.ClearField(event.FieldVenueCity, field.TypeString)
	}
	if value, ok := eu.mutation.VenueState(); ok {
		_spec.SetField(event.FieldVenueState, field.TypeString, value)
	}
	if eu.mutation.VenueStateCleared() {
		_spec.ClearField(event.FieldVenueState, field.TypeString)
	}
	if value, ok := eu.mutation.VenueCountry(); ok {
		_spec.SetField(event.FieldVenueCountry, field.TypeString, value)
	}
	if eu.mutation.VenueCountryCleared() {
		_spec.ClearField(event.FieldVenueCountry, field.TypeString)
	}
	if value, ok := eu.mutation.VenueZip(); ok {
		_spec.SetField(event.FieldVenueZip, field.TypeString, value)
	}
	if eu.mutation.VenueZipCleared() {
		_spec.ClearField(event.FieldVenueZip, field.TypeString)
	}
	if value, ok := eu.mutation.VenueLat(); ok {
		_spec.SetField(event.FieldVenueLat, field.TypeString, value)
	}
	if eu.mutation.VenueLatCleared() {
		_spec.ClearField(event.FieldVenueLat, field.TypeString)
	}
	if value, ok := eu.mutation.VenueLon(); ok {
		_spec.SetField(event.FieldVenueLon, field.TypeString, value)
	}
	if eu.mutation.VenueLonCleared() {
		_spec.ClearField(event.FieldVenueLon, field.TypeString)
	}
	if value, ok := eu.mutation.VenueURL(); ok {
		_spec.SetField(event.FieldVenueURL, field.TypeString, value)
	}
	if eu.mutation.VenueURLCleared() {
		_spec.ClearField(event.FieldVenueURL, field.TypeString)
	}
	if value, ok := eu.mutation.VenuePhone(); ok {
		_spec.SetField(event.FieldVenuePhone, field.TypeString, value)
	}
	if eu.mutation.VenuePhoneCleared() {
		_spec.ClearField(event.FieldVenuePhone, field.TypeString)
	}
	if value, ok := eu.mutation.VenueEmail(); ok {
		_spec.SetField(event.FieldVenueEmail, field.TypeString, value)
	}
	if eu.mutation.VenueEmailCleared() {
		_spec.ClearField(event.FieldVenueEmail, field.TypeString)
	}
	if value, ok := eu.mutation.Tags(); ok {
		_spec.SetField(event.FieldTags, field.TypeString, value)
	}
	if eu.mutation.TagsCleared() {
		_spec.ClearField(event.FieldTags, field.TypeString)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(event.FieldDescription, field.TypeString)
	}
	if value, ok := eu.mutation.EventSettings(); ok {
		_spec.SetField(event.FieldEventSettings, field.TypeJSON, value)
	}
	if eu.mutation.EventSettingsCleared() {
		_spec.ClearField(event.FieldEventSettings, field.TypeJSON)
	}
	if value, ok := eu.mutation.CoverImage(); ok {
		_spec.SetField(event.FieldCoverImage, field.TypeString, value)
	}
	if eu.mutation.CoverImageCleared() {
		_spec.ClearField(event.FieldCoverImage, field.TypeString)
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.SetField(event.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.MapCoordinates(); ok {
		_spec.SetField(event.FieldMapCoordinates, field.TypeJSON, value)
	}
	if eu.mutation.MapCoordinatesCleared() {
		_spec.ClearField(event.FieldMapCoordinates, field.TypeJSON)
	}
	if value, ok := eu.mutation.Longitude(); ok {
		_spec.SetField(event.FieldLongitude, field.TypeString, value)
	}
	if eu.mutation.LongitudeCleared() {
		_spec.ClearField(event.FieldLongitude, field.TypeString)
	}
	if value, ok := eu.mutation.Latitude(); ok {
		_spec.SetField(event.FieldLatitude, field.TypeString, value)
	}
	if eu.mutation.LatitudeCleared() {
		_spec.ClearField(event.FieldLatitude, field.TypeString)
	}
	if value, ok := eu.mutation.SearchText(); ok {
		_spec.SetField(event.FieldSearchText, field.TypeString, value)
	}
	if eu.mutation.SearchTextCleared() {
		_spec.ClearField(event.FieldSearchText, field.TypeString)
	}
	if value, ok := eu.mutation.RelevanceScore(); ok {
		_spec.SetField(event.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedRelevanceScore(); ok {
		_spec.AddField(event.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if eu.mutation.RelevanceScoreCleared() {
		_spec.ClearField(event.FieldRelevanceScore, field.TypeFloat64)
	}
	if value, ok := eu.mutation.FollowersCount(); ok {
		_spec.SetField(event.FieldFollowersCount, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedFollowersCount(); ok {
		_spec.AddField(event.FieldFollowersCount, field.TypeInt, value)
	}
	if value, ok := eu.mutation.FollowingCount(); ok {
		_spec.SetField(event.FieldFollowingCount, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedFollowingCount(); ok {
		_spec.AddField(event.FieldFollowingCount, field.TypeInt, value)
	}
	if value, ok := eu.mutation.LikesCount(); ok {
		_spec.SetField(event.FieldLikesCount, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedLikesCount(); ok {
		_spec.AddField(event.FieldLikesCount, field.TypeInt, value)
	}
	if eu.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketsTable,
			Columns: []string{event.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !eu.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketsTable,
			Columns: []string{event.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketsTable,
			Columns: []string{event.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.TicketOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketOptionsTable,
			Columns: []string{event.TicketOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedTicketOptionsIDs(); len(nodes) > 0 && !eu.mutation.TicketOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketOptionsTable,
			Columns: []string{event.TicketOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TicketOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketOptionsTable,
			Columns: []string{event.TicketOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.PlaceTable,
			Columns: []string{event.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedPlaceIDs(); len(nodes) > 0 && !eu.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.PlaceTable,
			Columns: []string{event.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.PlaceTable,
			Columns: []string{event.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EventCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventCategoriesTable,
			Columns: []string{event.EventCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEventCategoriesIDs(); len(nodes) > 0 && !eu.mutation.EventCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventCategoriesTable,
			Columns: []string{event.EventCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EventCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventCategoriesTable,
			Columns: []string{event.EventCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EventCategoryAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventCategoryAssignmentsTable,
			Columns: []string{event.EventCategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEventCategoryAssignmentsIDs(); len(nodes) > 0 && !eu.mutation.EventCategoryAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventCategoryAssignmentsTable,
			Columns: []string{event.EventCategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EventCategoryAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventCategoryAssignmentsTable,
			Columns: []string{event.EventCategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.OwnerUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   event.OwnerUserTable,
			Columns: []string{event.OwnerUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OwnerUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   event.OwnerUserTable,
			Columns: []string{event.OwnerUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.OwnerBusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.OwnerBusinessTable,
			Columns: []string{event.OwnerBusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OwnerBusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.OwnerBusinessTable,
			Columns: []string{event.OwnerBusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.UserFollowersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.UserFollowersTable,
			Columns: []string{event.UserFollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedUserFollowersIDs(); len(nodes) > 0 && !eu.mutation.UserFollowersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.UserFollowersTable,
			Columns: []string{event.UserFollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserFollowersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.UserFollowersTable,
			Columns: []string{event.UserFollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.BusinessFollowersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.BusinessFollowersTable,
			Columns: []string{event.BusinessFollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedBusinessFollowersIDs(); len(nodes) > 0 && !eu.mutation.BusinessFollowersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.BusinessFollowersTable,
			Columns: []string{event.BusinessFollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.BusinessFollowersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.BusinessFollowersTable,
			Columns: []string{event.BusinessFollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.FaqsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FaqsTable,
			Columns: event.FaqsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faq.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedFaqsIDs(); len(nodes) > 0 && !eu.mutation.FaqsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FaqsTable,
			Columns: event.FaqsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faq.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FaqsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FaqsTable,
			Columns: event.FaqsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faq.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.RatingsTable,
			Columns: []string{event.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedRatingsIDs(); len(nodes) > 0 && !eu.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.RatingsTable,
			Columns: []string{event.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RatingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.RatingsTable,
			Columns: []string{event.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetName sets the "name" field.
func (euo *EventUpdateOne) SetName(s string) *EventUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableName(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetName(*s)
	}
	return euo
}

// ClearName clears the value of the "name" field.
func (euo *EventUpdateOne) ClearName() *EventUpdateOne {
	euo.mutation.ClearName()
	return euo
}

// SetEventType sets the "EventType" field.
func (euo *EventUpdateOne) SetEventType(et event.EventType) *EventUpdateOne {
	euo.mutation.SetEventType(et)
	return euo
}

// SetNillableEventType sets the "EventType" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableEventType(et *event.EventType) *EventUpdateOne {
	if et != nil {
		euo.SetEventType(*et)
	}
	return euo
}

// ClearEventType clears the value of the "EventType" field.
func (euo *EventUpdateOne) ClearEventType() *EventUpdateOne {
	euo.mutation.ClearEventType()
	return euo
}

// SetStatus sets the "status" field.
func (euo *EventUpdateOne) SetStatus(s string) *EventUpdateOne {
	euo.mutation.SetStatus(s)
	return euo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableStatus(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetStatus(*s)
	}
	return euo
}

// ClearStatus clears the value of the "status" field.
func (euo *EventUpdateOne) ClearStatus() *EventUpdateOne {
	euo.mutation.ClearStatus()
	return euo
}

// SetLocation sets the "location" field.
func (euo *EventUpdateOne) SetLocation(s string) *EventUpdateOne {
	euo.mutation.SetLocation(s)
	return euo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLocation(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetLocation(*s)
	}
	return euo
}

// ClearLocation clears the value of the "location" field.
func (euo *EventUpdateOne) ClearLocation() *EventUpdateOne {
	euo.mutation.ClearLocation()
	return euo
}

// SetURL sets the "url" field.
func (euo *EventUpdateOne) SetURL(s string) *EventUpdateOne {
	euo.mutation.SetURL(s)
	return euo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableURL(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetURL(*s)
	}
	return euo
}

// ClearURL clears the value of the "url" field.
func (euo *EventUpdateOne) ClearURL() *EventUpdateOne {
	euo.mutation.ClearURL()
	return euo
}

// SetTitle sets the "title" field.
func (euo *EventUpdateOne) SetTitle(s string) *EventUpdateOne {
	euo.mutation.SetTitle(s)
	return euo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTitle(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetTitle(*s)
	}
	return euo
}

// ClearTitle clears the value of the "title" field.
func (euo *EventUpdateOne) ClearTitle() *EventUpdateOne {
	euo.mutation.ClearTitle()
	return euo
}

// SetTimeZone sets the "time_zone" field.
func (euo *EventUpdateOne) SetTimeZone(s string) *EventUpdateOne {
	euo.mutation.SetTimeZone(s)
	return euo
}

// SetNillableTimeZone sets the "time_zone" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTimeZone(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetTimeZone(*s)
	}
	return euo
}

// ClearTimeZone clears the value of the "time_zone" field.
func (euo *EventUpdateOne) ClearTimeZone() *EventUpdateOne {
	euo.mutation.ClearTimeZone()
	return euo
}

// SetStartTime sets the "start_time" field.
func (euo *EventUpdateOne) SetStartTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetStartTime(t)
	return euo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableStartTime(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetStartTime(*t)
	}
	return euo
}

// ClearStartTime clears the value of the "start_time" field.
func (euo *EventUpdateOne) ClearStartTime() *EventUpdateOne {
	euo.mutation.ClearStartTime()
	return euo
}

// SetEndTime sets the "end_time" field.
func (euo *EventUpdateOne) SetEndTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetEndTime(t)
	return euo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableEndTime(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetEndTime(*t)
	}
	return euo
}

// ClearEndTime clears the value of the "end_time" field.
func (euo *EventUpdateOne) ClearEndTime() *EventUpdateOne {
	euo.mutation.ClearEndTime()
	return euo
}

// SetStartDate sets the "start_date" field.
func (euo *EventUpdateOne) SetStartDate(s string) *EventUpdateOne {
	euo.mutation.SetStartDate(s)
	return euo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableStartDate(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetStartDate(*s)
	}
	return euo
}

// ClearStartDate clears the value of the "start_date" field.
func (euo *EventUpdateOne) ClearStartDate() *EventUpdateOne {
	euo.mutation.ClearStartDate()
	return euo
}

// SetEndDate sets the "end_date" field.
func (euo *EventUpdateOne) SetEndDate(s string) *EventUpdateOne {
	euo.mutation.SetEndDate(s)
	return euo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableEndDate(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetEndDate(*s)
	}
	return euo
}

// ClearEndDate clears the value of the "end_date" field.
func (euo *EventUpdateOne) ClearEndDate() *EventUpdateOne {
	euo.mutation.ClearEndDate()
	return euo
}

// SetFrequency sets the "frequency" field.
func (euo *EventUpdateOne) SetFrequency(e event.Frequency) *EventUpdateOne {
	euo.mutation.SetFrequency(e)
	return euo
}

// SetNillableFrequency sets the "frequency" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableFrequency(e *event.Frequency) *EventUpdateOne {
	if e != nil {
		euo.SetFrequency(*e)
	}
	return euo
}

// ClearFrequency clears the value of the "frequency" field.
func (euo *EventUpdateOne) ClearFrequency() *EventUpdateOne {
	euo.mutation.ClearFrequency()
	return euo
}

// SetFrequencyInterval sets the "frequency_interval" field.
func (euo *EventUpdateOne) SetFrequencyInterval(s string) *EventUpdateOne {
	euo.mutation.SetFrequencyInterval(s)
	return euo
}

// SetNillableFrequencyInterval sets the "frequency_interval" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableFrequencyInterval(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetFrequencyInterval(*s)
	}
	return euo
}

// ClearFrequencyInterval clears the value of the "frequency_interval" field.
func (euo *EventUpdateOne) ClearFrequencyInterval() *EventUpdateOne {
	euo.mutation.ClearFrequencyInterval()
	return euo
}

// SetFrequencyDayOfWeek sets the "frequency_day_of_week" field.
func (euo *EventUpdateOne) SetFrequencyDayOfWeek(s string) *EventUpdateOne {
	euo.mutation.SetFrequencyDayOfWeek(s)
	return euo
}

// SetNillableFrequencyDayOfWeek sets the "frequency_day_of_week" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableFrequencyDayOfWeek(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetFrequencyDayOfWeek(*s)
	}
	return euo
}

// ClearFrequencyDayOfWeek clears the value of the "frequency_day_of_week" field.
func (euo *EventUpdateOne) ClearFrequencyDayOfWeek() *EventUpdateOne {
	euo.mutation.ClearFrequencyDayOfWeek()
	return euo
}

// SetFrequencyDayOfMonth sets the "frequency_day_of_month" field.
func (euo *EventUpdateOne) SetFrequencyDayOfMonth(s string) *EventUpdateOne {
	euo.mutation.SetFrequencyDayOfMonth(s)
	return euo
}

// SetNillableFrequencyDayOfMonth sets the "frequency_day_of_month" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableFrequencyDayOfMonth(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetFrequencyDayOfMonth(*s)
	}
	return euo
}

// ClearFrequencyDayOfMonth clears the value of the "frequency_day_of_month" field.
func (euo *EventUpdateOne) ClearFrequencyDayOfMonth() *EventUpdateOne {
	euo.mutation.ClearFrequencyDayOfMonth()
	return euo
}

// SetFrequencyMonthOfYear sets the "frequency_month_of_year" field.
func (euo *EventUpdateOne) SetFrequencyMonthOfYear(s string) *EventUpdateOne {
	euo.mutation.SetFrequencyMonthOfYear(s)
	return euo
}

// SetNillableFrequencyMonthOfYear sets the "frequency_month_of_year" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableFrequencyMonthOfYear(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetFrequencyMonthOfYear(*s)
	}
	return euo
}

// ClearFrequencyMonthOfYear clears the value of the "frequency_month_of_year" field.
func (euo *EventUpdateOne) ClearFrequencyMonthOfYear() *EventUpdateOne {
	euo.mutation.ClearFrequencyMonthOfYear()
	return euo
}

// SetVenueType sets the "venue_type" field.
func (euo *EventUpdateOne) SetVenueType(et event.VenueType) *EventUpdateOne {
	euo.mutation.SetVenueType(et)
	return euo
}

// SetNillableVenueType sets the "venue_type" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVenueType(et *event.VenueType) *EventUpdateOne {
	if et != nil {
		euo.SetVenueType(*et)
	}
	return euo
}

// ClearVenueType clears the value of the "venue_type" field.
func (euo *EventUpdateOne) ClearVenueType() *EventUpdateOne {
	euo.mutation.ClearVenueType()
	return euo
}

// SetVenueName sets the "venue_name" field.
func (euo *EventUpdateOne) SetVenueName(s string) *EventUpdateOne {
	euo.mutation.SetVenueName(s)
	return euo
}

// SetNillableVenueName sets the "venue_name" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVenueName(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetVenueName(*s)
	}
	return euo
}

// ClearVenueName clears the value of the "venue_name" field.
func (euo *EventUpdateOne) ClearVenueName() *EventUpdateOne {
	euo.mutation.ClearVenueName()
	return euo
}

// SetVenueAddress sets the "venue_address" field.
func (euo *EventUpdateOne) SetVenueAddress(s string) *EventUpdateOne {
	euo.mutation.SetVenueAddress(s)
	return euo
}

// SetNillableVenueAddress sets the "venue_address" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVenueAddress(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetVenueAddress(*s)
	}
	return euo
}

// ClearVenueAddress clears the value of the "venue_address" field.
func (euo *EventUpdateOne) ClearVenueAddress() *EventUpdateOne {
	euo.mutation.ClearVenueAddress()
	return euo
}

// SetVenueCity sets the "venue_city" field.
func (euo *EventUpdateOne) SetVenueCity(s string) *EventUpdateOne {
	euo.mutation.SetVenueCity(s)
	return euo
}

// SetNillableVenueCity sets the "venue_city" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVenueCity(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetVenueCity(*s)
	}
	return euo
}

// ClearVenueCity clears the value of the "venue_city" field.
func (euo *EventUpdateOne) ClearVenueCity() *EventUpdateOne {
	euo.mutation.ClearVenueCity()
	return euo
}

// SetVenueState sets the "venue_state" field.
func (euo *EventUpdateOne) SetVenueState(s string) *EventUpdateOne {
	euo.mutation.SetVenueState(s)
	return euo
}

// SetNillableVenueState sets the "venue_state" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVenueState(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetVenueState(*s)
	}
	return euo
}

// ClearVenueState clears the value of the "venue_state" field.
func (euo *EventUpdateOne) ClearVenueState() *EventUpdateOne {
	euo.mutation.ClearVenueState()
	return euo
}

// SetVenueCountry sets the "venue_country" field.
func (euo *EventUpdateOne) SetVenueCountry(s string) *EventUpdateOne {
	euo.mutation.SetVenueCountry(s)
	return euo
}

// SetNillableVenueCountry sets the "venue_country" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVenueCountry(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetVenueCountry(*s)
	}
	return euo
}

// ClearVenueCountry clears the value of the "venue_country" field.
func (euo *EventUpdateOne) ClearVenueCountry() *EventUpdateOne {
	euo.mutation.ClearVenueCountry()
	return euo
}

// SetVenueZip sets the "venue_zip" field.
func (euo *EventUpdateOne) SetVenueZip(s string) *EventUpdateOne {
	euo.mutation.SetVenueZip(s)
	return euo
}

// SetNillableVenueZip sets the "venue_zip" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVenueZip(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetVenueZip(*s)
	}
	return euo
}

// ClearVenueZip clears the value of the "venue_zip" field.
func (euo *EventUpdateOne) ClearVenueZip() *EventUpdateOne {
	euo.mutation.ClearVenueZip()
	return euo
}

// SetVenueLat sets the "venue_lat" field.
func (euo *EventUpdateOne) SetVenueLat(s string) *EventUpdateOne {
	euo.mutation.SetVenueLat(s)
	return euo
}

// SetNillableVenueLat sets the "venue_lat" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVenueLat(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetVenueLat(*s)
	}
	return euo
}

// ClearVenueLat clears the value of the "venue_lat" field.
func (euo *EventUpdateOne) ClearVenueLat() *EventUpdateOne {
	euo.mutation.ClearVenueLat()
	return euo
}

// SetVenueLon sets the "venue_lon" field.
func (euo *EventUpdateOne) SetVenueLon(s string) *EventUpdateOne {
	euo.mutation.SetVenueLon(s)
	return euo
}

// SetNillableVenueLon sets the "venue_lon" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVenueLon(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetVenueLon(*s)
	}
	return euo
}

// ClearVenueLon clears the value of the "venue_lon" field.
func (euo *EventUpdateOne) ClearVenueLon() *EventUpdateOne {
	euo.mutation.ClearVenueLon()
	return euo
}

// SetVenueURL sets the "venue_url" field.
func (euo *EventUpdateOne) SetVenueURL(s string) *EventUpdateOne {
	euo.mutation.SetVenueURL(s)
	return euo
}

// SetNillableVenueURL sets the "venue_url" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVenueURL(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetVenueURL(*s)
	}
	return euo
}

// ClearVenueURL clears the value of the "venue_url" field.
func (euo *EventUpdateOne) ClearVenueURL() *EventUpdateOne {
	euo.mutation.ClearVenueURL()
	return euo
}

// SetVenuePhone sets the "venue_phone" field.
func (euo *EventUpdateOne) SetVenuePhone(s string) *EventUpdateOne {
	euo.mutation.SetVenuePhone(s)
	return euo
}

// SetNillableVenuePhone sets the "venue_phone" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVenuePhone(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetVenuePhone(*s)
	}
	return euo
}

// ClearVenuePhone clears the value of the "venue_phone" field.
func (euo *EventUpdateOne) ClearVenuePhone() *EventUpdateOne {
	euo.mutation.ClearVenuePhone()
	return euo
}

// SetVenueEmail sets the "venue_email" field.
func (euo *EventUpdateOne) SetVenueEmail(s string) *EventUpdateOne {
	euo.mutation.SetVenueEmail(s)
	return euo
}

// SetNillableVenueEmail sets the "venue_email" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableVenueEmail(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetVenueEmail(*s)
	}
	return euo
}

// ClearVenueEmail clears the value of the "venue_email" field.
func (euo *EventUpdateOne) ClearVenueEmail() *EventUpdateOne {
	euo.mutation.ClearVenueEmail()
	return euo
}

// SetTags sets the "tags" field.
func (euo *EventUpdateOne) SetTags(s string) *EventUpdateOne {
	euo.mutation.SetTags(s)
	return euo
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTags(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetTags(*s)
	}
	return euo
}

// ClearTags clears the value of the "tags" field.
func (euo *EventUpdateOne) ClearTags() *EventUpdateOne {
	euo.mutation.ClearTags()
	return euo
}

// SetDescription sets the "description" field.
func (euo *EventUpdateOne) SetDescription(s string) *EventUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDescription(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *EventUpdateOne) ClearDescription() *EventUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetEventSettings sets the "event_settings" field.
func (euo *EventUpdateOne) SetEventSettings(m map[string]interface{}) *EventUpdateOne {
	euo.mutation.SetEventSettings(m)
	return euo
}

// ClearEventSettings clears the value of the "event_settings" field.
func (euo *EventUpdateOne) ClearEventSettings() *EventUpdateOne {
	euo.mutation.ClearEventSettings()
	return euo
}

// SetCoverImage sets the "cover_image" field.
func (euo *EventUpdateOne) SetCoverImage(s string) *EventUpdateOne {
	euo.mutation.SetCoverImage(s)
	return euo
}

// SetNillableCoverImage sets the "cover_image" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableCoverImage(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetCoverImage(*s)
	}
	return euo
}

// ClearCoverImage clears the value of the "cover_image" field.
func (euo *EventUpdateOne) ClearCoverImage() *EventUpdateOne {
	euo.mutation.ClearCoverImage()
	return euo
}

// SetCreatedAt sets the "createdAt" field.
func (euo *EventUpdateOne) SetCreatedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableCreatedAt(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// SetUpdatedAt sets the "updatedAt" field.
func (euo *EventUpdateOne) SetUpdatedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetMapCoordinates sets the "map_coordinates" field.
func (euo *EventUpdateOne) SetMapCoordinates(m map[string]interface{}) *EventUpdateOne {
	euo.mutation.SetMapCoordinates(m)
	return euo
}

// ClearMapCoordinates clears the value of the "map_coordinates" field.
func (euo *EventUpdateOne) ClearMapCoordinates() *EventUpdateOne {
	euo.mutation.ClearMapCoordinates()
	return euo
}

// SetLongitude sets the "longitude" field.
func (euo *EventUpdateOne) SetLongitude(s string) *EventUpdateOne {
	euo.mutation.SetLongitude(s)
	return euo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLongitude(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetLongitude(*s)
	}
	return euo
}

// ClearLongitude clears the value of the "longitude" field.
func (euo *EventUpdateOne) ClearLongitude() *EventUpdateOne {
	euo.mutation.ClearLongitude()
	return euo
}

// SetLatitude sets the "latitude" field.
func (euo *EventUpdateOne) SetLatitude(s string) *EventUpdateOne {
	euo.mutation.SetLatitude(s)
	return euo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLatitude(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetLatitude(*s)
	}
	return euo
}

// ClearLatitude clears the value of the "latitude" field.
func (euo *EventUpdateOne) ClearLatitude() *EventUpdateOne {
	euo.mutation.ClearLatitude()
	return euo
}

// SetSearchText sets the "search_text" field.
func (euo *EventUpdateOne) SetSearchText(s string) *EventUpdateOne {
	euo.mutation.SetSearchText(s)
	return euo
}

// SetNillableSearchText sets the "search_text" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSearchText(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetSearchText(*s)
	}
	return euo
}

// ClearSearchText clears the value of the "search_text" field.
func (euo *EventUpdateOne) ClearSearchText() *EventUpdateOne {
	euo.mutation.ClearSearchText()
	return euo
}

// SetRelevanceScore sets the "relevance_score" field.
func (euo *EventUpdateOne) SetRelevanceScore(f float64) *EventUpdateOne {
	euo.mutation.ResetRelevanceScore()
	euo.mutation.SetRelevanceScore(f)
	return euo
}

// SetNillableRelevanceScore sets the "relevance_score" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableRelevanceScore(f *float64) *EventUpdateOne {
	if f != nil {
		euo.SetRelevanceScore(*f)
	}
	return euo
}

// AddRelevanceScore adds f to the "relevance_score" field.
func (euo *EventUpdateOne) AddRelevanceScore(f float64) *EventUpdateOne {
	euo.mutation.AddRelevanceScore(f)
	return euo
}

// ClearRelevanceScore clears the value of the "relevance_score" field.
func (euo *EventUpdateOne) ClearRelevanceScore() *EventUpdateOne {
	euo.mutation.ClearRelevanceScore()
	return euo
}

// SetFollowersCount sets the "followers_count" field.
func (euo *EventUpdateOne) SetFollowersCount(i int) *EventUpdateOne {
	euo.mutation.ResetFollowersCount()
	euo.mutation.SetFollowersCount(i)
	return euo
}

// SetNillableFollowersCount sets the "followers_count" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableFollowersCount(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetFollowersCount(*i)
	}
	return euo
}

// AddFollowersCount adds i to the "followers_count" field.
func (euo *EventUpdateOne) AddFollowersCount(i int) *EventUpdateOne {
	euo.mutation.AddFollowersCount(i)
	return euo
}

// SetFollowingCount sets the "following_count" field.
func (euo *EventUpdateOne) SetFollowingCount(i int) *EventUpdateOne {
	euo.mutation.ResetFollowingCount()
	euo.mutation.SetFollowingCount(i)
	return euo
}

// SetNillableFollowingCount sets the "following_count" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableFollowingCount(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetFollowingCount(*i)
	}
	return euo
}

// AddFollowingCount adds i to the "following_count" field.
func (euo *EventUpdateOne) AddFollowingCount(i int) *EventUpdateOne {
	euo.mutation.AddFollowingCount(i)
	return euo
}

// SetLikesCount sets the "likes_count" field.
func (euo *EventUpdateOne) SetLikesCount(i int) *EventUpdateOne {
	euo.mutation.ResetLikesCount()
	euo.mutation.SetLikesCount(i)
	return euo
}

// SetNillableLikesCount sets the "likes_count" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLikesCount(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetLikesCount(*i)
	}
	return euo
}

// AddLikesCount adds i to the "likes_count" field.
func (euo *EventUpdateOne) AddLikesCount(i int) *EventUpdateOne {
	euo.mutation.AddLikesCount(i)
	return euo
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (euo *EventUpdateOne) AddTicketIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddTicketIDs(ids...)
	return euo
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (euo *EventUpdateOne) AddTickets(t ...*Ticket) *EventUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddTicketIDs(ids...)
}

// AddTicketOptionIDs adds the "ticket_options" edge to the TicketOption entity by IDs.
func (euo *EventUpdateOne) AddTicketOptionIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddTicketOptionIDs(ids...)
	return euo
}

// AddTicketOptions adds the "ticket_options" edges to the TicketOption entity.
func (euo *EventUpdateOne) AddTicketOptions(t ...*TicketOption) *EventUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddTicketOptionIDs(ids...)
}

// AddPlaceIDs adds the "place" edge to the Place entity by IDs.
func (euo *EventUpdateOne) AddPlaceIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddPlaceIDs(ids...)
	return euo
}

// AddPlace adds the "place" edges to the Place entity.
func (euo *EventUpdateOne) AddPlace(p ...*Place) *EventUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddPlaceIDs(ids...)
}

// AddEventCategoryIDs adds the "event_categories" edge to the Category entity by IDs.
func (euo *EventUpdateOne) AddEventCategoryIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddEventCategoryIDs(ids...)
	return euo
}

// AddEventCategories adds the "event_categories" edges to the Category entity.
func (euo *EventUpdateOne) AddEventCategories(c ...*Category) *EventUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddEventCategoryIDs(ids...)
}

// AddEventCategoryAssignmentIDs adds the "event_category_assignments" edge to the CategoryAssignment entity by IDs.
func (euo *EventUpdateOne) AddEventCategoryAssignmentIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddEventCategoryAssignmentIDs(ids...)
	return euo
}

// AddEventCategoryAssignments adds the "event_category_assignments" edges to the CategoryAssignment entity.
func (euo *EventUpdateOne) AddEventCategoryAssignments(c ...*CategoryAssignment) *EventUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddEventCategoryAssignmentIDs(ids...)
}

// SetOwnerUserID sets the "ownerUser" edge to the User entity by ID.
func (euo *EventUpdateOne) SetOwnerUserID(id string) *EventUpdateOne {
	euo.mutation.SetOwnerUserID(id)
	return euo
}

// SetNillableOwnerUserID sets the "ownerUser" edge to the User entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableOwnerUserID(id *string) *EventUpdateOne {
	if id != nil {
		euo = euo.SetOwnerUserID(*id)
	}
	return euo
}

// SetOwnerUser sets the "ownerUser" edge to the User entity.
func (euo *EventUpdateOne) SetOwnerUser(u *User) *EventUpdateOne {
	return euo.SetOwnerUserID(u.ID)
}

// SetOwnerBusinessID sets the "ownerBusiness" edge to the Business entity by ID.
func (euo *EventUpdateOne) SetOwnerBusinessID(id string) *EventUpdateOne {
	euo.mutation.SetOwnerBusinessID(id)
	return euo
}

// SetNillableOwnerBusinessID sets the "ownerBusiness" edge to the Business entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableOwnerBusinessID(id *string) *EventUpdateOne {
	if id != nil {
		euo = euo.SetOwnerBusinessID(*id)
	}
	return euo
}

// SetOwnerBusiness sets the "ownerBusiness" edge to the Business entity.
func (euo *EventUpdateOne) SetOwnerBusiness(b *Business) *EventUpdateOne {
	return euo.SetOwnerBusinessID(b.ID)
}

// AddUserFollowerIDs adds the "userFollowers" edge to the UserFollowEvent entity by IDs.
func (euo *EventUpdateOne) AddUserFollowerIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddUserFollowerIDs(ids...)
	return euo
}

// AddUserFollowers adds the "userFollowers" edges to the UserFollowEvent entity.
func (euo *EventUpdateOne) AddUserFollowers(u ...*UserFollowEvent) *EventUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddUserFollowerIDs(ids...)
}

// AddBusinessFollowerIDs adds the "businessFollowers" edge to the BusinessFollowEvent entity by IDs.
func (euo *EventUpdateOne) AddBusinessFollowerIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddBusinessFollowerIDs(ids...)
	return euo
}

// AddBusinessFollowers adds the "businessFollowers" edges to the BusinessFollowEvent entity.
func (euo *EventUpdateOne) AddBusinessFollowers(b ...*BusinessFollowEvent) *EventUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return euo.AddBusinessFollowerIDs(ids...)
}

// AddFaqIDs adds the "faqs" edge to the FAQ entity by IDs.
func (euo *EventUpdateOne) AddFaqIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddFaqIDs(ids...)
	return euo
}

// AddFaqs adds the "faqs" edges to the FAQ entity.
func (euo *EventUpdateOne) AddFaqs(f ...*FAQ) *EventUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.AddFaqIDs(ids...)
}

// AddRatingIDs adds the "ratings" edge to the Rating entity by IDs.
func (euo *EventUpdateOne) AddRatingIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddRatingIDs(ids...)
	return euo
}

// AddRatings adds the "ratings" edges to the Rating entity.
func (euo *EventUpdateOne) AddRatings(r ...*Rating) *EventUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.AddRatingIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (euo *EventUpdateOne) ClearTickets() *EventUpdateOne {
	euo.mutation.ClearTickets()
	return euo
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (euo *EventUpdateOne) RemoveTicketIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveTicketIDs(ids...)
	return euo
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (euo *EventUpdateOne) RemoveTickets(t ...*Ticket) *EventUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveTicketIDs(ids...)
}

// ClearTicketOptions clears all "ticket_options" edges to the TicketOption entity.
func (euo *EventUpdateOne) ClearTicketOptions() *EventUpdateOne {
	euo.mutation.ClearTicketOptions()
	return euo
}

// RemoveTicketOptionIDs removes the "ticket_options" edge to TicketOption entities by IDs.
func (euo *EventUpdateOne) RemoveTicketOptionIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveTicketOptionIDs(ids...)
	return euo
}

// RemoveTicketOptions removes "ticket_options" edges to TicketOption entities.
func (euo *EventUpdateOne) RemoveTicketOptions(t ...*TicketOption) *EventUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveTicketOptionIDs(ids...)
}

// ClearPlace clears all "place" edges to the Place entity.
func (euo *EventUpdateOne) ClearPlace() *EventUpdateOne {
	euo.mutation.ClearPlace()
	return euo
}

// RemovePlaceIDs removes the "place" edge to Place entities by IDs.
func (euo *EventUpdateOne) RemovePlaceIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemovePlaceIDs(ids...)
	return euo
}

// RemovePlace removes "place" edges to Place entities.
func (euo *EventUpdateOne) RemovePlace(p ...*Place) *EventUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemovePlaceIDs(ids...)
}

// ClearEventCategories clears all "event_categories" edges to the Category entity.
func (euo *EventUpdateOne) ClearEventCategories() *EventUpdateOne {
	euo.mutation.ClearEventCategories()
	return euo
}

// RemoveEventCategoryIDs removes the "event_categories" edge to Category entities by IDs.
func (euo *EventUpdateOne) RemoveEventCategoryIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveEventCategoryIDs(ids...)
	return euo
}

// RemoveEventCategories removes "event_categories" edges to Category entities.
func (euo *EventUpdateOne) RemoveEventCategories(c ...*Category) *EventUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveEventCategoryIDs(ids...)
}

// ClearEventCategoryAssignments clears all "event_category_assignments" edges to the CategoryAssignment entity.
func (euo *EventUpdateOne) ClearEventCategoryAssignments() *EventUpdateOne {
	euo.mutation.ClearEventCategoryAssignments()
	return euo
}

// RemoveEventCategoryAssignmentIDs removes the "event_category_assignments" edge to CategoryAssignment entities by IDs.
func (euo *EventUpdateOne) RemoveEventCategoryAssignmentIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveEventCategoryAssignmentIDs(ids...)
	return euo
}

// RemoveEventCategoryAssignments removes "event_category_assignments" edges to CategoryAssignment entities.
func (euo *EventUpdateOne) RemoveEventCategoryAssignments(c ...*CategoryAssignment) *EventUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveEventCategoryAssignmentIDs(ids...)
}

// ClearOwnerUser clears the "ownerUser" edge to the User entity.
func (euo *EventUpdateOne) ClearOwnerUser() *EventUpdateOne {
	euo.mutation.ClearOwnerUser()
	return euo
}

// ClearOwnerBusiness clears the "ownerBusiness" edge to the Business entity.
func (euo *EventUpdateOne) ClearOwnerBusiness() *EventUpdateOne {
	euo.mutation.ClearOwnerBusiness()
	return euo
}

// ClearUserFollowers clears all "userFollowers" edges to the UserFollowEvent entity.
func (euo *EventUpdateOne) ClearUserFollowers() *EventUpdateOne {
	euo.mutation.ClearUserFollowers()
	return euo
}

// RemoveUserFollowerIDs removes the "userFollowers" edge to UserFollowEvent entities by IDs.
func (euo *EventUpdateOne) RemoveUserFollowerIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveUserFollowerIDs(ids...)
	return euo
}

// RemoveUserFollowers removes "userFollowers" edges to UserFollowEvent entities.
func (euo *EventUpdateOne) RemoveUserFollowers(u ...*UserFollowEvent) *EventUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveUserFollowerIDs(ids...)
}

// ClearBusinessFollowers clears all "businessFollowers" edges to the BusinessFollowEvent entity.
func (euo *EventUpdateOne) ClearBusinessFollowers() *EventUpdateOne {
	euo.mutation.ClearBusinessFollowers()
	return euo
}

// RemoveBusinessFollowerIDs removes the "businessFollowers" edge to BusinessFollowEvent entities by IDs.
func (euo *EventUpdateOne) RemoveBusinessFollowerIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveBusinessFollowerIDs(ids...)
	return euo
}

// RemoveBusinessFollowers removes "businessFollowers" edges to BusinessFollowEvent entities.
func (euo *EventUpdateOne) RemoveBusinessFollowers(b ...*BusinessFollowEvent) *EventUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return euo.RemoveBusinessFollowerIDs(ids...)
}

// ClearFaqs clears all "faqs" edges to the FAQ entity.
func (euo *EventUpdateOne) ClearFaqs() *EventUpdateOne {
	euo.mutation.ClearFaqs()
	return euo
}

// RemoveFaqIDs removes the "faqs" edge to FAQ entities by IDs.
func (euo *EventUpdateOne) RemoveFaqIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveFaqIDs(ids...)
	return euo
}

// RemoveFaqs removes "faqs" edges to FAQ entities.
func (euo *EventUpdateOne) RemoveFaqs(f ...*FAQ) *EventUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.RemoveFaqIDs(ids...)
}

// ClearRatings clears all "ratings" edges to the Rating entity.
func (euo *EventUpdateOne) ClearRatings() *EventUpdateOne {
	euo.mutation.ClearRatings()
	return euo
}

// RemoveRatingIDs removes the "ratings" edge to Rating entities by IDs.
func (euo *EventUpdateOne) RemoveRatingIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveRatingIDs(ids...)
	return euo
}

// RemoveRatings removes "ratings" edges to Rating entities.
func (euo *EventUpdateOne) RemoveRatings(r ...*Rating) *EventUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.RemoveRatingIDs(ids...)
}

// Where appends a list predicates to the EventUpdate builder.
func (euo *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EventUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		if event.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized event.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := event.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if v, ok := euo.mutation.EventType(); ok {
		if err := event.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "EventType", err: fmt.Errorf(`ent: validator failed for field "Event.EventType": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Frequency(); ok {
		if err := event.FrequencyValidator(v); err != nil {
			return &ValidationError{Name: "frequency", err: fmt.Errorf(`ent: validator failed for field "Event.frequency": %w`, err)}
		}
	}
	if v, ok := euo.mutation.VenueType(); ok {
		if err := event.VenueTypeValidator(v); err != nil {
			return &ValidationError{Name: "venue_type", err: fmt.Errorf(`ent: validator failed for field "Event.venue_type": %w`, err)}
		}
	}
	return nil
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
	}
	if euo.mutation.NameCleared() {
		_spec.ClearField(event.FieldName, field.TypeString)
	}
	if value, ok := euo.mutation.EventType(); ok {
		_spec.SetField(event.FieldEventType, field.TypeEnum, value)
	}
	if euo.mutation.EventTypeCleared() {
		_spec.ClearField(event.FieldEventType, field.TypeEnum)
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.SetField(event.FieldStatus, field.TypeString, value)
	}
	if euo.mutation.StatusCleared() {
		_spec.ClearField(event.FieldStatus, field.TypeString)
	}
	if value, ok := euo.mutation.Location(); ok {
		_spec.SetField(event.FieldLocation, field.TypeString, value)
	}
	if euo.mutation.LocationCleared() {
		_spec.ClearField(event.FieldLocation, field.TypeString)
	}
	if value, ok := euo.mutation.URL(); ok {
		_spec.SetField(event.FieldURL, field.TypeString, value)
	}
	if euo.mutation.URLCleared() {
		_spec.ClearField(event.FieldURL, field.TypeString)
	}
	if value, ok := euo.mutation.Title(); ok {
		_spec.SetField(event.FieldTitle, field.TypeString, value)
	}
	if euo.mutation.TitleCleared() {
		_spec.ClearField(event.FieldTitle, field.TypeString)
	}
	if value, ok := euo.mutation.TimeZone(); ok {
		_spec.SetField(event.FieldTimeZone, field.TypeString, value)
	}
	if euo.mutation.TimeZoneCleared() {
		_spec.ClearField(event.FieldTimeZone, field.TypeString)
	}
	if value, ok := euo.mutation.StartTime(); ok {
		_spec.SetField(event.FieldStartTime, field.TypeTime, value)
	}
	if euo.mutation.StartTimeCleared() {
		_spec.ClearField(event.FieldStartTime, field.TypeTime)
	}
	if value, ok := euo.mutation.EndTime(); ok {
		_spec.SetField(event.FieldEndTime, field.TypeTime, value)
	}
	if euo.mutation.EndTimeCleared() {
		_spec.ClearField(event.FieldEndTime, field.TypeTime)
	}
	if value, ok := euo.mutation.StartDate(); ok {
		_spec.SetField(event.FieldStartDate, field.TypeString, value)
	}
	if euo.mutation.StartDateCleared() {
		_spec.ClearField(event.FieldStartDate, field.TypeString)
	}
	if value, ok := euo.mutation.EndDate(); ok {
		_spec.SetField(event.FieldEndDate, field.TypeString, value)
	}
	if euo.mutation.EndDateCleared() {
		_spec.ClearField(event.FieldEndDate, field.TypeString)
	}
	if value, ok := euo.mutation.Frequency(); ok {
		_spec.SetField(event.FieldFrequency, field.TypeEnum, value)
	}
	if euo.mutation.FrequencyCleared() {
		_spec.ClearField(event.FieldFrequency, field.TypeEnum)
	}
	if value, ok := euo.mutation.FrequencyInterval(); ok {
		_spec.SetField(event.FieldFrequencyInterval, field.TypeString, value)
	}
	if euo.mutation.FrequencyIntervalCleared() {
		_spec.ClearField(event.FieldFrequencyInterval, field.TypeString)
	}
	if value, ok := euo.mutation.FrequencyDayOfWeek(); ok {
		_spec.SetField(event.FieldFrequencyDayOfWeek, field.TypeString, value)
	}
	if euo.mutation.FrequencyDayOfWeekCleared() {
		_spec.ClearField(event.FieldFrequencyDayOfWeek, field.TypeString)
	}
	if value, ok := euo.mutation.FrequencyDayOfMonth(); ok {
		_spec.SetField(event.FieldFrequencyDayOfMonth, field.TypeString, value)
	}
	if euo.mutation.FrequencyDayOfMonthCleared() {
		_spec.ClearField(event.FieldFrequencyDayOfMonth, field.TypeString)
	}
	if value, ok := euo.mutation.FrequencyMonthOfYear(); ok {
		_spec.SetField(event.FieldFrequencyMonthOfYear, field.TypeString, value)
	}
	if euo.mutation.FrequencyMonthOfYearCleared() {
		_spec.ClearField(event.FieldFrequencyMonthOfYear, field.TypeString)
	}
	if value, ok := euo.mutation.VenueType(); ok {
		_spec.SetField(event.FieldVenueType, field.TypeEnum, value)
	}
	if euo.mutation.VenueTypeCleared() {
		_spec.ClearField(event.FieldVenueType, field.TypeEnum)
	}
	if value, ok := euo.mutation.VenueName(); ok {
		_spec.SetField(event.FieldVenueName, field.TypeString, value)
	}
	if euo.mutation.VenueNameCleared() {
		_spec.ClearField(event.FieldVenueName, field.TypeString)
	}
	if value, ok := euo.mutation.VenueAddress(); ok {
		_spec.SetField(event.FieldVenueAddress, field.TypeString, value)
	}
	if euo.mutation.VenueAddressCleared() {
		_spec.ClearField(event.FieldVenueAddress, field.TypeString)
	}
	if value, ok := euo.mutation.VenueCity(); ok {
		_spec.SetField(event.FieldVenueCity, field.TypeString, value)
	}
	if euo.mutation.VenueCityCleared() {
		_spec.ClearField(event.FieldVenueCity, field.TypeString)
	}
	if value, ok := euo.mutation.VenueState(); ok {
		_spec.SetField(event.FieldVenueState, field.TypeString, value)
	}
	if euo.mutation.VenueStateCleared() {
		_spec.ClearField(event.FieldVenueState, field.TypeString)
	}
	if value, ok := euo.mutation.VenueCountry(); ok {
		_spec.SetField(event.FieldVenueCountry, field.TypeString, value)
	}
	if euo.mutation.VenueCountryCleared() {
		_spec.ClearField(event.FieldVenueCountry, field.TypeString)
	}
	if value, ok := euo.mutation.VenueZip(); ok {
		_spec.SetField(event.FieldVenueZip, field.TypeString, value)
	}
	if euo.mutation.VenueZipCleared() {
		_spec.ClearField(event.FieldVenueZip, field.TypeString)
	}
	if value, ok := euo.mutation.VenueLat(); ok {
		_spec.SetField(event.FieldVenueLat, field.TypeString, value)
	}
	if euo.mutation.VenueLatCleared() {
		_spec.ClearField(event.FieldVenueLat, field.TypeString)
	}
	if value, ok := euo.mutation.VenueLon(); ok {
		_spec.SetField(event.FieldVenueLon, field.TypeString, value)
	}
	if euo.mutation.VenueLonCleared() {
		_spec.ClearField(event.FieldVenueLon, field.TypeString)
	}
	if value, ok := euo.mutation.VenueURL(); ok {
		_spec.SetField(event.FieldVenueURL, field.TypeString, value)
	}
	if euo.mutation.VenueURLCleared() {
		_spec.ClearField(event.FieldVenueURL, field.TypeString)
	}
	if value, ok := euo.mutation.VenuePhone(); ok {
		_spec.SetField(event.FieldVenuePhone, field.TypeString, value)
	}
	if euo.mutation.VenuePhoneCleared() {
		_spec.ClearField(event.FieldVenuePhone, field.TypeString)
	}
	if value, ok := euo.mutation.VenueEmail(); ok {
		_spec.SetField(event.FieldVenueEmail, field.TypeString, value)
	}
	if euo.mutation.VenueEmailCleared() {
		_spec.ClearField(event.FieldVenueEmail, field.TypeString)
	}
	if value, ok := euo.mutation.Tags(); ok {
		_spec.SetField(event.FieldTags, field.TypeString, value)
	}
	if euo.mutation.TagsCleared() {
		_spec.ClearField(event.FieldTags, field.TypeString)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(event.FieldDescription, field.TypeString)
	}
	if value, ok := euo.mutation.EventSettings(); ok {
		_spec.SetField(event.FieldEventSettings, field.TypeJSON, value)
	}
	if euo.mutation.EventSettingsCleared() {
		_spec.ClearField(event.FieldEventSettings, field.TypeJSON)
	}
	if value, ok := euo.mutation.CoverImage(); ok {
		_spec.SetField(event.FieldCoverImage, field.TypeString, value)
	}
	if euo.mutation.CoverImageCleared() {
		_spec.ClearField(event.FieldCoverImage, field.TypeString)
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.SetField(event.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.MapCoordinates(); ok {
		_spec.SetField(event.FieldMapCoordinates, field.TypeJSON, value)
	}
	if euo.mutation.MapCoordinatesCleared() {
		_spec.ClearField(event.FieldMapCoordinates, field.TypeJSON)
	}
	if value, ok := euo.mutation.Longitude(); ok {
		_spec.SetField(event.FieldLongitude, field.TypeString, value)
	}
	if euo.mutation.LongitudeCleared() {
		_spec.ClearField(event.FieldLongitude, field.TypeString)
	}
	if value, ok := euo.mutation.Latitude(); ok {
		_spec.SetField(event.FieldLatitude, field.TypeString, value)
	}
	if euo.mutation.LatitudeCleared() {
		_spec.ClearField(event.FieldLatitude, field.TypeString)
	}
	if value, ok := euo.mutation.SearchText(); ok {
		_spec.SetField(event.FieldSearchText, field.TypeString, value)
	}
	if euo.mutation.SearchTextCleared() {
		_spec.ClearField(event.FieldSearchText, field.TypeString)
	}
	if value, ok := euo.mutation.RelevanceScore(); ok {
		_spec.SetField(event.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedRelevanceScore(); ok {
		_spec.AddField(event.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if euo.mutation.RelevanceScoreCleared() {
		_spec.ClearField(event.FieldRelevanceScore, field.TypeFloat64)
	}
	if value, ok := euo.mutation.FollowersCount(); ok {
		_spec.SetField(event.FieldFollowersCount, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedFollowersCount(); ok {
		_spec.AddField(event.FieldFollowersCount, field.TypeInt, value)
	}
	if value, ok := euo.mutation.FollowingCount(); ok {
		_spec.SetField(event.FieldFollowingCount, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedFollowingCount(); ok {
		_spec.AddField(event.FieldFollowingCount, field.TypeInt, value)
	}
	if value, ok := euo.mutation.LikesCount(); ok {
		_spec.SetField(event.FieldLikesCount, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedLikesCount(); ok {
		_spec.AddField(event.FieldLikesCount, field.TypeInt, value)
	}
	if euo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketsTable,
			Columns: []string{event.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !euo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketsTable,
			Columns: []string{event.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketsTable,
			Columns: []string{event.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.TicketOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketOptionsTable,
			Columns: []string{event.TicketOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedTicketOptionsIDs(); len(nodes) > 0 && !euo.mutation.TicketOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketOptionsTable,
			Columns: []string{event.TicketOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TicketOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketOptionsTable,
			Columns: []string{event.TicketOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.PlaceTable,
			Columns: []string{event.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedPlaceIDs(); len(nodes) > 0 && !euo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.PlaceTable,
			Columns: []string{event.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.PlaceTable,
			Columns: []string{event.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EventCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventCategoriesTable,
			Columns: []string{event.EventCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEventCategoriesIDs(); len(nodes) > 0 && !euo.mutation.EventCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventCategoriesTable,
			Columns: []string{event.EventCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EventCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventCategoriesTable,
			Columns: []string{event.EventCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EventCategoryAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventCategoryAssignmentsTable,
			Columns: []string{event.EventCategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEventCategoryAssignmentsIDs(); len(nodes) > 0 && !euo.mutation.EventCategoryAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventCategoryAssignmentsTable,
			Columns: []string{event.EventCategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EventCategoryAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventCategoryAssignmentsTable,
			Columns: []string{event.EventCategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.OwnerUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   event.OwnerUserTable,
			Columns: []string{event.OwnerUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OwnerUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   event.OwnerUserTable,
			Columns: []string{event.OwnerUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.OwnerBusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.OwnerBusinessTable,
			Columns: []string{event.OwnerBusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OwnerBusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.OwnerBusinessTable,
			Columns: []string{event.OwnerBusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.UserFollowersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.UserFollowersTable,
			Columns: []string{event.UserFollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedUserFollowersIDs(); len(nodes) > 0 && !euo.mutation.UserFollowersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.UserFollowersTable,
			Columns: []string{event.UserFollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserFollowersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.UserFollowersTable,
			Columns: []string{event.UserFollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.BusinessFollowersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.BusinessFollowersTable,
			Columns: []string{event.BusinessFollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedBusinessFollowersIDs(); len(nodes) > 0 && !euo.mutation.BusinessFollowersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.BusinessFollowersTable,
			Columns: []string{event.BusinessFollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.BusinessFollowersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.BusinessFollowersTable,
			Columns: []string{event.BusinessFollowersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.FaqsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FaqsTable,
			Columns: event.FaqsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faq.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedFaqsIDs(); len(nodes) > 0 && !euo.mutation.FaqsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FaqsTable,
			Columns: event.FaqsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faq.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FaqsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FaqsTable,
			Columns: event.FaqsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faq.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.RatingsTable,
			Columns: []string{event.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedRatingsIDs(); len(nodes) > 0 && !euo.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.RatingsTable,
			Columns: []string{event.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RatingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.RatingsTable,
			Columns: []string{event.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
