// Code generated by ent, DO NOT EDIT.

package user

import (
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldID, id))
}

// Auth0ID applies equality check predicate on the "auth0_id" field. It's identical to Auth0IDEQ.
func Auth0ID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAuth0ID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Picture applies equality check predicate on the "picture" field. It's identical to PictureEQ.
func Picture(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPicture, v))
}

// CoverImage applies equality check predicate on the "cover_image" field. It's identical to CoverImageEQ.
func CoverImage(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCoverImage, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// Website applies equality check predicate on the "website" field. It's identical to WebsiteEQ.
func Website(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWebsite, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLocation, v))
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLongitude, v))
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLatitude, v))
}

// Bio applies equality check predicate on the "bio" field. It's identical to BioEQ.
func Bio(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBio, v))
}

// SearchText applies equality check predicate on the "search_text" field. It's identical to SearchTextEQ.
func SearchText(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSearchText, v))
}

// RelevanceScore applies equality check predicate on the "relevance_score" field. It's identical to RelevanceScoreEQ.
func RelevanceScore(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRelevanceScore, v))
}

// FollowersCount applies equality check predicate on the "followers_count" field. It's identical to FollowersCountEQ.
func FollowersCount(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowersCount, v))
}

// FollowingCount applies equality check predicate on the "following_count" field. It's identical to FollowingCountEQ.
func FollowingCount(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowingCount, v))
}

// PostsCount applies equality check predicate on the "posts_count" field. It's identical to PostsCountEQ.
func PostsCount(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPostsCount, v))
}

// ReviewsCount applies equality check predicate on the "reviews_count" field. It's identical to ReviewsCountEQ.
func ReviewsCount(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldReviewsCount, v))
}

// LikesCount applies equality check predicate on the "likes_count" field. It's identical to LikesCountEQ.
func LikesCount(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLikesCount, v))
}

// Auth0IDEQ applies the EQ predicate on the "auth0_id" field.
func Auth0IDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAuth0ID, v))
}

// Auth0IDNEQ applies the NEQ predicate on the "auth0_id" field.
func Auth0IDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAuth0ID, v))
}

// Auth0IDIn applies the In predicate on the "auth0_id" field.
func Auth0IDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAuth0ID, vs...))
}

// Auth0IDNotIn applies the NotIn predicate on the "auth0_id" field.
func Auth0IDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAuth0ID, vs...))
}

// Auth0IDGT applies the GT predicate on the "auth0_id" field.
func Auth0IDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAuth0ID, v))
}

// Auth0IDGTE applies the GTE predicate on the "auth0_id" field.
func Auth0IDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAuth0ID, v))
}

// Auth0IDLT applies the LT predicate on the "auth0_id" field.
func Auth0IDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAuth0ID, v))
}

// Auth0IDLTE applies the LTE predicate on the "auth0_id" field.
func Auth0IDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAuth0ID, v))
}

// Auth0IDContains applies the Contains predicate on the "auth0_id" field.
func Auth0IDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAuth0ID, v))
}

// Auth0IDHasPrefix applies the HasPrefix predicate on the "auth0_id" field.
func Auth0IDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAuth0ID, v))
}

// Auth0IDHasSuffix applies the HasSuffix predicate on the "auth0_id" field.
func Auth0IDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAuth0ID, v))
}

// Auth0IDEqualFold applies the EqualFold predicate on the "auth0_id" field.
func Auth0IDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAuth0ID, v))
}

// Auth0IDContainsFold applies the ContainsFold predicate on the "auth0_id" field.
func Auth0IDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAuth0ID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// PictureEQ applies the EQ predicate on the "picture" field.
func PictureEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPicture, v))
}

// PictureNEQ applies the NEQ predicate on the "picture" field.
func PictureNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPicture, v))
}

// PictureIn applies the In predicate on the "picture" field.
func PictureIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPicture, vs...))
}

// PictureNotIn applies the NotIn predicate on the "picture" field.
func PictureNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPicture, vs...))
}

// PictureGT applies the GT predicate on the "picture" field.
func PictureGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPicture, v))
}

// PictureGTE applies the GTE predicate on the "picture" field.
func PictureGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPicture, v))
}

// PictureLT applies the LT predicate on the "picture" field.
func PictureLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPicture, v))
}

// PictureLTE applies the LTE predicate on the "picture" field.
func PictureLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPicture, v))
}

// PictureContains applies the Contains predicate on the "picture" field.
func PictureContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPicture, v))
}

// PictureHasPrefix applies the HasPrefix predicate on the "picture" field.
func PictureHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPicture, v))
}

// PictureHasSuffix applies the HasSuffix predicate on the "picture" field.
func PictureHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPicture, v))
}

// PictureIsNil applies the IsNil predicate on the "picture" field.
func PictureIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPicture))
}

// PictureNotNil applies the NotNil predicate on the "picture" field.
func PictureNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPicture))
}

// PictureEqualFold applies the EqualFold predicate on the "picture" field.
func PictureEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPicture, v))
}

// PictureContainsFold applies the ContainsFold predicate on the "picture" field.
func PictureContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPicture, v))
}

// CoverImageEQ applies the EQ predicate on the "cover_image" field.
func CoverImageEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCoverImage, v))
}

// CoverImageNEQ applies the NEQ predicate on the "cover_image" field.
func CoverImageNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCoverImage, v))
}

// CoverImageIn applies the In predicate on the "cover_image" field.
func CoverImageIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCoverImage, vs...))
}

// CoverImageNotIn applies the NotIn predicate on the "cover_image" field.
func CoverImageNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCoverImage, vs...))
}

// CoverImageGT applies the GT predicate on the "cover_image" field.
func CoverImageGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCoverImage, v))
}

// CoverImageGTE applies the GTE predicate on the "cover_image" field.
func CoverImageGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCoverImage, v))
}

// CoverImageLT applies the LT predicate on the "cover_image" field.
func CoverImageLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCoverImage, v))
}

// CoverImageLTE applies the LTE predicate on the "cover_image" field.
func CoverImageLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCoverImage, v))
}

// CoverImageContains applies the Contains predicate on the "cover_image" field.
func CoverImageContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCoverImage, v))
}

// CoverImageHasPrefix applies the HasPrefix predicate on the "cover_image" field.
func CoverImageHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCoverImage, v))
}

// CoverImageHasSuffix applies the HasSuffix predicate on the "cover_image" field.
func CoverImageHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCoverImage, v))
}

// CoverImageIsNil applies the IsNil predicate on the "cover_image" field.
func CoverImageIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCoverImage))
}

// CoverImageNotNil applies the NotNil predicate on the "cover_image" field.
func CoverImageNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCoverImage))
}

// CoverImageEqualFold applies the EqualFold predicate on the "cover_image" field.
func CoverImageEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCoverImage, v))
}

// CoverImageContainsFold applies the ContainsFold predicate on the "cover_image" field.
func CoverImageContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCoverImage, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// WebsiteEQ applies the EQ predicate on the "website" field.
func WebsiteEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWebsite, v))
}

// WebsiteNEQ applies the NEQ predicate on the "website" field.
func WebsiteNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldWebsite, v))
}

// WebsiteIn applies the In predicate on the "website" field.
func WebsiteIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldWebsite, vs...))
}

// WebsiteNotIn applies the NotIn predicate on the "website" field.
func WebsiteNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldWebsite, vs...))
}

// WebsiteGT applies the GT predicate on the "website" field.
func WebsiteGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldWebsite, v))
}

// WebsiteGTE applies the GTE predicate on the "website" field.
func WebsiteGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldWebsite, v))
}

// WebsiteLT applies the LT predicate on the "website" field.
func WebsiteLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldWebsite, v))
}

// WebsiteLTE applies the LTE predicate on the "website" field.
func WebsiteLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldWebsite, v))
}

// WebsiteContains applies the Contains predicate on the "website" field.
func WebsiteContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldWebsite, v))
}

// WebsiteHasPrefix applies the HasPrefix predicate on the "website" field.
func WebsiteHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldWebsite, v))
}

// WebsiteHasSuffix applies the HasSuffix predicate on the "website" field.
func WebsiteHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldWebsite, v))
}

// WebsiteIsNil applies the IsNil predicate on the "website" field.
func WebsiteIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldWebsite))
}

// WebsiteNotNil applies the NotNil predicate on the "website" field.
func WebsiteNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldWebsite))
}

// WebsiteEqualFold applies the EqualFold predicate on the "website" field.
func WebsiteEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldWebsite, v))
}

// WebsiteContainsFold applies the ContainsFold predicate on the "website" field.
func WebsiteContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldWebsite, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLocation, v))
}

// MapCoordinatesIsNil applies the IsNil predicate on the "map_coordinates" field.
func MapCoordinatesIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldMapCoordinates))
}

// MapCoordinatesNotNil applies the NotNil predicate on the "map_coordinates" field.
func MapCoordinatesNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldMapCoordinates))
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLongitude, v))
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLongitude, v))
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLongitude, vs...))
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLongitude, vs...))
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLongitude, v))
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLongitude, v))
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLongitude, v))
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLongitude, v))
}

// LongitudeContains applies the Contains predicate on the "longitude" field.
func LongitudeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLongitude, v))
}

// LongitudeHasPrefix applies the HasPrefix predicate on the "longitude" field.
func LongitudeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLongitude, v))
}

// LongitudeHasSuffix applies the HasSuffix predicate on the "longitude" field.
func LongitudeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLongitude, v))
}

// LongitudeIsNil applies the IsNil predicate on the "longitude" field.
func LongitudeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLongitude))
}

// LongitudeNotNil applies the NotNil predicate on the "longitude" field.
func LongitudeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLongitude))
}

// LongitudeEqualFold applies the EqualFold predicate on the "longitude" field.
func LongitudeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLongitude, v))
}

// LongitudeContainsFold applies the ContainsFold predicate on the "longitude" field.
func LongitudeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLongitude, v))
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLatitude, v))
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLatitude, v))
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLatitude, vs...))
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLatitude, vs...))
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLatitude, v))
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLatitude, v))
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLatitude, v))
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLatitude, v))
}

// LatitudeContains applies the Contains predicate on the "latitude" field.
func LatitudeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLatitude, v))
}

// LatitudeHasPrefix applies the HasPrefix predicate on the "latitude" field.
func LatitudeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLatitude, v))
}

// LatitudeHasSuffix applies the HasSuffix predicate on the "latitude" field.
func LatitudeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLatitude, v))
}

// LatitudeIsNil applies the IsNil predicate on the "latitude" field.
func LatitudeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLatitude))
}

// LatitudeNotNil applies the NotNil predicate on the "latitude" field.
func LatitudeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLatitude))
}

// LatitudeEqualFold applies the EqualFold predicate on the "latitude" field.
func LatitudeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLatitude, v))
}

// LatitudeContainsFold applies the ContainsFold predicate on the "latitude" field.
func LatitudeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLatitude, v))
}

// BioEQ applies the EQ predicate on the "bio" field.
func BioEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBio, v))
}

// BioNEQ applies the NEQ predicate on the "bio" field.
func BioNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBio, v))
}

// BioIn applies the In predicate on the "bio" field.
func BioIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldBio, vs...))
}

// BioNotIn applies the NotIn predicate on the "bio" field.
func BioNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBio, vs...))
}

// BioGT applies the GT predicate on the "bio" field.
func BioGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldBio, v))
}

// BioGTE applies the GTE predicate on the "bio" field.
func BioGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBio, v))
}

// BioLT applies the LT predicate on the "bio" field.
func BioLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldBio, v))
}

// BioLTE applies the LTE predicate on the "bio" field.
func BioLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBio, v))
}

// BioContains applies the Contains predicate on the "bio" field.
func BioContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldBio, v))
}

// BioHasPrefix applies the HasPrefix predicate on the "bio" field.
func BioHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldBio, v))
}

// BioHasSuffix applies the HasSuffix predicate on the "bio" field.
func BioHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldBio, v))
}

// BioIsNil applies the IsNil predicate on the "bio" field.
func BioIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBio))
}

// BioNotNil applies the NotNil predicate on the "bio" field.
func BioNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBio))
}

// BioEqualFold applies the EqualFold predicate on the "bio" field.
func BioEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldBio, v))
}

// BioContainsFold applies the ContainsFold predicate on the "bio" field.
func BioContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldBio, v))
}

// Auth0DataIsNil applies the IsNil predicate on the "auth0_data" field.
func Auth0DataIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAuth0Data))
}

// Auth0DataNotNil applies the NotNil predicate on the "auth0_data" field.
func Auth0DataNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAuth0Data))
}

// AppSettingsIsNil applies the IsNil predicate on the "app_settings" field.
func AppSettingsIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAppSettings))
}

// AppSettingsNotNil applies the NotNil predicate on the "app_settings" field.
func AppSettingsNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAppSettings))
}

// UserSettingsIsNil applies the IsNil predicate on the "user_settings" field.
func UserSettingsIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUserSettings))
}

// UserSettingsNotNil applies the NotNil predicate on the "user_settings" field.
func UserSettingsNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUserSettings))
}

// SearchTextEQ applies the EQ predicate on the "search_text" field.
func SearchTextEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSearchText, v))
}

// SearchTextNEQ applies the NEQ predicate on the "search_text" field.
func SearchTextNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSearchText, v))
}

// SearchTextIn applies the In predicate on the "search_text" field.
func SearchTextIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSearchText, vs...))
}

// SearchTextNotIn applies the NotIn predicate on the "search_text" field.
func SearchTextNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSearchText, vs...))
}

// SearchTextGT applies the GT predicate on the "search_text" field.
func SearchTextGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSearchText, v))
}

// SearchTextGTE applies the GTE predicate on the "search_text" field.
func SearchTextGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSearchText, v))
}

// SearchTextLT applies the LT predicate on the "search_text" field.
func SearchTextLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSearchText, v))
}

// SearchTextLTE applies the LTE predicate on the "search_text" field.
func SearchTextLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSearchText, v))
}

// SearchTextContains applies the Contains predicate on the "search_text" field.
func SearchTextContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSearchText, v))
}

// SearchTextHasPrefix applies the HasPrefix predicate on the "search_text" field.
func SearchTextHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSearchText, v))
}

// SearchTextHasSuffix applies the HasSuffix predicate on the "search_text" field.
func SearchTextHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSearchText, v))
}

// SearchTextIsNil applies the IsNil predicate on the "search_text" field.
func SearchTextIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldSearchText))
}

// SearchTextNotNil applies the NotNil predicate on the "search_text" field.
func SearchTextNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldSearchText))
}

// SearchTextEqualFold applies the EqualFold predicate on the "search_text" field.
func SearchTextEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSearchText, v))
}

// SearchTextContainsFold applies the ContainsFold predicate on the "search_text" field.
func SearchTextContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSearchText, v))
}

// RelevanceScoreEQ applies the EQ predicate on the "relevance_score" field.
func RelevanceScoreEQ(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRelevanceScore, v))
}

// RelevanceScoreNEQ applies the NEQ predicate on the "relevance_score" field.
func RelevanceScoreNEQ(v float64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRelevanceScore, v))
}

// RelevanceScoreIn applies the In predicate on the "relevance_score" field.
func RelevanceScoreIn(vs ...float64) predicate.User {
	return predicate.User(sql.FieldIn(FieldRelevanceScore, vs...))
}

// RelevanceScoreNotIn applies the NotIn predicate on the "relevance_score" field.
func RelevanceScoreNotIn(vs ...float64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRelevanceScore, vs...))
}

// RelevanceScoreGT applies the GT predicate on the "relevance_score" field.
func RelevanceScoreGT(v float64) predicate.User {
	return predicate.User(sql.FieldGT(FieldRelevanceScore, v))
}

// RelevanceScoreGTE applies the GTE predicate on the "relevance_score" field.
func RelevanceScoreGTE(v float64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRelevanceScore, v))
}

// RelevanceScoreLT applies the LT predicate on the "relevance_score" field.
func RelevanceScoreLT(v float64) predicate.User {
	return predicate.User(sql.FieldLT(FieldRelevanceScore, v))
}

// RelevanceScoreLTE applies the LTE predicate on the "relevance_score" field.
func RelevanceScoreLTE(v float64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRelevanceScore, v))
}

// RelevanceScoreIsNil applies the IsNil predicate on the "relevance_score" field.
func RelevanceScoreIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldRelevanceScore))
}

// RelevanceScoreNotNil applies the NotNil predicate on the "relevance_score" field.
func RelevanceScoreNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldRelevanceScore))
}

// FollowersCountEQ applies the EQ predicate on the "followers_count" field.
func FollowersCountEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowersCount, v))
}

// FollowersCountNEQ applies the NEQ predicate on the "followers_count" field.
func FollowersCountNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFollowersCount, v))
}

// FollowersCountIn applies the In predicate on the "followers_count" field.
func FollowersCountIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldFollowersCount, vs...))
}

// FollowersCountNotIn applies the NotIn predicate on the "followers_count" field.
func FollowersCountNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFollowersCount, vs...))
}

// FollowersCountGT applies the GT predicate on the "followers_count" field.
func FollowersCountGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldFollowersCount, v))
}

// FollowersCountGTE applies the GTE predicate on the "followers_count" field.
func FollowersCountGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFollowersCount, v))
}

// FollowersCountLT applies the LT predicate on the "followers_count" field.
func FollowersCountLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldFollowersCount, v))
}

// FollowersCountLTE applies the LTE predicate on the "followers_count" field.
func FollowersCountLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFollowersCount, v))
}

// FollowingCountEQ applies the EQ predicate on the "following_count" field.
func FollowingCountEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowingCount, v))
}

// FollowingCountNEQ applies the NEQ predicate on the "following_count" field.
func FollowingCountNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFollowingCount, v))
}

// FollowingCountIn applies the In predicate on the "following_count" field.
func FollowingCountIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldFollowingCount, vs...))
}

// FollowingCountNotIn applies the NotIn predicate on the "following_count" field.
func FollowingCountNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFollowingCount, vs...))
}

// FollowingCountGT applies the GT predicate on the "following_count" field.
func FollowingCountGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldFollowingCount, v))
}

// FollowingCountGTE applies the GTE predicate on the "following_count" field.
func FollowingCountGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFollowingCount, v))
}

// FollowingCountLT applies the LT predicate on the "following_count" field.
func FollowingCountLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldFollowingCount, v))
}

// FollowingCountLTE applies the LTE predicate on the "following_count" field.
func FollowingCountLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFollowingCount, v))
}

// PostsCountEQ applies the EQ predicate on the "posts_count" field.
func PostsCountEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPostsCount, v))
}

// PostsCountNEQ applies the NEQ predicate on the "posts_count" field.
func PostsCountNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPostsCount, v))
}

// PostsCountIn applies the In predicate on the "posts_count" field.
func PostsCountIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldPostsCount, vs...))
}

// PostsCountNotIn applies the NotIn predicate on the "posts_count" field.
func PostsCountNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPostsCount, vs...))
}

// PostsCountGT applies the GT predicate on the "posts_count" field.
func PostsCountGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldPostsCount, v))
}

// PostsCountGTE applies the GTE predicate on the "posts_count" field.
func PostsCountGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPostsCount, v))
}

// PostsCountLT applies the LT predicate on the "posts_count" field.
func PostsCountLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldPostsCount, v))
}

// PostsCountLTE applies the LTE predicate on the "posts_count" field.
func PostsCountLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPostsCount, v))
}

// ReviewsCountEQ applies the EQ predicate on the "reviews_count" field.
func ReviewsCountEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldReviewsCount, v))
}

// ReviewsCountNEQ applies the NEQ predicate on the "reviews_count" field.
func ReviewsCountNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldReviewsCount, v))
}

// ReviewsCountIn applies the In predicate on the "reviews_count" field.
func ReviewsCountIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldReviewsCount, vs...))
}

// ReviewsCountNotIn applies the NotIn predicate on the "reviews_count" field.
func ReviewsCountNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldReviewsCount, vs...))
}

// ReviewsCountGT applies the GT predicate on the "reviews_count" field.
func ReviewsCountGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldReviewsCount, v))
}

// ReviewsCountGTE applies the GTE predicate on the "reviews_count" field.
func ReviewsCountGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldReviewsCount, v))
}

// ReviewsCountLT applies the LT predicate on the "reviews_count" field.
func ReviewsCountLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldReviewsCount, v))
}

// ReviewsCountLTE applies the LTE predicate on the "reviews_count" field.
func ReviewsCountLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldReviewsCount, v))
}

// LikesCountEQ applies the EQ predicate on the "likes_count" field.
func LikesCountEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLikesCount, v))
}

// LikesCountNEQ applies the NEQ predicate on the "likes_count" field.
func LikesCountNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLikesCount, v))
}

// LikesCountIn applies the In predicate on the "likes_count" field.
func LikesCountIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldLikesCount, vs...))
}

// LikesCountNotIn applies the NotIn predicate on the "likes_count" field.
func LikesCountNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLikesCount, vs...))
}

// LikesCountGT applies the GT predicate on the "likes_count" field.
func LikesCountGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldLikesCount, v))
}

// LikesCountGTE applies the GTE predicate on the "likes_count" field.
func LikesCountGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLikesCount, v))
}

// LikesCountLT applies the LT predicate on the "likes_count" field.
func LikesCountLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldLikesCount, v))
}

// LikesCountLTE applies the LTE predicate on the "likes_count" field.
func LikesCountLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLikesCount, v))
}

// HasUserBusinesses applies the HasEdge predicate on the "userBusinesses" edge.
func HasUserBusinesses() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserBusinessesTable, UserBusinessesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserBusinessesWith applies the HasEdge predicate on the "userBusinesses" edge with a given conditions (other predicates).
func HasUserBusinessesWith(preds ...predicate.UserBusiness) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserBusinessesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasComments applies the HasEdge predicate on the "comments" edge.
func HasComments() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentsWith applies the HasEdge predicate on the "comments" edge with a given conditions (other predicates).
func HasCommentsWith(preds ...predicate.Comment) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCommentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLikes applies the HasEdge predicate on the "likes" edge.
func HasLikes() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LikesTable, LikesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLikesWith applies the HasEdge predicate on the "likes" edge with a given conditions (other predicates).
func HasLikesWith(preds ...predicate.Like) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newLikesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPosts applies the HasEdge predicate on the "posts" edge.
func HasPosts() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostsTable, PostsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostsWith applies the HasEdge predicate on the "posts" edge with a given conditions (other predicates).
func HasPostsWith(preds ...predicate.Post) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowedUsers applies the HasEdge predicate on the "followedUsers" edge.
func HasFollowedUsers() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FollowedUsersTable, FollowedUsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowedUsersWith applies the HasEdge predicate on the "followedUsers" edge with a given conditions (other predicates).
func HasFollowedUsersWith(preds ...predicate.UserFollowUser) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newFollowedUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowerUsers applies the HasEdge predicate on the "followerUsers" edge.
func HasFollowerUsers() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FollowerUsersTable, FollowerUsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowerUsersWith applies the HasEdge predicate on the "followerUsers" edge with a given conditions (other predicates).
func HasFollowerUsersWith(preds ...predicate.UserFollowUser) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newFollowerUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowedBusinesses applies the HasEdge predicate on the "followedBusinesses" edge.
func HasFollowedBusinesses() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FollowedBusinessesTable, FollowedBusinessesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowedBusinessesWith applies the HasEdge predicate on the "followedBusinesses" edge with a given conditions (other predicates).
func HasFollowedBusinessesWith(preds ...predicate.UserFollowBusiness) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newFollowedBusinessesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowerBusinesses applies the HasEdge predicate on the "followerBusinesses" edge.
func HasFollowerBusinesses() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FollowerBusinessesTable, FollowerBusinessesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowerBusinessesWith applies the HasEdge predicate on the "followerBusinesses" edge with a given conditions (other predicates).
func HasFollowerBusinessesWith(preds ...predicate.BusinessFollowUser) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newFollowerBusinessesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReviews applies the HasEdge predicate on the "reviews" edge.
func HasReviews() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReviewsTable, ReviewsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReviewsWith applies the HasEdge predicate on the "reviews" edge with a given conditions (other predicates).
func HasReviewsWith(preds ...predicate.Review) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newReviewsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBookings applies the HasEdge predicate on the "bookings" edge.
func HasBookings() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BookingsTable, BookingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBookingsWith applies the HasEdge predicate on the "bookings" edge with a given conditions (other predicates).
func HasBookingsWith(preds ...predicate.Booking) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newBookingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReservations applies the HasEdge predicate on the "reservations" edge.
func HasReservations() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReservationsTable, ReservationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReservationsWith applies the HasEdge predicate on the "reservations" edge with a given conditions (other predicates).
func HasReservationsWith(preds ...predicate.Reservation) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newReservationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHelps applies the HasEdge predicate on the "helps" edge.
func HasHelps() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HelpsTable, HelpsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHelpsWith applies the HasEdge predicate on the "helps" edge with a given conditions (other predicates).
func HasHelpsWith(preds ...predicate.Help) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newHelpsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategories applies the HasEdge predicate on the "categories" edge.
func HasCategories() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CategoriesTable, CategoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoriesWith applies the HasEdge predicate on the "categories" edge with a given conditions (other predicates).
func HasCategoriesWith(preds ...predicate.Category) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCategoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlaces applies the HasEdge predicate on the "places" edge.
func HasPlaces() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PlacesTable, PlacesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlacesWith applies the HasEdge predicate on the "places" edge with a given conditions (other predicates).
func HasPlacesWith(preds ...predicate.Place) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPlacesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategoryAssignments applies the HasEdge predicate on the "categoryAssignments" edge.
func HasCategoryAssignments() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CategoryAssignmentsTable, CategoryAssignmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoryAssignmentsWith applies the HasEdge predicate on the "categoryAssignments" edge with a given conditions (other predicates).
func HasCategoryAssignmentsWith(preds ...predicate.CategoryAssignment) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCategoryAssignmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwnedEvents applies the HasEdge predicate on the "ownedEvents" edge.
func HasOwnedEvents() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, OwnedEventsTable, OwnedEventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnedEventsWith applies the HasEdge predicate on the "ownedEvents" edge with a given conditions (other predicates).
func HasOwnedEventsWith(preds ...predicate.Event) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newOwnedEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserFollowEvents applies the HasEdge predicate on the "userFollowEvents" edge.
func HasUserFollowEvents() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserFollowEventsTable, UserFollowEventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserFollowEventsWith applies the HasEdge predicate on the "userFollowEvents" edge with a given conditions (other predicates).
func HasUserFollowEventsWith(preds ...predicate.UserFollowEvent) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserFollowEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowedPlaces applies the HasEdge predicate on the "followedPlaces" edge.
func HasFollowedPlaces() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FollowedPlacesTable, FollowedPlacesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowedPlacesWith applies the HasEdge predicate on the "followedPlaces" edge with a given conditions (other predicates).
func HasFollowedPlacesWith(preds ...predicate.UserFollowPlace) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newFollowedPlacesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLikedPlaces applies the HasEdge predicate on the "likedPlaces" edge.
func HasLikedPlaces() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LikedPlacesTable, LikedPlacesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLikedPlacesWith applies the HasEdge predicate on the "likedPlaces" edge with a given conditions (other predicates).
func HasLikedPlacesWith(preds ...predicate.UserLikePlace) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newLikedPlacesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRatings applies the HasEdge predicate on the "ratings" edge.
func HasRatings() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RatingsTable, RatingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRatingsWith applies the HasEdge predicate on the "ratings" edge with a given conditions (other predicates).
func HasRatingsWith(preds ...predicate.Rating) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newRatingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
