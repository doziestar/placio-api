// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountSettingsColumns holds the columns for the "account_settings" table.
	AccountSettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "two_factor_authentication", Type: field.TypeBool},
		{Name: "blocked_users", Type: field.TypeJSON},
		{Name: "muted_users", Type: field.TypeJSON},
		{Name: "business_business_account_settings", Type: field.TypeString, Unique: true, Size: 36},
	}
	// AccountSettingsTable holds the schema information for the "account_settings" table.
	AccountSettingsTable = &schema.Table{
		Name:       "account_settings",
		Columns:    AccountSettingsColumns,
		PrimaryKey: []*schema.Column{AccountSettingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "account_settings_businesses_business_account_settings",
				Columns:    []*schema.Column{AccountSettingsColumns[4]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// AccountWalletsColumns holds the columns for the "account_wallets" table.
	AccountWalletsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "balance", Type: field.TypeFloat64, Default: 0},
		{Name: "total_deposited", Type: field.TypeFloat64, Default: 0},
		{Name: "total_withdrawn", Type: field.TypeFloat64, Default: 0},
		{Name: "total_earned", Type: field.TypeFloat64, Default: 0},
		{Name: "total_spent", Type: field.TypeFloat64, Default: 0},
		{Name: "total_refunded", Type: field.TypeFloat64, Default: 0},
		{Name: "total_fees", Type: field.TypeFloat64, Default: 0},
		{Name: "total_tax", Type: field.TypeFloat64, Default: 0},
		{Name: "total_discount", Type: field.TypeFloat64, Default: 0},
		{Name: "total_revenue", Type: field.TypeFloat64, Default: 0},
		{Name: "total_expenses", Type: field.TypeFloat64, Default: 0},
		{Name: "total_profit", Type: field.TypeFloat64, Default: 0},
		{Name: "total_loss", Type: field.TypeFloat64, Default: 0},
		{Name: "business_wallet", Type: field.TypeString, Unique: true, Nullable: true, Size: 36},
		{Name: "user_wallet", Type: field.TypeString, Unique: true, Nullable: true, Size: 36},
	}
	// AccountWalletsTable holds the schema information for the "account_wallets" table.
	AccountWalletsTable = &schema.Table{
		Name:       "account_wallets",
		Columns:    AccountWalletsColumns,
		PrimaryKey: []*schema.Column{AccountWalletsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "account_wallets_businesses_wallet",
				Columns:    []*schema.Column{AccountWalletsColumns[14]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "account_wallets_users_wallet",
				Columns:    []*schema.Column{AccountWalletsColumns[15]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AmenitiesColumns holds the columns for the "amenities" table.
	AmenitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "icon", Type: field.TypeString},
	}
	// AmenitiesTable holds the schema information for the "amenities" table.
	AmenitiesTable = &schema.Table{
		Name:       "amenities",
		Columns:    AmenitiesColumns,
		PrimaryKey: []*schema.Column{AmenitiesColumns[0]},
	}
	// BookingsColumns holds the columns for the "bookings" table.
	BookingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "start_date", Type: field.TypeTime},
		{Name: "end_date", Type: field.TypeTime},
		{Name: "status", Type: field.TypeString},
		{Name: "booking_date", Type: field.TypeTime},
		{Name: "place_bookings", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "room_bookings", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_bookings", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// BookingsTable holds the schema information for the "bookings" table.
	BookingsTable = &schema.Table{
		Name:       "bookings",
		Columns:    BookingsColumns,
		PrimaryKey: []*schema.Column{BookingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "bookings_places_bookings",
				Columns:    []*schema.Column{BookingsColumns[5]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "bookings_rooms_bookings",
				Columns:    []*schema.Column{BookingsColumns[6]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "bookings_users_bookings",
				Columns:    []*schema.Column{BookingsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// BusinessesColumns holds the columns for the "businesses" table.
	BusinessesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "picture", Type: field.TypeString, Nullable: true},
		{Name: "cover_image", Type: field.TypeString, Nullable: true, Default: "https://res.cloudinary.com/placio/image/upload/v1686842319/mjl8stmbn5xmfsm50vbg.jpg"},
		{Name: "website", Type: field.TypeString, Nullable: true},
		{Name: "location", Type: field.TypeString, Nullable: true},
		{Name: "longitude", Type: field.TypeString, Nullable: true},
		{Name: "map_coordinates", Type: field.TypeJSON, Nullable: true},
		{Name: "latitude", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "phone", Type: field.TypeString, Nullable: true},
		{Name: "business_settings", Type: field.TypeJSON, Nullable: true},
		{Name: "url", Type: field.TypeString, Nullable: true},
		{Name: "search_text", Type: field.TypeString, Nullable: true},
		{Name: "relevance_score", Type: field.TypeFloat64, Nullable: true},
		{Name: "follower_count", Type: field.TypeInt, Default: 0},
		{Name: "following_count", Type: field.TypeInt, Default: 0},
	}
	// BusinessesTable holds the schema information for the "businesses" table.
	BusinessesTable = &schema.Table{
		Name:       "businesses",
		Columns:    BusinessesColumns,
		PrimaryKey: []*schema.Column{BusinessesColumns[0]},
	}
	// BusinessFollowBusinessesColumns holds the columns for the "business_follow_businesses" table.
	BusinessFollowBusinessesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "business_followed_businesses", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "business_follower_businesses", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// BusinessFollowBusinessesTable holds the schema information for the "business_follow_businesses" table.
	BusinessFollowBusinessesTable = &schema.Table{
		Name:       "business_follow_businesses",
		Columns:    BusinessFollowBusinessesColumns,
		PrimaryKey: []*schema.Column{BusinessFollowBusinessesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "business_follow_businesses_businesses_followedBusinesses",
				Columns:    []*schema.Column{BusinessFollowBusinessesColumns[3]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "business_follow_businesses_businesses_followerBusinesses",
				Columns:    []*schema.Column{BusinessFollowBusinessesColumns[4]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// BusinessFollowEventsColumns holds the columns for the "business_follow_events" table.
	BusinessFollowEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "business_business_follow_events", Type: field.TypeString, Size: 36},
		{Name: "business_follow_event_event", Type: field.TypeString},
	}
	// BusinessFollowEventsTable holds the schema information for the "business_follow_events" table.
	BusinessFollowEventsTable = &schema.Table{
		Name:       "business_follow_events",
		Columns:    BusinessFollowEventsColumns,
		PrimaryKey: []*schema.Column{BusinessFollowEventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "business_follow_events_businesses_businessFollowEvents",
				Columns:    []*schema.Column{BusinessFollowEventsColumns[3]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "business_follow_events_events_event",
				Columns:    []*schema.Column{BusinessFollowEventsColumns[4]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BusinessFollowUsersColumns holds the columns for the "business_follow_users" table.
	BusinessFollowUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "business_followed_users", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_follower_businesses", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// BusinessFollowUsersTable holds the schema information for the "business_follow_users" table.
	BusinessFollowUsersTable = &schema.Table{
		Name:       "business_follow_users",
		Columns:    BusinessFollowUsersColumns,
		PrimaryKey: []*schema.Column{BusinessFollowUsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "business_follow_users_businesses_followedUsers",
				Columns:    []*schema.Column{BusinessFollowUsersColumns[3]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "business_follow_users_users_followerBusinesses",
				Columns:    []*schema.Column{BusinessFollowUsersColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CategoriesColumns holds the columns for the "categories" table.
	CategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "image", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "icon", Type: field.TypeString, Nullable: true},
		{Name: "type", Type: field.TypeString, Nullable: true},
		{Name: "parent_id", Type: field.TypeString, Nullable: true},
		{Name: "parent_name", Type: field.TypeString, Nullable: true},
		{Name: "parent_image", Type: field.TypeString, Nullable: true},
		{Name: "parent_description", Type: field.TypeString, Nullable: true},
		{Name: "business_categories", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "event_event_categories", Type: field.TypeString, Nullable: true},
		{Name: "place_categories", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "post_categories", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_categories", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// CategoriesTable holds the schema information for the "categories" table.
	CategoriesTable = &schema.Table{
		Name:       "categories",
		Columns:    CategoriesColumns,
		PrimaryKey: []*schema.Column{CategoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "categories_businesses_categories",
				Columns:    []*schema.Column{CategoriesColumns[10]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "categories_events_event_categories",
				Columns:    []*schema.Column{CategoriesColumns[11]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "categories_places_categories",
				Columns:    []*schema.Column{CategoriesColumns[12]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "categories_posts_categories",
				Columns:    []*schema.Column{CategoriesColumns[13]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "categories_users_categories",
				Columns:    []*schema.Column{CategoriesColumns[14]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CategoryAssignmentsColumns holds the columns for the "category_assignments" table.
	CategoryAssignmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "entity_type", Type: field.TypeString, Nullable: true},
		{Name: "entity_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "category_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "event_event_category_assignments", Type: field.TypeString, Nullable: true},
	}
	// CategoryAssignmentsTable holds the schema information for the "category_assignments" table.
	CategoryAssignmentsTable = &schema.Table{
		Name:       "category_assignments",
		Columns:    CategoryAssignmentsColumns,
		PrimaryKey: []*schema.Column{CategoryAssignmentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "category_assignments_businesses_categoryAssignments",
				Columns:    []*schema.Column{CategoryAssignmentsColumns[2]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "category_assignments_categories_categoryAssignments",
				Columns:    []*schema.Column{CategoryAssignmentsColumns[3]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "category_assignments_events_event_category_assignments",
				Columns:    []*schema.Column{CategoryAssignmentsColumns[4]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "category_assignments_places_categoryAssignments",
				Columns:    []*schema.Column{CategoryAssignmentsColumns[2]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "category_assignments_users_categoryAssignments",
				Columns:    []*schema.Column{CategoryAssignmentsColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ChatsColumns holds the columns for the "chats" table.
	ChatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
	}
	// ChatsTable holds the schema information for the "chats" table.
	ChatsTable = &schema.Table{
		Name:       "chats",
		Columns:    ChatsColumns,
		PrimaryKey: []*schema.Column{ChatsColumns[0]},
	}
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "parent_comment_id", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "event_event_comments", Type: field.TypeString, Nullable: true},
		{Name: "post_comments", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "review_comments", Type: field.TypeString, Nullable: true},
		{Name: "user_comments", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comments_comments_replies",
				Columns:    []*schema.Column{CommentsColumns[4]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "comments_events_event_comments",
				Columns:    []*schema.Column{CommentsColumns[5]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "comments_posts_comments",
				Columns:    []*schema.Column{CommentsColumns[6]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "comments_reviews_comments",
				Columns:    []*schema.Column{CommentsColumns[7]},
				RefColumns: []*schema.Column{ReviewsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "comments_users_comments",
				Columns:    []*schema.Column{CommentsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CustomBlocksColumns holds the columns for the "custom_blocks" table.
	CustomBlocksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "content", Type: field.TypeString},
		{Name: "website_custom_blocks", Type: field.TypeString},
	}
	// CustomBlocksTable holds the schema information for the "custom_blocks" table.
	CustomBlocksTable = &schema.Table{
		Name:       "custom_blocks",
		Columns:    CustomBlocksColumns,
		PrimaryKey: []*schema.Column{CustomBlocksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "custom_blocks_websites_customBlocks",
				Columns:    []*schema.Column{CustomBlocksColumns[2]},
				RefColumns: []*schema.Column{WebsitesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// EventsColumns holds the columns for the "events" table.
	EventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "event_type", Type: field.TypeEnum, Nullable: true, Enums: []string{"event", "place", "business", "free", "paid"}},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "location", Type: field.TypeString, Nullable: true},
		{Name: "url", Type: field.TypeString, Nullable: true},
		{Name: "title", Type: field.TypeString, Nullable: true},
		{Name: "time_zone", Type: field.TypeString, Nullable: true},
		{Name: "start_time", Type: field.TypeTime, Nullable: true},
		{Name: "end_time", Type: field.TypeTime, Nullable: true},
		{Name: "start_date", Type: field.TypeString, Nullable: true},
		{Name: "end_date", Type: field.TypeString, Nullable: true},
		{Name: "frequency", Type: field.TypeEnum, Nullable: true, Enums: []string{"once", "daily", "weekly", "monthly", "yearly"}},
		{Name: "frequency_interval", Type: field.TypeString, Nullable: true},
		{Name: "frequency_day_of_week", Type: field.TypeString, Nullable: true},
		{Name: "frequency_day_of_month", Type: field.TypeString, Nullable: true},
		{Name: "frequency_month_of_year", Type: field.TypeString, Nullable: true},
		{Name: "venue_type", Type: field.TypeEnum, Nullable: true, Enums: []string{"online", "in_person", "hybrid"}},
		{Name: "venue_name", Type: field.TypeString, Nullable: true},
		{Name: "venue_address", Type: field.TypeString, Nullable: true},
		{Name: "venue_city", Type: field.TypeString, Nullable: true},
		{Name: "venue_state", Type: field.TypeString, Nullable: true},
		{Name: "venue_country", Type: field.TypeString, Nullable: true},
		{Name: "venue_zip", Type: field.TypeString, Nullable: true},
		{Name: "venue_lat", Type: field.TypeString, Nullable: true},
		{Name: "venue_lon", Type: field.TypeString, Nullable: true},
		{Name: "venue_url", Type: field.TypeString, Nullable: true},
		{Name: "venue_phone", Type: field.TypeString, Nullable: true},
		{Name: "venue_email", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "event_settings", Type: field.TypeJSON, Nullable: true},
		{Name: "cover_image", Type: field.TypeString, Nullable: true, Default: "https://res.cloudinary.com/placio/image/upload/v1686842319/mjl8stmbn5xmfsm50vbg.jpg"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "map_coordinates", Type: field.TypeJSON, Nullable: true},
		{Name: "longitude", Type: field.TypeString, Nullable: true},
		{Name: "latitude", Type: field.TypeString, Nullable: true},
		{Name: "search_text", Type: field.TypeString, Nullable: true},
		{Name: "relevance_score", Type: field.TypeFloat64, Nullable: true},
		{Name: "follower_count", Type: field.TypeInt, Default: 0},
		{Name: "following_count", Type: field.TypeInt, Default: 0},
		{Name: "is_premium", Type: field.TypeBool, Default: false},
		{Name: "is_published", Type: field.TypeBool, Default: false},
		{Name: "is_online", Type: field.TypeBool, Default: false},
		{Name: "is_cancelled", Type: field.TypeBool, Default: false},
		{Name: "is_active", Type: field.TypeBool, Default: false},
		{Name: "is_free", Type: field.TypeBool, Default: false},
		{Name: "is_paid", Type: field.TypeBool, Default: false},
		{Name: "is_public", Type: field.TypeBool, Default: false},
		{Name: "is_online_only", Type: field.TypeBool, Default: false},
		{Name: "is_in_person_only", Type: field.TypeBool, Default: false},
		{Name: "is_hybrid", Type: field.TypeBool, Default: false},
		{Name: "is_online_and_in_person", Type: field.TypeBool, Default: false},
		{Name: "is_online_and_in_person_only", Type: field.TypeBool, Default: false},
		{Name: "is_online_and_in_person_or_hybrid", Type: field.TypeBool, Default: false},
		{Name: "liked_by_current_user", Type: field.TypeBool, Default: false},
		{Name: "followed_by_current_user", Type: field.TypeBool, Default: false},
		{Name: "registration_type", Type: field.TypeEnum, Nullable: true, Enums: []string{"none", "required", "optional", "closed"}},
		{Name: "registration_url", Type: field.TypeString, Nullable: true},
		{Name: "is_physically_accessible", Type: field.TypeBool, Default: false},
		{Name: "accessibility_info", Type: field.TypeString, Nullable: true},
		{Name: "is_virtually_accessible", Type: field.TypeBool, Default: false},
		{Name: "business_events", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "place_events", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_owned_events", Type: field.TypeString, Unique: true, Nullable: true, Size: 36},
	}
	// EventsTable holds the schema information for the "events" table.
	EventsTable = &schema.Table{
		Name:       "events",
		Columns:    EventsColumns,
		PrimaryKey: []*schema.Column{EventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "events_businesses_events",
				Columns:    []*schema.Column{EventsColumns[63]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "events_places_events",
				Columns:    []*schema.Column{EventsColumns[64]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "events_users_ownedEvents",
				Columns:    []*schema.Column{EventsColumns[65]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// EventOrganizersColumns holds the columns for the "event_organizers" table.
	EventOrganizersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "organizer_id", Type: field.TypeString},
		{Name: "organizer_type", Type: field.TypeString},
		{Name: "event_event_organizers", Type: field.TypeString},
	}
	// EventOrganizersTable holds the schema information for the "event_organizers" table.
	EventOrganizersTable = &schema.Table{
		Name:       "event_organizers",
		Columns:    EventOrganizersColumns,
		PrimaryKey: []*schema.Column{EventOrganizersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "event_organizers_events_event_organizers",
				Columns:    []*schema.Column{EventOrganizersColumns[3]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// FaQsColumns holds the columns for the "fa_qs" table.
	FaQsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "question", Type: field.TypeString},
		{Name: "answer", Type: field.TypeString},
		{Name: "business_faqs", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// FaQsTable holds the schema information for the "fa_qs" table.
	FaQsTable = &schema.Table{
		Name:       "fa_qs",
		Columns:    FaQsColumns,
		PrimaryKey: []*schema.Column{FaQsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "fa_qs_businesses_faqs",
				Columns:    []*schema.Column{FaQsColumns[3]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// FeatureReleasesColumns holds the columns for the "feature_releases" table.
	FeatureReleasesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "feature_name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "state", Type: field.TypeEnum, Enums: []string{"testing", "staging", "live", "deprecated"}},
		{Name: "release_date", Type: field.TypeTime},
		{Name: "eligibility_rules", Type: field.TypeJSON, Nullable: true},
		{Name: "documentation_link", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
	}
	// FeatureReleasesTable holds the schema information for the "feature_releases" table.
	FeatureReleasesTable = &schema.Table{
		Name:       "feature_releases",
		Columns:    FeatureReleasesColumns,
		PrimaryKey: []*schema.Column{FeatureReleasesColumns[0]},
	}
	// FitnessesColumns holds the columns for the "fitnesses" table.
	FitnessesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "name", Type: field.TypeString},
	}
	// FitnessesTable holds the schema information for the "fitnesses" table.
	FitnessesTable = &schema.Table{
		Name:       "fitnesses",
		Columns:    FitnessesColumns,
		PrimaryKey: []*schema.Column{FitnessesColumns[0]},
	}
	// HelpsColumns holds the columns for the "helps" table.
	HelpsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "category", Type: field.TypeString},
		{Name: "subject", Type: field.TypeString},
		{Name: "body", Type: field.TypeString, Size: 2147483647},
		{Name: "media", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeString, Default: "open"},
		{Name: "user_id", Type: field.TypeString, Size: 36},
	}
	// HelpsTable holds the schema information for the "helps" table.
	HelpsTable = &schema.Table{
		Name:       "helps",
		Columns:    HelpsColumns,
		PrimaryKey: []*schema.Column{HelpsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "helps_users_helps",
				Columns:    []*schema.Column{HelpsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// InventoryAttributesColumns holds the columns for the "inventory_attributes" table.
	InventoryAttributesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "name", Type: field.TypeString},
		{Name: "image_url", Type: field.TypeString, Nullable: true},
		{Name: "icon_url", Type: field.TypeString, Nullable: true},
		{Name: "is_mandatory", Type: field.TypeBool, Default: false},
		{Name: "data_type", Type: field.TypeEnum, Nullable: true, Enums: []string{"string", "number", "boolean", "date", "enum"}},
		{Name: "inventory_type_attributes", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// InventoryAttributesTable holds the schema information for the "inventory_attributes" table.
	InventoryAttributesTable = &schema.Table{
		Name:       "inventory_attributes",
		Columns:    InventoryAttributesColumns,
		PrimaryKey: []*schema.Column{InventoryAttributesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "inventory_attributes_inventory_types_attributes",
				Columns:    []*schema.Column{InventoryAttributesColumns[6]},
				RefColumns: []*schema.Column{InventoryTypesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// InventoryTypesColumns holds the columns for the "inventory_types" table.
	InventoryTypesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "image_url", Type: field.TypeString, Nullable: true},
		{Name: "icon_url", Type: field.TypeString, Nullable: true},
		{Name: "industry_type", Type: field.TypeEnum, Nullable: true, Enums: []string{"hotel", "restaurant", "bar", "club", "gym", "events", "retail", "other"}},
		{Name: "measurement_unit", Type: field.TypeString, Nullable: true},
	}
	// InventoryTypesTable holds the schema information for the "inventory_types" table.
	InventoryTypesTable = &schema.Table{
		Name:       "inventory_types",
		Columns:    InventoryTypesColumns,
		PrimaryKey: []*schema.Column{InventoryTypesColumns[0]},
	}
	// LikesColumns holds the columns for the "likes" table.
	LikesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "like", Type: field.TypeBool},
		{Name: "like_review", Type: field.TypeString, Nullable: true},
		{Name: "like_media", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "like_post", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "post_likes", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "review_likes", Type: field.TypeString, Nullable: true},
		{Name: "user_likes", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// LikesTable holds the schema information for the "likes" table.
	LikesTable = &schema.Table{
		Name:       "likes",
		Columns:    LikesColumns,
		PrimaryKey: []*schema.Column{LikesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "likes_reviews_review",
				Columns:    []*schema.Column{LikesColumns[4]},
				RefColumns: []*schema.Column{ReviewsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "likes_media_media",
				Columns:    []*schema.Column{LikesColumns[5]},
				RefColumns: []*schema.Column{MediaColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "likes_posts_post",
				Columns:    []*schema.Column{LikesColumns[6]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "likes_posts_likes",
				Columns:    []*schema.Column{LikesColumns[7]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "likes_reviews_likes",
				Columns:    []*schema.Column{LikesColumns[8]},
				RefColumns: []*schema.Column{ReviewsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "likes_users_likes",
				Columns:    []*schema.Column{LikesColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MediaColumns holds the columns for the "media" table.
	MediaColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "url", Type: field.TypeString},
		{Name: "media_type", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "like_count", Type: field.TypeInt, Default: 0},
		{Name: "dislike_count", Type: field.TypeInt, Default: 0},
		{Name: "event_media", Type: field.TypeString, Nullable: true},
		{Name: "menu_item_media", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "plan_media", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "post_medias", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "review_medias", Type: field.TypeString, Nullable: true},
		{Name: "ticket_option_media", Type: field.TypeString, Nullable: true},
		{Name: "website_assets", Type: field.TypeString, Nullable: true},
	}
	// MediaTable holds the schema information for the "media" table.
	MediaTable = &schema.Table{
		Name:       "media",
		Columns:    MediaColumns,
		PrimaryKey: []*schema.Column{MediaColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "media_events_media",
				Columns:    []*schema.Column{MediaColumns[7]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "media_menu_items_media",
				Columns:    []*schema.Column{MediaColumns[8]},
				RefColumns: []*schema.Column{MenuItemsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "media_plans_media",
				Columns:    []*schema.Column{MediaColumns[9]},
				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "media_posts_medias",
				Columns:    []*schema.Column{MediaColumns[10]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "media_reviews_medias",
				Columns:    []*schema.Column{MediaColumns[11]},
				RefColumns: []*schema.Column{ReviewsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "media_ticket_options_media",
				Columns:    []*schema.Column{MediaColumns[12]},
				RefColumns: []*schema.Column{TicketOptionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "media_websites_assets",
				Columns:    []*schema.Column{MediaColumns[13]},
				RefColumns: []*schema.Column{WebsitesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MenusColumns holds the columns for the "menus" table.
	MenusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "name", Type: field.TypeString},
		{Name: "deleted_at", Type: field.TypeString, Nullable: true},
		{Name: "is_deleted", Type: field.TypeBool, Default: false},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "options", Type: field.TypeString, Nullable: true},
		{Name: "food_type", Type: field.TypeEnum, Nullable: true, Enums: []string{"local", "intercontinental", "national", "regional", "continental"}},
		{Name: "menu_item_type", Type: field.TypeEnum, Nullable: true, Enums: []string{"food", "drink"}},
		{Name: "drink_type", Type: field.TypeEnum, Nullable: true, Enums: []string{"alcoholic", "non-alcoholic", "both"}},
		{Name: "dietary_type", Type: field.TypeEnum, Nullable: true, Enums: []string{"vegan", "vegetarian", "non-vegetarian", "both"}},
		{Name: "is_available", Type: field.TypeBool, Default: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
	}
	// MenusTable holds the schema information for the "menus" table.
	MenusTable = &schema.Table{
		Name:       "menus",
		Columns:    MenusColumns,
		PrimaryKey: []*schema.Column{MenusColumns[0]},
	}
	// MenuItemsColumns holds the columns for the "menu_items" table.
	MenuItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "price", Type: field.TypeFloat64},
		{Name: "currency", Type: field.TypeString, Nullable: true},
		{Name: "is_available", Type: field.TypeBool, Default: true},
		{Name: "preparation_time", Type: field.TypeInt, Nullable: true},
		{Name: "options", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeString, Nullable: true},
		{Name: "type", Type: field.TypeEnum, Nullable: true, Enums: []string{"local", "intercontinental", "national", "regional", "continental"}},
		{Name: "status", Type: field.TypeEnum, Nullable: true, Enums: []string{"available", "unavailable"}},
		{Name: "drink_type", Type: field.TypeEnum, Nullable: true, Enums: []string{"alcoholic", "non-alcoholic", "both"}},
		{Name: "dietary_type", Type: field.TypeEnum, Nullable: true, Enums: []string{"vegan", "vegetarian", "non-vegetarian", "both"}},
		{Name: "is_deleted", Type: field.TypeBool, Default: false},
		{Name: "calories", Type: field.TypeInt, Nullable: true},
		{Name: "serve_size", Type: field.TypeInt, Nullable: true},
		{Name: "available_from", Type: field.TypeTime, Nullable: true},
		{Name: "available_until", Type: field.TypeTime, Nullable: true},
		{Name: "image_url", Type: field.TypeString, Nullable: true},
		{Name: "spiciness_level", Type: field.TypeEnum, Nullable: true, Enums: []string{"mild", "medium", "hot"}},
		{Name: "allergens", Type: field.TypeJSON, Nullable: true},
		{Name: "chef_special_note", Type: field.TypeString, Nullable: true},
		{Name: "rating", Type: field.TypeInt, Nullable: true},
		{Name: "review_count", Type: field.TypeInt, Nullable: true},
		{Name: "category", Type: field.TypeString, Nullable: true},
		{Name: "order_count", Type: field.TypeInt, Nullable: true},
		{Name: "sku", Type: field.TypeString, Nullable: true},
		{Name: "is_featured", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "is_new", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "is_seasonal", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "season", Type: field.TypeString, Nullable: true},
		{Name: "discount_percentage", Type: field.TypeInt, Nullable: true},
		{Name: "promotion_description", Type: field.TypeString, Nullable: true},
		{Name: "promotion_start", Type: field.TypeTime, Nullable: true},
		{Name: "promotion_end", Type: field.TypeTime, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "related_items", Type: field.TypeJSON, Nullable: true},
	}
	// MenuItemsTable holds the schema information for the "menu_items" table.
	MenuItemsTable = &schema.Table{
		Name:       "menu_items",
		Columns:    MenuItemsColumns,
		PrimaryKey: []*schema.Column{MenuItemsColumns[0]},
	}
	// NotificationsColumns holds the columns for the "notifications" table.
	NotificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "title", Type: field.TypeString, Size: 255},
		{Name: "message", Type: field.TypeString, Size: 255},
		{Name: "link", Type: field.TypeString, Size: 255},
		{Name: "is_read", Type: field.TypeBool, Default: false},
		{Name: "type", Type: field.TypeInt, Default: 0},
		{Name: "unread_count", Type: field.TypeInt, Default: 0},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "notifiable_type", Type: field.TypeString, Size: 255},
		{Name: "notifiable_id", Type: field.TypeString, Size: 36},
		{Name: "triggered_by", Type: field.TypeString, Size: 36},
		{Name: "triggered_to", Type: field.TypeString, Size: 36},
	}
	// NotificationsTable holds the schema information for the "notifications" table.
	NotificationsTable = &schema.Table{
		Name:       "notifications",
		Columns:    NotificationsColumns,
		PrimaryKey: []*schema.Column{NotificationsColumns[0]},
	}
	// OrdersColumns holds the columns for the "orders" table.
	OrdersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "confirmed", "completed", "cancelled"}, Default: "pending"},
		{Name: "total_amount", Type: field.TypeFloat64},
		{Name: "additional_info", Type: field.TypeJSON, Nullable: true},
		{Name: "deleted_at", Type: field.TypeString, Nullable: true},
		{Name: "is_deleted", Type: field.TypeBool, Default: false},
		{Name: "user_orders", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// OrdersTable holds the schema information for the "orders" table.
	OrdersTable = &schema.Table{
		Name:       "orders",
		Columns:    OrdersColumns,
		PrimaryKey: []*schema.Column{OrdersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "orders_users_orders",
				Columns:    []*schema.Column{OrdersColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrderItemsColumns holds the columns for the "order_items" table.
	OrderItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "quantity", Type: field.TypeInt, Default: 1},
		{Name: "price_per_item", Type: field.TypeFloat64},
		{Name: "total_price", Type: field.TypeFloat64, SchemaType: map[string]string{"postgres": "decimal"}},
		{Name: "options", Type: field.TypeJSON, Nullable: true},
	}
	// OrderItemsTable holds the schema information for the "order_items" table.
	OrderItemsTable = &schema.Table{
		Name:       "order_items",
		Columns:    OrderItemsColumns,
		PrimaryKey: []*schema.Column{OrderItemsColumns[0]},
	}
	// PaymentsColumns holds the columns for the "payments" table.
	PaymentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
	}
	// PaymentsTable holds the schema information for the "payments" table.
	PaymentsTable = &schema.Table{
		Name:       "payments",
		Columns:    PaymentsColumns,
		PrimaryKey: []*schema.Column{PaymentsColumns[0]},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
	}
	// PlacesColumns holds the columns for the "places" table.
	PlacesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "location", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "phone", Type: field.TypeString, Nullable: true},
		{Name: "website", Type: field.TypeString, Nullable: true},
		{Name: "cover_image", Type: field.TypeString, Nullable: true, Default: "https://res.cloudinary.com/placio/image/upload/v1686842319/mjl8stmbn5xmfsm50vbg.jpg"},
		{Name: "picture", Type: field.TypeString, Nullable: true},
		{Name: "country", Type: field.TypeString, Nullable: true},
		{Name: "city", Type: field.TypeString, Nullable: true},
		{Name: "state", Type: field.TypeString, Nullable: true},
		{Name: "place_settings", Type: field.TypeJSON, Nullable: true},
		{Name: "opening_hours", Type: field.TypeJSON, Nullable: true},
		{Name: "social_media", Type: field.TypeJSON, Nullable: true},
		{Name: "payment_options", Type: field.TypeJSON, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "features", Type: field.TypeJSON, Nullable: true},
		{Name: "additional_info", Type: field.TypeJSON, Nullable: true},
		{Name: "images", Type: field.TypeJSON, Nullable: true},
		{Name: "availability", Type: field.TypeJSON, Nullable: true},
		{Name: "special_offers", Type: field.TypeString, Nullable: true},
		{Name: "sustainability_score", Type: field.TypeFloat64, Nullable: true},
		{Name: "map_coordinates", Type: field.TypeJSON, Nullable: true},
		{Name: "longitude", Type: field.TypeString, Nullable: true},
		{Name: "latitude", Type: field.TypeString, Nullable: true},
		{Name: "search_text", Type: field.TypeString, Nullable: true},
		{Name: "relevance_score", Type: field.TypeFloat64, Nullable: true},
		{Name: "follower_count", Type: field.TypeInt, Default: 0},
		{Name: "like_count", Type: field.TypeInt, Default: 0},
		{Name: "review_count", Type: field.TypeInt, Default: 0},
		{Name: "following_count", Type: field.TypeInt, Default: 0},
		{Name: "is_premium", Type: field.TypeBool, Default: false},
		{Name: "is_published", Type: field.TypeBool, Default: false},
		{Name: "liked_by_current_user", Type: field.TypeBool, Default: false},
		{Name: "followed_by_current_user", Type: field.TypeBool, Default: false},
		{Name: "business_places", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "event_place", Type: field.TypeString, Nullable: true},
	}
	// PlacesTable holds the schema information for the "places" table.
	PlacesTable = &schema.Table{
		Name:       "places",
		Columns:    PlacesColumns,
		PrimaryKey: []*schema.Column{PlacesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "places_businesses_places",
				Columns:    []*schema.Column{PlacesColumns[37]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "places_events_place",
				Columns:    []*schema.Column{PlacesColumns[38]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlaceInventoriesColumns holds the columns for the "place_inventories" table.
	PlaceInventoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "name", Type: field.TypeString},
		{Name: "price", Type: field.TypeFloat64},
		{Name: "stock_quantity", Type: field.TypeInt},
		{Name: "min_stock_threshold", Type: field.TypeInt, Nullable: true},
		{Name: "sku", Type: field.TypeString, Nullable: true},
		{Name: "expiry_date", Type: field.TypeTime, Nullable: true},
		{Name: "size", Type: field.TypeString, Nullable: true},
		{Name: "color", Type: field.TypeString, Nullable: true},
		{Name: "brand", Type: field.TypeString, Nullable: true},
		{Name: "purchase_date", Type: field.TypeTime, Nullable: true},
		{Name: "last_updated", Type: field.TypeTime},
		{Name: "business_place_inventories", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "category_place_inventories", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "inventory_type_place_inventories", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "menu_item_inventory", Type: field.TypeString, Unique: true, Nullable: true, Size: 36},
		{Name: "place_inventories", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// PlaceInventoriesTable holds the schema information for the "place_inventories" table.
	PlaceInventoriesTable = &schema.Table{
		Name:       "place_inventories",
		Columns:    PlaceInventoriesColumns,
		PrimaryKey: []*schema.Column{PlaceInventoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "place_inventories_businesses_place_inventories",
				Columns:    []*schema.Column{PlaceInventoriesColumns[12]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "place_inventories_categories_place_inventories",
				Columns:    []*schema.Column{PlaceInventoriesColumns[13]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "place_inventories_inventory_types_place_inventories",
				Columns:    []*schema.Column{PlaceInventoriesColumns[14]},
				RefColumns: []*schema.Column{InventoryTypesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "place_inventories_menu_items_inventory",
				Columns:    []*schema.Column{PlaceInventoriesColumns[15]},
				RefColumns: []*schema.Column{MenuItemsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "place_inventories_places_inventories",
				Columns:    []*schema.Column{PlaceInventoriesColumns[16]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PlaceInventoryAttributesColumns holds the columns for the "place_inventory_attributes" table.
	PlaceInventoryAttributesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "value", Type: field.TypeString},
		{Name: "category_specific_value", Type: field.TypeJSON, Nullable: true},
		{Name: "inventory_attribute_place_inventory_attributes", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "place_inventory_attributes", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// PlaceInventoryAttributesTable holds the schema information for the "place_inventory_attributes" table.
	PlaceInventoryAttributesTable = &schema.Table{
		Name:       "place_inventory_attributes",
		Columns:    PlaceInventoryAttributesColumns,
		PrimaryKey: []*schema.Column{PlaceInventoryAttributesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "place_inventory_attributes_inventory_attributes_place_inventory_attributes",
				Columns:    []*schema.Column{PlaceInventoryAttributesColumns[3]},
				RefColumns: []*schema.Column{InventoryAttributesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "place_inventory_attributes_place_inventories_attributes",
				Columns:    []*schema.Column{PlaceInventoryAttributesColumns[4]},
				RefColumns: []*schema.Column{PlaceInventoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PlaceTablesColumns holds the columns for the "place_tables" table.
	PlaceTablesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "number", Type: field.TypeInt},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "capacity", Type: field.TypeInt, Default: 4},
		{Name: "deleted_at", Type: field.TypeString, Nullable: true},
		{Name: "is_deleted", Type: field.TypeBool, Default: false},
		{Name: "qr_code", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeString, Default: "available"},
		{Name: "type", Type: field.TypeEnum, Nullable: true, Enums: []string{"regular", "vip", "premium"}},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "is_reserved", Type: field.TypeBool, Default: false},
		{Name: "is_vip", Type: field.TypeBool, Default: false},
		{Name: "is_premium", Type: field.TypeBool, Default: false},
		{Name: "location_description", Type: field.TypeString, Nullable: true},
		{Name: "minimum_spend", Type: field.TypeFloat64, Nullable: true},
		{Name: "reservation_time", Type: field.TypeTime, Nullable: true},
		{Name: "next_available_time", Type: field.TypeTime, Nullable: true},
		{Name: "special_requirements", Type: field.TypeJSON, Nullable: true},
		{Name: "layout", Type: field.TypeString, Nullable: true},
		{Name: "service_area", Type: field.TypeString, Nullable: true},
		{Name: "ambient", Type: field.TypeString, Nullable: true},
		{Name: "image_url", Type: field.TypeString, Nullable: true},
		{Name: "rating", Type: field.TypeFloat64, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "place_tables", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_tables_created", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_tables_updated", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_tables_deleted", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_tables_reserved", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_tables_waited", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// PlaceTablesTable holds the schema information for the "place_tables" table.
	PlaceTablesTable = &schema.Table{
		Name:       "place_tables",
		Columns:    PlaceTablesColumns,
		PrimaryKey: []*schema.Column{PlaceTablesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "place_tables_places_tables",
				Columns:    []*schema.Column{PlaceTablesColumns[26]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "place_tables_users_tables_created",
				Columns:    []*schema.Column{PlaceTablesColumns[27]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "place_tables_users_tables_updated",
				Columns:    []*schema.Column{PlaceTablesColumns[28]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "place_tables_users_tables_deleted",
				Columns:    []*schema.Column{PlaceTablesColumns[29]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "place_tables_users_tables_reserved",
				Columns:    []*schema.Column{PlaceTablesColumns[30]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "place_tables_users_tables_waited",
				Columns:    []*schema.Column{PlaceTablesColumns[31]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PlansColumns holds the columns for the "plans" table.
	PlansColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "overview", Type: field.TypeString, Nullable: true},
		{Name: "features", Type: field.TypeJSON, Nullable: true},
	}
	// PlansTable holds the schema information for the "plans" table.
	PlansTable = &schema.Table{
		Name:       "plans",
		Columns:    PlansColumns,
		PrimaryKey: []*schema.Column{PlansColumns[0]},
	}
	// PostsColumns holds the columns for the "posts" table.
	PostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "content", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "privacy", Type: field.TypeEnum, Enums: []string{"Public", "FollowersOnly", "OnlyMe"}, Default: "Public"},
		{Name: "liked_by_me", Type: field.TypeBool, Default: false},
		{Name: "like_count", Type: field.TypeInt, Default: 0},
		{Name: "comment_count", Type: field.TypeInt, Default: 0},
		{Name: "share_count", Type: field.TypeInt, Default: 0},
		{Name: "view_count", Type: field.TypeInt, Default: 0},
		{Name: "is_sponsored", Type: field.TypeBool, Default: false},
		{Name: "is_promoted", Type: field.TypeBool, Default: false},
		{Name: "is_boosted", Type: field.TypeBool, Default: false},
		{Name: "is_pinned", Type: field.TypeBool, Default: false},
		{Name: "is_hidden", Type: field.TypeBool, Default: false},
		{Name: "repost_count", Type: field.TypeInt, Default: 0},
		{Name: "is_repost", Type: field.TypeBool, Default: false},
		{Name: "relevance_score", Type: field.TypeInt, Default: 0},
		{Name: "search_text", Type: field.TypeString, Nullable: true},
		{Name: "business_posts", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "post_original_post", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_posts", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// PostsTable holds the schema information for the "posts" table.
	PostsTable = &schema.Table{
		Name:       "posts",
		Columns:    PostsColumns,
		PrimaryKey: []*schema.Column{PostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "posts_businesses_posts",
				Columns:    []*schema.Column{PostsColumns[19]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "posts_posts_original_post",
				Columns:    []*schema.Column{PostsColumns[20]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "posts_users_posts",
				Columns:    []*schema.Column{PostsColumns[21]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PricesColumns holds the columns for the "prices" table.
	PricesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "price", Type: field.TypeFloat64},
		{Name: "currency", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"session", "day", "week", "month", "year"}},
		{Name: "duration", Type: field.TypeInt, Nullable: true},
		{Name: "session", Type: field.TypeInt, Nullable: true},
		{Name: "plan_prices", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// PricesTable holds the schema information for the "prices" table.
	PricesTable = &schema.Table{
		Name:       "prices",
		Columns:    PricesColumns,
		PrimaryKey: []*schema.Column{PricesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "prices_plans_prices",
				Columns:    []*schema.Column{PricesColumns[7]},
				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RatingsColumns holds the columns for the "ratings" table.
	RatingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "score", Type: field.TypeInt},
		{Name: "review", Type: field.TypeString, Nullable: true},
		{Name: "rated_at", Type: field.TypeTime},
		{Name: "business_ratings", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "event_ratings", Type: field.TypeString, Nullable: true},
		{Name: "place_ratings", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "rating_business", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "rating_place", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "rating_event", Type: field.TypeString, Nullable: true},
		{Name: "user_ratings", Type: field.TypeString, Size: 36},
	}
	// RatingsTable holds the schema information for the "ratings" table.
	RatingsTable = &schema.Table{
		Name:       "ratings",
		Columns:    RatingsColumns,
		PrimaryKey: []*schema.Column{RatingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "ratings_businesses_ratings",
				Columns:    []*schema.Column{RatingsColumns[4]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "ratings_events_ratings",
				Columns:    []*schema.Column{RatingsColumns[5]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "ratings_places_ratings",
				Columns:    []*schema.Column{RatingsColumns[6]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "ratings_businesses_business",
				Columns:    []*schema.Column{RatingsColumns[7]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "ratings_places_place",
				Columns:    []*schema.Column{RatingsColumns[8]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "ratings_events_event",
				Columns:    []*schema.Column{RatingsColumns[9]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "ratings_users_ratings",
				Columns:    []*schema.Column{RatingsColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ReactionsColumns holds the columns for the "reactions" table.
	ReactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
	}
	// ReactionsTable holds the schema information for the "reactions" table.
	ReactionsTable = &schema.Table{
		Name:       "reactions",
		Columns:    ReactionsColumns,
		PrimaryKey: []*schema.Column{ReactionsColumns[0]},
	}
	// ReservationsColumns holds the columns for the "reservations" table.
	ReservationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "start_date", Type: field.TypeTime},
		{Name: "end_date", Type: field.TypeTime},
		{Name: "status", Type: field.TypeString},
		{Name: "place_reservations", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "room_reservations", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_reservations", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// ReservationsTable holds the schema information for the "reservations" table.
	ReservationsTable = &schema.Table{
		Name:       "reservations",
		Columns:    ReservationsColumns,
		PrimaryKey: []*schema.Column{ReservationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "reservations_places_reservations",
				Columns:    []*schema.Column{ReservationsColumns[4]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "reservations_rooms_reservations",
				Columns:    []*schema.Column{ReservationsColumns[5]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "reservations_users_reservations",
				Columns:    []*schema.Column{ReservationsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ReservationBlocksColumns holds the columns for the "reservation_blocks" table.
	ReservationBlocksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "start_time", Type: field.TypeTime},
		{Name: "end_time", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"confirmed", "pending", "canceled"}},
		{Name: "place_inventory_reservation_blocks", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_reservation_blocks", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// ReservationBlocksTable holds the schema information for the "reservation_blocks" table.
	ReservationBlocksTable = &schema.Table{
		Name:       "reservation_blocks",
		Columns:    ReservationBlocksColumns,
		PrimaryKey: []*schema.Column{ReservationBlocksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "reservation_blocks_place_inventories_reservation_blocks",
				Columns:    []*schema.Column{ReservationBlocksColumns[4]},
				RefColumns: []*schema.Column{PlaceInventoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "reservation_blocks_users_reservation_blocks",
				Columns:    []*schema.Column{ReservationBlocksColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ResoursesColumns holds the columns for the "resourses" table.
	ResoursesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
	}
	// ResoursesTable holds the schema information for the "resourses" table.
	ResoursesTable = &schema.Table{
		Name:       "resourses",
		Columns:    ResoursesColumns,
		PrimaryKey: []*schema.Column{ResoursesColumns[0]},
	}
	// ReviewsColumns holds the columns for the "reviews" table.
	ReviewsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "score", Type: field.TypeFloat64},
		{Name: "content", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "like_count", Type: field.TypeInt, Default: 0},
		{Name: "dislike_count", Type: field.TypeInt, Default: 0},
		{Name: "flag", Type: field.TypeString, Default: ""},
		{Name: "event_event_reviews", Type: field.TypeString, Nullable: true},
		{Name: "place_reviews", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "review_business", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "review_place", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "review_event", Type: field.TypeString, Nullable: true},
		{Name: "user_reviews", Type: field.TypeString, Size: 36},
	}
	// ReviewsTable holds the schema information for the "reviews" table.
	ReviewsTable = &schema.Table{
		Name:       "reviews",
		Columns:    ReviewsColumns,
		PrimaryKey: []*schema.Column{ReviewsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "reviews_events_event_reviews",
				Columns:    []*schema.Column{ReviewsColumns[7]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "reviews_places_reviews",
				Columns:    []*schema.Column{ReviewsColumns[8]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "reviews_businesses_business",
				Columns:    []*schema.Column{ReviewsColumns[9]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "reviews_places_place",
				Columns:    []*schema.Column{ReviewsColumns[10]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "reviews_events_event",
				Columns:    []*schema.Column{ReviewsColumns[11]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "reviews_users_reviews",
				Columns:    []*schema.Column{ReviewsColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// RoomsColumns holds the columns for the "rooms" table.
	RoomsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "room_number", Type: field.TypeInt, Nullable: true},
		{Name: "room_type", Type: field.TypeString, Nullable: true},
		{Name: "room_status", Type: field.TypeString, Nullable: true},
		{Name: "room_rating", Type: field.TypeString, Nullable: true},
		{Name: "room_price", Type: field.TypeFloat64, Nullable: true},
		{Name: "guest_capacity", Type: field.TypeString, Nullable: true},
		{Name: "qr_code", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"available", "unavailable", "maintenance", "reserved"}, Default: "available"},
		{Name: "extras", Type: field.TypeJSON, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "availability", Type: field.TypeBool, Default: true},
		{Name: "image", Type: field.TypeString, Nullable: true},
	}
	// RoomsTable holds the schema information for the "rooms" table.
	RoomsTable = &schema.Table{
		Name:       "rooms",
		Columns:    RoomsColumns,
		PrimaryKey: []*schema.Column{RoomsColumns[0]},
	}
	// RoomCategoriesColumns holds the columns for the "room_categories" table.
	RoomCategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "price", Type: field.TypeString, Nullable: true},
	}
	// RoomCategoriesTable holds the schema information for the "room_categories" table.
	RoomCategoriesTable = &schema.Table{
		Name:       "room_categories",
		Columns:    RoomCategoriesColumns,
		PrimaryKey: []*schema.Column{RoomCategoriesColumns[0]},
	}
	// StaffsColumns holds the columns for the "staffs" table.
	StaffsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "position", Type: field.TypeString, Nullable: true},
		{Name: "user_staffs", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// StaffsTable holds the schema information for the "staffs" table.
	StaffsTable = &schema.Table{
		Name:       "staffs",
		Columns:    StaffsColumns,
		PrimaryKey: []*schema.Column{StaffsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "staffs_users_staffs",
				Columns:    []*schema.Column{StaffsColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SubscriptionsColumns holds the columns for the "subscriptions" table.
	SubscriptionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "start_date", Type: field.TypeTime},
		{Name: "end_date", Type: field.TypeTime},
		{Name: "flutterwave_subscription_id", Type: field.TypeString, Nullable: true},
		{Name: "plan_subscriptions", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "price_subscriptions", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_subscriptions", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// SubscriptionsTable holds the schema information for the "subscriptions" table.
	SubscriptionsTable = &schema.Table{
		Name:       "subscriptions",
		Columns:    SubscriptionsColumns,
		PrimaryKey: []*schema.Column{SubscriptionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "subscriptions_plans_subscriptions",
				Columns:    []*schema.Column{SubscriptionsColumns[4]},
				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "subscriptions_prices_subscriptions",
				Columns:    []*schema.Column{SubscriptionsColumns[5]},
				RefColumns: []*schema.Column{PricesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "subscriptions_users_subscriptions",
				Columns:    []*schema.Column{SubscriptionsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TemplatesColumns holds the columns for the "templates" table.
	TemplatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "default_html", Type: field.TypeString},
		{Name: "default_css", Type: field.TypeString},
	}
	// TemplatesTable holds the schema information for the "templates" table.
	TemplatesTable = &schema.Table{
		Name:       "templates",
		Columns:    TemplatesColumns,
		PrimaryKey: []*schema.Column{TemplatesColumns[0]},
	}
	// TicketsColumns holds the columns for the "tickets" table.
	TicketsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "ticket_code", Type: field.TypeString, Unique: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"available", "reserved", "sold", "validated"}, Default: "available"},
		{Name: "purchase_time", Type: field.TypeTime},
		{Name: "validation_time", Type: field.TypeTime, Nullable: true},
		{Name: "purchaser_email", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "event_tickets", Type: field.TypeString},
		{Name: "ticket_option_tickets", Type: field.TypeString},
		{Name: "user_purchased_tickets", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// TicketsTable holds the schema information for the "tickets" table.
	TicketsTable = &schema.Table{
		Name:       "tickets",
		Columns:    TicketsColumns,
		PrimaryKey: []*schema.Column{TicketsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tickets_events_tickets",
				Columns:    []*schema.Column{TicketsColumns[8]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "tickets_ticket_options_tickets",
				Columns:    []*schema.Column{TicketsColumns[9]},
				RefColumns: []*schema.Column{TicketOptionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "tickets_users_purchasedTickets",
				Columns:    []*schema.Column{TicketsColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TicketOptionsColumns holds the columns for the "ticket_options" table.
	TicketOptionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "price", Type: field.TypeFloat64, Default: 0},
		{Name: "quantity_available", Type: field.TypeInt, Default: 0},
		{Name: "quantity_sold", Type: field.TypeInt, Default: 0},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"active", "inactive", "sold_out"}, Default: "active"},
		{Name: "discount", Type: field.TypeFloat64, Default: 0},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "event_ticket_options", Type: field.TypeString, Nullable: true},
	}
	// TicketOptionsTable holds the schema information for the "ticket_options" table.
	TicketOptionsTable = &schema.Table{
		Name:       "ticket_options",
		Columns:    TicketOptionsColumns,
		PrimaryKey: []*schema.Column{TicketOptionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "ticket_options_events_ticketOptions",
				Columns:    []*schema.Column{TicketOptionsColumns[10]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TrainersColumns holds the columns for the "trainers" table.
	TrainersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString},
	}
	// TrainersTable holds the schema information for the "trainers" table.
	TrainersTable = &schema.Table{
		Name:       "trainers",
		Columns:    TrainersColumns,
		PrimaryKey: []*schema.Column{TrainersColumns[0]},
	}
	// TransactionHistoriesColumns holds the columns for the "transaction_histories" table.
	TransactionHistoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "transaction_type", Type: field.TypeEnum, Enums: []string{"purchase", "sale", "return", "usage"}},
		{Name: "quantity", Type: field.TypeInt},
		{Name: "date", Type: field.TypeTime},
		{Name: "place_inventory_transaction_histories", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_transaction_histories", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// TransactionHistoriesTable holds the schema information for the "transaction_histories" table.
	TransactionHistoriesTable = &schema.Table{
		Name:       "transaction_histories",
		Columns:    TransactionHistoriesColumns,
		PrimaryKey: []*schema.Column{TransactionHistoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transaction_histories_place_inventories_transaction_histories",
				Columns:    []*schema.Column{TransactionHistoriesColumns[4]},
				RefColumns: []*schema.Column{PlaceInventoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "transaction_histories_users_transaction_histories",
				Columns:    []*schema.Column{TransactionHistoriesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "auth0_id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "picture", Type: field.TypeString, Nullable: true},
		{Name: "cover_image", Type: field.TypeString, Nullable: true, Default: "https://res.cloudinary.com/placio/image/upload/v1686842319/mjl8stmbn5xmfsm50vbg.jpg"},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "website", Type: field.TypeString, Nullable: true},
		{Name: "location", Type: field.TypeString, Nullable: true},
		{Name: "map_coordinates", Type: field.TypeJSON, Nullable: true},
		{Name: "longitude", Type: field.TypeString, Nullable: true},
		{Name: "latitude", Type: field.TypeString, Nullable: true},
		{Name: "bio", Type: field.TypeString, Nullable: true, Size: 2147483647, Default: "Add a bio to your profile"},
		{Name: "auth0_data", Type: field.TypeJSON, Nullable: true},
		{Name: "app_settings", Type: field.TypeJSON, Nullable: true},
		{Name: "user_settings", Type: field.TypeJSON, Nullable: true},
		{Name: "search_text", Type: field.TypeString, Nullable: true},
		{Name: "relevance_score", Type: field.TypeFloat64, Nullable: true},
		{Name: "follower_count", Type: field.TypeInt, Default: 0},
		{Name: "following_count", Type: field.TypeInt, Default: 0},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"user", "admin", "business_owner", "staff"}, Default: "user"},
		{Name: "permissions", Type: field.TypeJSON, Nullable: true},
		{Name: "is_premium", Type: field.TypeBool, Default: false},
		{Name: "event_additional_organizers", Type: field.TypeString, Nullable: true},
		{Name: "event_performers", Type: field.TypeString, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_events_additional_organizers",
				Columns:    []*schema.Column{UsersColumns[22]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "users_events_performers",
				Columns:    []*schema.Column{UsersColumns[23]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserBusinessesColumns holds the columns for the "user_businesses" table.
	UserBusinessesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "role", Type: field.TypeString},
		{Name: "permissions", Type: field.TypeString, Nullable: true},
		{Name: "business_user_businesses", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_user_businesses", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// UserBusinessesTable holds the schema information for the "user_businesses" table.
	UserBusinessesTable = &schema.Table{
		Name:       "user_businesses",
		Columns:    UserBusinessesColumns,
		PrimaryKey: []*schema.Column{UserBusinessesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_businesses_businesses_userBusinesses",
				Columns:    []*schema.Column{UserBusinessesColumns[3]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_businesses_users_userBusinesses",
				Columns:    []*schema.Column{UserBusinessesColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserFollowBusinessesColumns holds the columns for the "user_follow_businesses" table.
	UserFollowBusinessesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "business_follower_users", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_followed_businesses", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// UserFollowBusinessesTable holds the schema information for the "user_follow_businesses" table.
	UserFollowBusinessesTable = &schema.Table{
		Name:       "user_follow_businesses",
		Columns:    UserFollowBusinessesColumns,
		PrimaryKey: []*schema.Column{UserFollowBusinessesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_follow_businesses_businesses_followerUsers",
				Columns:    []*schema.Column{UserFollowBusinessesColumns[3]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_follow_businesses_users_followedBusinesses",
				Columns:    []*schema.Column{UserFollowBusinessesColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserFollowEventsColumns holds the columns for the "user_follow_events" table.
	UserFollowEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_user_follow_events", Type: field.TypeString, Size: 36},
		{Name: "user_follow_event_event", Type: field.TypeString},
	}
	// UserFollowEventsTable holds the schema information for the "user_follow_events" table.
	UserFollowEventsTable = &schema.Table{
		Name:       "user_follow_events",
		Columns:    UserFollowEventsColumns,
		PrimaryKey: []*schema.Column{UserFollowEventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_follow_events_users_userFollowEvents",
				Columns:    []*schema.Column{UserFollowEventsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_follow_events_events_event",
				Columns:    []*schema.Column{UserFollowEventsColumns[4]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UserFollowPlacesColumns holds the columns for the "user_follow_places" table.
	UserFollowPlacesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "place_follower_users", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_followed_places", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_follow_place_place", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// UserFollowPlacesTable holds the schema information for the "user_follow_places" table.
	UserFollowPlacesTable = &schema.Table{
		Name:       "user_follow_places",
		Columns:    UserFollowPlacesColumns,
		PrimaryKey: []*schema.Column{UserFollowPlacesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_follow_places_places_followerUsers",
				Columns:    []*schema.Column{UserFollowPlacesColumns[3]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_follow_places_users_followedPlaces",
				Columns:    []*schema.Column{UserFollowPlacesColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_follow_places_places_place",
				Columns:    []*schema.Column{UserFollowPlacesColumns[5]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserFollowUsersColumns holds the columns for the "user_follow_users" table.
	UserFollowUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_followed_users", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_follower_users", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// UserFollowUsersTable holds the schema information for the "user_follow_users" table.
	UserFollowUsersTable = &schema.Table{
		Name:       "user_follow_users",
		Columns:    UserFollowUsersColumns,
		PrimaryKey: []*schema.Column{UserFollowUsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_follow_users_users_followedUsers",
				Columns:    []*schema.Column{UserFollowUsersColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_follow_users_users_followerUsers",
				Columns:    []*schema.Column{UserFollowUsersColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserLikePlacesColumns holds the columns for the "user_like_places" table.
	UserLikePlacesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_liked_places", Type: field.TypeString, Nullable: true, Size: 36},
		{Name: "user_like_place_place", Type: field.TypeString, Nullable: true, Size: 36},
	}
	// UserLikePlacesTable holds the schema information for the "user_like_places" table.
	UserLikePlacesTable = &schema.Table{
		Name:       "user_like_places",
		Columns:    UserLikePlacesColumns,
		PrimaryKey: []*schema.Column{UserLikePlacesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_like_places_users_likedPlaces",
				Columns:    []*schema.Column{UserLikePlacesColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_like_places_places_place",
				Columns:    []*schema.Column{UserLikePlacesColumns[4]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// WebsitesColumns holds the columns for the "websites" table.
	WebsitesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "domain_name", Type: field.TypeString, Unique: true},
		{Name: "heading_text", Type: field.TypeString, Nullable: true},
		{Name: "business_logo", Type: field.TypeString, Nullable: true},
		{Name: "business_name", Type: field.TypeString, Nullable: true},
		{Name: "banner_section_background_image", Type: field.TypeString, Nullable: true},
		{Name: "banner_section_background_color", Type: field.TypeString, Nullable: true},
		{Name: "banner_section_text", Type: field.TypeString, Nullable: true},
		{Name: "three_items_section_heading_text", Type: field.TypeString, Nullable: true},
		{Name: "three_items_section_details_text", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "three_items_section_item_one_text", Type: field.TypeString, Nullable: true},
		{Name: "three_items_section_item_two_text", Type: field.TypeString, Nullable: true},
		{Name: "three_items_section_item_three_text", Type: field.TypeString, Nullable: true},
		{Name: "banner_two_section_background_image", Type: field.TypeString, Nullable: true},
		{Name: "banner_two_section_background_color", Type: field.TypeString, Nullable: true},
		{Name: "banner_two_left_section_heading_text", Type: field.TypeString, Nullable: true},
		{Name: "banner_two_left_section_details_text", Type: field.TypeString, Nullable: true},
		{Name: "banner_two_left_section_button_text", Type: field.TypeString, Nullable: true},
		{Name: "banner_two_left_section_button_link", Type: field.TypeString, Nullable: true},
		{Name: "banner_two_right_side_image", Type: field.TypeString, Nullable: true},
		{Name: "achievements_section", Type: field.TypeJSON, Nullable: true},
		{Name: "inventory_section_heading_text", Type: field.TypeString, Nullable: true},
		{Name: "creation_date", Type: field.TypeTime},
		{Name: "last_updated", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "keywords", Type: field.TypeString, Nullable: true},
		{Name: "language", Type: field.TypeString, Nullable: true},
		{Name: "logo", Type: field.TypeString, Nullable: true},
		{Name: "favicon", Type: field.TypeString, Nullable: true},
		{Name: "facebook", Type: field.TypeString, Nullable: true},
		{Name: "twitter", Type: field.TypeString, Nullable: true},
		{Name: "instagram", Type: field.TypeString, Nullable: true},
		{Name: "youtube", Type: field.TypeString, Nullable: true},
		{Name: "linkedin", Type: field.TypeString, Nullable: true},
		{Name: "pinterest", Type: field.TypeString, Nullable: true},
		{Name: "map_coordinates", Type: field.TypeJSON, Nullable: true},
		{Name: "longitude", Type: field.TypeString, Nullable: true},
		{Name: "latitude", Type: field.TypeString, Nullable: true},
		{Name: "address", Type: field.TypeString, Nullable: true},
		{Name: "city", Type: field.TypeString, Nullable: true},
		{Name: "state", Type: field.TypeString, Nullable: true},
		{Name: "country", Type: field.TypeString, Nullable: true},
		{Name: "zip_code", Type: field.TypeString, Nullable: true},
		{Name: "phone_number", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "meta_tags", Type: field.TypeJSON, Nullable: true},
		{Name: "business_websites", Type: field.TypeString, Unique: true, Size: 36},
		{Name: "template_websites", Type: field.TypeString, Nullable: true},
	}
	// WebsitesTable holds the schema information for the "websites" table.
	WebsitesTable = &schema.Table{
		Name:       "websites",
		Columns:    WebsitesColumns,
		PrimaryKey: []*schema.Column{WebsitesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "websites_businesses_websites",
				Columns:    []*schema.Column{WebsitesColumns[47]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "websites_templates_websites",
				Columns:    []*schema.Column{WebsitesColumns[48]},
				RefColumns: []*schema.Column{TemplatesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AmenityPlacesColumns holds the columns for the "amenity_places" table.
	AmenityPlacesColumns = []*schema.Column{
		{Name: "amenity_id", Type: field.TypeString, Size: 36},
		{Name: "place_id", Type: field.TypeString, Size: 36},
	}
	// AmenityPlacesTable holds the schema information for the "amenity_places" table.
	AmenityPlacesTable = &schema.Table{
		Name:       "amenity_places",
		Columns:    AmenityPlacesColumns,
		PrimaryKey: []*schema.Column{AmenityPlacesColumns[0], AmenityPlacesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "amenity_places_amenity_id",
				Columns:    []*schema.Column{AmenityPlacesColumns[0]},
				RefColumns: []*schema.Column{AmenitiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "amenity_places_place_id",
				Columns:    []*schema.Column{AmenityPlacesColumns[1]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// BusinessNotificationsColumns holds the columns for the "business_notifications" table.
	BusinessNotificationsColumns = []*schema.Column{
		{Name: "business_id", Type: field.TypeString, Size: 36},
		{Name: "notification_id", Type: field.TypeString, Size: 36},
	}
	// BusinessNotificationsTable holds the schema information for the "business_notifications" table.
	BusinessNotificationsTable = &schema.Table{
		Name:       "business_notifications",
		Columns:    BusinessNotificationsColumns,
		PrimaryKey: []*schema.Column{BusinessNotificationsColumns[0], BusinessNotificationsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "business_notifications_business_id",
				Columns:    []*schema.Column{BusinessNotificationsColumns[0]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "business_notifications_notification_id",
				Columns:    []*schema.Column{BusinessNotificationsColumns[1]},
				RefColumns: []*schema.Column{NotificationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// BusinessStaffsColumns holds the columns for the "business_staffs" table.
	BusinessStaffsColumns = []*schema.Column{
		{Name: "business_id", Type: field.TypeString, Size: 36},
		{Name: "staff_id", Type: field.TypeString, Size: 36},
	}
	// BusinessStaffsTable holds the schema information for the "business_staffs" table.
	BusinessStaffsTable = &schema.Table{
		Name:       "business_staffs",
		Columns:    BusinessStaffsColumns,
		PrimaryKey: []*schema.Column{BusinessStaffsColumns[0], BusinessStaffsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "business_staffs_business_id",
				Columns:    []*schema.Column{BusinessStaffsColumns[0]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "business_staffs_staff_id",
				Columns:    []*schema.Column{BusinessStaffsColumns[1]},
				RefColumns: []*schema.Column{StaffsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// CategoryMediaColumns holds the columns for the "category_media" table.
	CategoryMediaColumns = []*schema.Column{
		{Name: "category_id", Type: field.TypeString, Size: 36},
		{Name: "media_id", Type: field.TypeString, Size: 36},
	}
	// CategoryMediaTable holds the schema information for the "category_media" table.
	CategoryMediaTable = &schema.Table{
		Name:       "category_media",
		Columns:    CategoryMediaColumns,
		PrimaryKey: []*schema.Column{CategoryMediaColumns[0], CategoryMediaColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "category_media_category_id",
				Columns:    []*schema.Column{CategoryMediaColumns[0]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "category_media_media_id",
				Columns:    []*schema.Column{CategoryMediaColumns[1]},
				RefColumns: []*schema.Column{MediaColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// CommentNotificationsColumns holds the columns for the "comment_notifications" table.
	CommentNotificationsColumns = []*schema.Column{
		{Name: "comment_id", Type: field.TypeString, Size: 36},
		{Name: "notification_id", Type: field.TypeString, Size: 36},
	}
	// CommentNotificationsTable holds the schema information for the "comment_notifications" table.
	CommentNotificationsTable = &schema.Table{
		Name:       "comment_notifications",
		Columns:    CommentNotificationsColumns,
		PrimaryKey: []*schema.Column{CommentNotificationsColumns[0], CommentNotificationsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comment_notifications_comment_id",
				Columns:    []*schema.Column{CommentNotificationsColumns[0]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "comment_notifications_notification_id",
				Columns:    []*schema.Column{CommentNotificationsColumns[1]},
				RefColumns: []*schema.Column{NotificationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// FaqPlaceColumns holds the columns for the "faq_place" table.
	FaqPlaceColumns = []*schema.Column{
		{Name: "faq_id", Type: field.TypeString},
		{Name: "place_id", Type: field.TypeString, Size: 36},
	}
	// FaqPlaceTable holds the schema information for the "faq_place" table.
	FaqPlaceTable = &schema.Table{
		Name:       "faq_place",
		Columns:    FaqPlaceColumns,
		PrimaryKey: []*schema.Column{FaqPlaceColumns[0], FaqPlaceColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "faq_place_faq_id",
				Columns:    []*schema.Column{FaqPlaceColumns[0]},
				RefColumns: []*schema.Column{FaQsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "faq_place_place_id",
				Columns:    []*schema.Column{FaqPlaceColumns[1]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// FaqEventColumns holds the columns for the "faq_event" table.
	FaqEventColumns = []*schema.Column{
		{Name: "faq_id", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeString},
	}
	// FaqEventTable holds the schema information for the "faq_event" table.
	FaqEventTable = &schema.Table{
		Name:       "faq_event",
		Columns:    FaqEventColumns,
		PrimaryKey: []*schema.Column{FaqEventColumns[0], FaqEventColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "faq_event_faq_id",
				Columns:    []*schema.Column{FaqEventColumns[0]},
				RefColumns: []*schema.Column{FaQsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "faq_event_event_id",
				Columns:    []*schema.Column{FaqEventColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// MenuCategoriesColumns holds the columns for the "menu_categories" table.
	MenuCategoriesColumns = []*schema.Column{
		{Name: "menu_id", Type: field.TypeString, Size: 36},
		{Name: "category_id", Type: field.TypeString, Size: 36},
	}
	// MenuCategoriesTable holds the schema information for the "menu_categories" table.
	MenuCategoriesTable = &schema.Table{
		Name:       "menu_categories",
		Columns:    MenuCategoriesColumns,
		PrimaryKey: []*schema.Column{MenuCategoriesColumns[0], MenuCategoriesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "menu_categories_menu_id",
				Columns:    []*schema.Column{MenuCategoriesColumns[0]},
				RefColumns: []*schema.Column{MenusColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "menu_categories_category_id",
				Columns:    []*schema.Column{MenuCategoriesColumns[1]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// MenuMenuItemsColumns holds the columns for the "menu_menu_items" table.
	MenuMenuItemsColumns = []*schema.Column{
		{Name: "menu_id", Type: field.TypeString, Size: 36},
		{Name: "menu_item_id", Type: field.TypeString, Size: 36},
	}
	// MenuMenuItemsTable holds the schema information for the "menu_menu_items" table.
	MenuMenuItemsTable = &schema.Table{
		Name:       "menu_menu_items",
		Columns:    MenuMenuItemsColumns,
		PrimaryKey: []*schema.Column{MenuMenuItemsColumns[0], MenuMenuItemsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "menu_menu_items_menu_id",
				Columns:    []*schema.Column{MenuMenuItemsColumns[0]},
				RefColumns: []*schema.Column{MenusColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "menu_menu_items_menu_item_id",
				Columns:    []*schema.Column{MenuMenuItemsColumns[1]},
				RefColumns: []*schema.Column{MenuItemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// MenuMediaColumns holds the columns for the "menu_media" table.
	MenuMediaColumns = []*schema.Column{
		{Name: "menu_id", Type: field.TypeString, Size: 36},
		{Name: "media_id", Type: field.TypeString, Size: 36},
	}
	// MenuMediaTable holds the schema information for the "menu_media" table.
	MenuMediaTable = &schema.Table{
		Name:       "menu_media",
		Columns:    MenuMediaColumns,
		PrimaryKey: []*schema.Column{MenuMediaColumns[0], MenuMediaColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "menu_media_menu_id",
				Columns:    []*schema.Column{MenuMediaColumns[0]},
				RefColumns: []*schema.Column{MenusColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "menu_media_media_id",
				Columns:    []*schema.Column{MenuMediaColumns[1]},
				RefColumns: []*schema.Column{MediaColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// MenuItemOrderItemsColumns holds the columns for the "menu_item_order_items" table.
	MenuItemOrderItemsColumns = []*schema.Column{
		{Name: "menu_item_id", Type: field.TypeString, Size: 36},
		{Name: "order_item_id", Type: field.TypeString, Size: 36},
	}
	// MenuItemOrderItemsTable holds the schema information for the "menu_item_order_items" table.
	MenuItemOrderItemsTable = &schema.Table{
		Name:       "menu_item_order_items",
		Columns:    MenuItemOrderItemsColumns,
		PrimaryKey: []*schema.Column{MenuItemOrderItemsColumns[0], MenuItemOrderItemsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "menu_item_order_items_menu_item_id",
				Columns:    []*schema.Column{MenuItemOrderItemsColumns[0]},
				RefColumns: []*schema.Column{MenuItemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "menu_item_order_items_order_item_id",
				Columns:    []*schema.Column{MenuItemOrderItemsColumns[1]},
				RefColumns: []*schema.Column{OrderItemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OrderOrderItemsColumns holds the columns for the "order_order_items" table.
	OrderOrderItemsColumns = []*schema.Column{
		{Name: "order_id", Type: field.TypeString, Size: 36},
		{Name: "order_item_id", Type: field.TypeString, Size: 36},
	}
	// OrderOrderItemsTable holds the schema information for the "order_order_items" table.
	OrderOrderItemsTable = &schema.Table{
		Name:       "order_order_items",
		Columns:    OrderOrderItemsColumns,
		PrimaryKey: []*schema.Column{OrderOrderItemsColumns[0], OrderOrderItemsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "order_order_items_order_id",
				Columns:    []*schema.Column{OrderOrderItemsColumns[0]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "order_order_items_order_item_id",
				Columns:    []*schema.Column{OrderOrderItemsColumns[1]},
				RefColumns: []*schema.Column{OrderItemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlaceMenusColumns holds the columns for the "place_menus" table.
	PlaceMenusColumns = []*schema.Column{
		{Name: "place_id", Type: field.TypeString, Size: 36},
		{Name: "menu_id", Type: field.TypeString, Size: 36},
	}
	// PlaceMenusTable holds the schema information for the "place_menus" table.
	PlaceMenusTable = &schema.Table{
		Name:       "place_menus",
		Columns:    PlaceMenusColumns,
		PrimaryKey: []*schema.Column{PlaceMenusColumns[0], PlaceMenusColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "place_menus_place_id",
				Columns:    []*schema.Column{PlaceMenusColumns[0]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "place_menus_menu_id",
				Columns:    []*schema.Column{PlaceMenusColumns[1]},
				RefColumns: []*schema.Column{MenusColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlaceMediasColumns holds the columns for the "place_medias" table.
	PlaceMediasColumns = []*schema.Column{
		{Name: "place_id", Type: field.TypeString, Size: 36},
		{Name: "media_id", Type: field.TypeString, Size: 36},
	}
	// PlaceMediasTable holds the schema information for the "place_medias" table.
	PlaceMediasTable = &schema.Table{
		Name:       "place_medias",
		Columns:    PlaceMediasColumns,
		PrimaryKey: []*schema.Column{PlaceMediasColumns[0], PlaceMediasColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "place_medias_place_id",
				Columns:    []*schema.Column{PlaceMediasColumns[0]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "place_medias_media_id",
				Columns:    []*schema.Column{PlaceMediasColumns[1]},
				RefColumns: []*schema.Column{MediaColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlaceRoomsColumns holds the columns for the "place_rooms" table.
	PlaceRoomsColumns = []*schema.Column{
		{Name: "place_id", Type: field.TypeString, Size: 36},
		{Name: "room_id", Type: field.TypeString, Size: 36},
	}
	// PlaceRoomsTable holds the schema information for the "place_rooms" table.
	PlaceRoomsTable = &schema.Table{
		Name:       "place_rooms",
		Columns:    PlaceRoomsColumns,
		PrimaryKey: []*schema.Column{PlaceRoomsColumns[0], PlaceRoomsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "place_rooms_place_id",
				Columns:    []*schema.Column{PlaceRoomsColumns[0]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "place_rooms_room_id",
				Columns:    []*schema.Column{PlaceRoomsColumns[1]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlaceNotificationsColumns holds the columns for the "place_notifications" table.
	PlaceNotificationsColumns = []*schema.Column{
		{Name: "place_id", Type: field.TypeString, Size: 36},
		{Name: "notification_id", Type: field.TypeString, Size: 36},
	}
	// PlaceNotificationsTable holds the schema information for the "place_notifications" table.
	PlaceNotificationsTable = &schema.Table{
		Name:       "place_notifications",
		Columns:    PlaceNotificationsColumns,
		PrimaryKey: []*schema.Column{PlaceNotificationsColumns[0], PlaceNotificationsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "place_notifications_place_id",
				Columns:    []*schema.Column{PlaceNotificationsColumns[0]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "place_notifications_notification_id",
				Columns:    []*schema.Column{PlaceNotificationsColumns[1]},
				RefColumns: []*schema.Column{NotificationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlaceStaffsColumns holds the columns for the "place_staffs" table.
	PlaceStaffsColumns = []*schema.Column{
		{Name: "place_id", Type: field.TypeString, Size: 36},
		{Name: "staff_id", Type: field.TypeString, Size: 36},
	}
	// PlaceStaffsTable holds the schema information for the "place_staffs" table.
	PlaceStaffsTable = &schema.Table{
		Name:       "place_staffs",
		Columns:    PlaceStaffsColumns,
		PrimaryKey: []*schema.Column{PlaceStaffsColumns[0], PlaceStaffsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "place_staffs_place_id",
				Columns:    []*schema.Column{PlaceStaffsColumns[0]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "place_staffs_staff_id",
				Columns:    []*schema.Column{PlaceStaffsColumns[1]},
				RefColumns: []*schema.Column{StaffsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlaceRoomCategoriesColumns holds the columns for the "place_room_categories" table.
	PlaceRoomCategoriesColumns = []*schema.Column{
		{Name: "place_id", Type: field.TypeString, Size: 36},
		{Name: "room_category_id", Type: field.TypeString, Size: 36},
	}
	// PlaceRoomCategoriesTable holds the schema information for the "place_room_categories" table.
	PlaceRoomCategoriesTable = &schema.Table{
		Name:       "place_room_categories",
		Columns:    PlaceRoomCategoriesColumns,
		PrimaryKey: []*schema.Column{PlaceRoomCategoriesColumns[0], PlaceRoomCategoriesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "place_room_categories_place_id",
				Columns:    []*schema.Column{PlaceRoomCategoriesColumns[0]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "place_room_categories_room_category_id",
				Columns:    []*schema.Column{PlaceRoomCategoriesColumns[1]},
				RefColumns: []*schema.Column{RoomCategoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlaceTrainersColumns holds the columns for the "place_trainers" table.
	PlaceTrainersColumns = []*schema.Column{
		{Name: "place_id", Type: field.TypeString, Size: 36},
		{Name: "trainer_id", Type: field.TypeString, Size: 36},
	}
	// PlaceTrainersTable holds the schema information for the "place_trainers" table.
	PlaceTrainersTable = &schema.Table{
		Name:       "place_trainers",
		Columns:    PlaceTrainersColumns,
		PrimaryKey: []*schema.Column{PlaceTrainersColumns[0], PlaceTrainersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "place_trainers_place_id",
				Columns:    []*schema.Column{PlaceTrainersColumns[0]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "place_trainers_trainer_id",
				Columns:    []*schema.Column{PlaceTrainersColumns[1]},
				RefColumns: []*schema.Column{TrainersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlaceMembersColumns holds the columns for the "place_members" table.
	PlaceMembersColumns = []*schema.Column{
		{Name: "place_id", Type: field.TypeString, Size: 36},
		{Name: "user_id", Type: field.TypeString, Size: 36},
	}
	// PlaceMembersTable holds the schema information for the "place_members" table.
	PlaceMembersTable = &schema.Table{
		Name:       "place_members",
		Columns:    PlaceMembersColumns,
		PrimaryKey: []*schema.Column{PlaceMembersColumns[0], PlaceMembersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "place_members_place_id",
				Columns:    []*schema.Column{PlaceMembersColumns[0]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "place_members_user_id",
				Columns:    []*schema.Column{PlaceMembersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlaceRegularUsersColumns holds the columns for the "place_regularUsers" table.
	PlaceRegularUsersColumns = []*schema.Column{
		{Name: "place_id", Type: field.TypeString, Size: 36},
		{Name: "user_id", Type: field.TypeString, Size: 36},
	}
	// PlaceRegularUsersTable holds the schema information for the "place_regularUsers" table.
	PlaceRegularUsersTable = &schema.Table{
		Name:       "place_regularUsers",
		Columns:    PlaceRegularUsersColumns,
		PrimaryKey: []*schema.Column{PlaceRegularUsersColumns[0], PlaceRegularUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "place_regularUsers_place_id",
				Columns:    []*schema.Column{PlaceRegularUsersColumns[0]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "place_regularUsers_user_id",
				Columns:    []*schema.Column{PlaceRegularUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlaceInventoryMediaColumns holds the columns for the "place_inventory_media" table.
	PlaceInventoryMediaColumns = []*schema.Column{
		{Name: "place_inventory_id", Type: field.TypeString, Size: 36},
		{Name: "media_id", Type: field.TypeString, Size: 36},
	}
	// PlaceInventoryMediaTable holds the schema information for the "place_inventory_media" table.
	PlaceInventoryMediaTable = &schema.Table{
		Name:       "place_inventory_media",
		Columns:    PlaceInventoryMediaColumns,
		PrimaryKey: []*schema.Column{PlaceInventoryMediaColumns[0], PlaceInventoryMediaColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "place_inventory_media_place_inventory_id",
				Columns:    []*schema.Column{PlaceInventoryMediaColumns[0]},
				RefColumns: []*schema.Column{PlaceInventoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "place_inventory_media_media_id",
				Columns:    []*schema.Column{PlaceInventoryMediaColumns[1]},
				RefColumns: []*schema.Column{MediaColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlaceTableOrdersColumns holds the columns for the "place_table_orders" table.
	PlaceTableOrdersColumns = []*schema.Column{
		{Name: "place_table_id", Type: field.TypeString, Size: 36},
		{Name: "order_id", Type: field.TypeString, Size: 36},
	}
	// PlaceTableOrdersTable holds the schema information for the "place_table_orders" table.
	PlaceTableOrdersTable = &schema.Table{
		Name:       "place_table_orders",
		Columns:    PlaceTableOrdersColumns,
		PrimaryKey: []*schema.Column{PlaceTableOrdersColumns[0], PlaceTableOrdersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "place_table_orders_place_table_id",
				Columns:    []*schema.Column{PlaceTableOrdersColumns[0]},
				RefColumns: []*schema.Column{PlaceTablesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "place_table_orders_order_id",
				Columns:    []*schema.Column{PlaceTableOrdersColumns[1]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlanUsersColumns holds the columns for the "plan_users" table.
	PlanUsersColumns = []*schema.Column{
		{Name: "plan_id", Type: field.TypeString, Size: 36},
		{Name: "user_id", Type: field.TypeString, Size: 36},
	}
	// PlanUsersTable holds the schema information for the "plan_users" table.
	PlanUsersTable = &schema.Table{
		Name:       "plan_users",
		Columns:    PlanUsersColumns,
		PrimaryKey: []*schema.Column{PlanUsersColumns[0], PlanUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "plan_users_plan_id",
				Columns:    []*schema.Column{PlanUsersColumns[0]},
				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "plan_users_user_id",
				Columns:    []*schema.Column{PlanUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlanBusinessesColumns holds the columns for the "plan_businesses" table.
	PlanBusinessesColumns = []*schema.Column{
		{Name: "plan_id", Type: field.TypeString, Size: 36},
		{Name: "business_id", Type: field.TypeString, Size: 36},
	}
	// PlanBusinessesTable holds the schema information for the "plan_businesses" table.
	PlanBusinessesTable = &schema.Table{
		Name:       "plan_businesses",
		Columns:    PlanBusinessesColumns,
		PrimaryKey: []*schema.Column{PlanBusinessesColumns[0], PlanBusinessesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "plan_businesses_plan_id",
				Columns:    []*schema.Column{PlanBusinessesColumns[0]},
				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "plan_businesses_business_id",
				Columns:    []*schema.Column{PlanBusinessesColumns[1]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlanPlacesColumns holds the columns for the "plan_places" table.
	PlanPlacesColumns = []*schema.Column{
		{Name: "plan_id", Type: field.TypeString, Size: 36},
		{Name: "place_id", Type: field.TypeString, Size: 36},
	}
	// PlanPlacesTable holds the schema information for the "plan_places" table.
	PlanPlacesTable = &schema.Table{
		Name:       "plan_places",
		Columns:    PlanPlacesColumns,
		PrimaryKey: []*schema.Column{PlanPlacesColumns[0], PlanPlacesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "plan_places_plan_id",
				Columns:    []*schema.Column{PlanPlacesColumns[0]},
				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "plan_places_place_id",
				Columns:    []*schema.Column{PlanPlacesColumns[1]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PostNotificationsColumns holds the columns for the "post_notifications" table.
	PostNotificationsColumns = []*schema.Column{
		{Name: "post_id", Type: field.TypeString, Size: 36},
		{Name: "notification_id", Type: field.TypeString, Size: 36},
	}
	// PostNotificationsTable holds the schema information for the "post_notifications" table.
	PostNotificationsTable = &schema.Table{
		Name:       "post_notifications",
		Columns:    PostNotificationsColumns,
		PrimaryKey: []*schema.Column{PostNotificationsColumns[0], PostNotificationsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "post_notifications_post_id",
				Columns:    []*schema.Column{PostNotificationsColumns[0]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "post_notifications_notification_id",
				Columns:    []*schema.Column{PostNotificationsColumns[1]},
				RefColumns: []*schema.Column{NotificationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RoomAmenitiesColumns holds the columns for the "room_amenities" table.
	RoomAmenitiesColumns = []*schema.Column{
		{Name: "room_id", Type: field.TypeString, Size: 36},
		{Name: "amenity_id", Type: field.TypeString, Size: 36},
	}
	// RoomAmenitiesTable holds the schema information for the "room_amenities" table.
	RoomAmenitiesTable = &schema.Table{
		Name:       "room_amenities",
		Columns:    RoomAmenitiesColumns,
		PrimaryKey: []*schema.Column{RoomAmenitiesColumns[0], RoomAmenitiesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "room_amenities_room_id",
				Columns:    []*schema.Column{RoomAmenitiesColumns[0]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "room_amenities_amenity_id",
				Columns:    []*schema.Column{RoomAmenitiesColumns[1]},
				RefColumns: []*schema.Column{AmenitiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RoomMediaColumns holds the columns for the "room_media" table.
	RoomMediaColumns = []*schema.Column{
		{Name: "room_id", Type: field.TypeString, Size: 36},
		{Name: "media_id", Type: field.TypeString, Size: 36},
	}
	// RoomMediaTable holds the schema information for the "room_media" table.
	RoomMediaTable = &schema.Table{
		Name:       "room_media",
		Columns:    RoomMediaColumns,
		PrimaryKey: []*schema.Column{RoomMediaColumns[0], RoomMediaColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "room_media_room_id",
				Columns:    []*schema.Column{RoomMediaColumns[0]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "room_media_media_id",
				Columns:    []*schema.Column{RoomMediaColumns[1]},
				RefColumns: []*schema.Column{MediaColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RoomCategoryRoomsColumns holds the columns for the "room_category_rooms" table.
	RoomCategoryRoomsColumns = []*schema.Column{
		{Name: "room_category_id", Type: field.TypeString, Size: 36},
		{Name: "room_id", Type: field.TypeString, Size: 36},
	}
	// RoomCategoryRoomsTable holds the schema information for the "room_category_rooms" table.
	RoomCategoryRoomsTable = &schema.Table{
		Name:       "room_category_rooms",
		Columns:    RoomCategoryRoomsColumns,
		PrimaryKey: []*schema.Column{RoomCategoryRoomsColumns[0], RoomCategoryRoomsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "room_category_rooms_room_category_id",
				Columns:    []*schema.Column{RoomCategoryRoomsColumns[0]},
				RefColumns: []*schema.Column{RoomCategoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "room_category_rooms_room_id",
				Columns:    []*schema.Column{RoomCategoryRoomsColumns[1]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RoomCategoryMediaColumns holds the columns for the "room_category_media" table.
	RoomCategoryMediaColumns = []*schema.Column{
		{Name: "room_category_id", Type: field.TypeString, Size: 36},
		{Name: "media_id", Type: field.TypeString, Size: 36},
	}
	// RoomCategoryMediaTable holds the schema information for the "room_category_media" table.
	RoomCategoryMediaTable = &schema.Table{
		Name:       "room_category_media",
		Columns:    RoomCategoryMediaColumns,
		PrimaryKey: []*schema.Column{RoomCategoryMediaColumns[0], RoomCategoryMediaColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "room_category_media_room_category_id",
				Columns:    []*schema.Column{RoomCategoryMediaColumns[0]},
				RefColumns: []*schema.Column{RoomCategoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "room_category_media_media_id",
				Columns:    []*schema.Column{RoomCategoryMediaColumns[1]},
				RefColumns: []*schema.Column{MediaColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RoomCategoryAmenitiesColumns holds the columns for the "room_category_amenities" table.
	RoomCategoryAmenitiesColumns = []*schema.Column{
		{Name: "room_category_id", Type: field.TypeString, Size: 36},
		{Name: "amenity_id", Type: field.TypeString, Size: 36},
	}
	// RoomCategoryAmenitiesTable holds the schema information for the "room_category_amenities" table.
	RoomCategoryAmenitiesTable = &schema.Table{
		Name:       "room_category_amenities",
		Columns:    RoomCategoryAmenitiesColumns,
		PrimaryKey: []*schema.Column{RoomCategoryAmenitiesColumns[0], RoomCategoryAmenitiesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "room_category_amenities_room_category_id",
				Columns:    []*schema.Column{RoomCategoryAmenitiesColumns[0]},
				RefColumns: []*schema.Column{RoomCategoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "room_category_amenities_amenity_id",
				Columns:    []*schema.Column{RoomCategoryAmenitiesColumns[1]},
				RefColumns: []*schema.Column{AmenitiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// StaffPermissionsColumns holds the columns for the "staff_permissions" table.
	StaffPermissionsColumns = []*schema.Column{
		{Name: "staff_id", Type: field.TypeString, Size: 36},
		{Name: "permission_id", Type: field.TypeString, Size: 36},
	}
	// StaffPermissionsTable holds the schema information for the "staff_permissions" table.
	StaffPermissionsTable = &schema.Table{
		Name:       "staff_permissions",
		Columns:    StaffPermissionsColumns,
		PrimaryKey: []*schema.Column{StaffPermissionsColumns[0], StaffPermissionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "staff_permissions_staff_id",
				Columns:    []*schema.Column{StaffPermissionsColumns[0]},
				RefColumns: []*schema.Column{StaffsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "staff_permissions_permission_id",
				Columns:    []*schema.Column{StaffPermissionsColumns[1]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserPlacesColumns holds the columns for the "user_places" table.
	UserPlacesColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString, Size: 36},
		{Name: "place_id", Type: field.TypeString, Size: 36},
	}
	// UserPlacesTable holds the schema information for the "user_places" table.
	UserPlacesTable = &schema.Table{
		Name:       "user_places",
		Columns:    UserPlacesColumns,
		PrimaryKey: []*schema.Column{UserPlacesColumns[0], UserPlacesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_places_user_id",
				Columns:    []*schema.Column{UserPlacesColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_places_place_id",
				Columns:    []*schema.Column{UserPlacesColumns[1]},
				RefColumns: []*schema.Column{PlacesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserNotificationsColumns holds the columns for the "user_notifications" table.
	UserNotificationsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString, Size: 36},
		{Name: "notification_id", Type: field.TypeString, Size: 36},
	}
	// UserNotificationsTable holds the schema information for the "user_notifications" table.
	UserNotificationsTable = &schema.Table{
		Name:       "user_notifications",
		Columns:    UserNotificationsColumns,
		PrimaryKey: []*schema.Column{UserNotificationsColumns[0], UserNotificationsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_notifications_user_id",
				Columns:    []*schema.Column{UserNotificationsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_notifications_notification_id",
				Columns:    []*schema.Column{UserNotificationsColumns[1]},
				RefColumns: []*schema.Column{NotificationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserCreatedMenusColumns holds the columns for the "user_created_menus" table.
	UserCreatedMenusColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString, Size: 36},
		{Name: "menu_id", Type: field.TypeString, Size: 36},
	}
	// UserCreatedMenusTable holds the schema information for the "user_created_menus" table.
	UserCreatedMenusTable = &schema.Table{
		Name:       "user_created_menus",
		Columns:    UserCreatedMenusColumns,
		PrimaryKey: []*schema.Column{UserCreatedMenusColumns[0], UserCreatedMenusColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_created_menus_user_id",
				Columns:    []*schema.Column{UserCreatedMenusColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_created_menus_menu_id",
				Columns:    []*schema.Column{UserCreatedMenusColumns[1]},
				RefColumns: []*schema.Column{MenusColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserUpdatedMenusColumns holds the columns for the "user_updated_menus" table.
	UserUpdatedMenusColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString, Size: 36},
		{Name: "menu_id", Type: field.TypeString, Size: 36},
	}
	// UserUpdatedMenusTable holds the schema information for the "user_updated_menus" table.
	UserUpdatedMenusTable = &schema.Table{
		Name:       "user_updated_menus",
		Columns:    UserUpdatedMenusColumns,
		PrimaryKey: []*schema.Column{UserUpdatedMenusColumns[0], UserUpdatedMenusColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_updated_menus_user_id",
				Columns:    []*schema.Column{UserUpdatedMenusColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_updated_menus_menu_id",
				Columns:    []*schema.Column{UserUpdatedMenusColumns[1]},
				RefColumns: []*schema.Column{MenusColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserTrainersColumns holds the columns for the "user_trainers" table.
	UserTrainersColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString, Size: 36},
		{Name: "trainer_id", Type: field.TypeString, Size: 36},
	}
	// UserTrainersTable holds the schema information for the "user_trainers" table.
	UserTrainersTable = &schema.Table{
		Name:       "user_trainers",
		Columns:    UserTrainersColumns,
		PrimaryKey: []*schema.Column{UserTrainersColumns[0], UserTrainersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_trainers_user_id",
				Columns:    []*schema.Column{UserTrainersColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_trainers_trainer_id",
				Columns:    []*schema.Column{UserTrainersColumns[1]},
				RefColumns: []*schema.Column{TrainersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountSettingsTable,
		AccountWalletsTable,
		AmenitiesTable,
		BookingsTable,
		BusinessesTable,
		BusinessFollowBusinessesTable,
		BusinessFollowEventsTable,
		BusinessFollowUsersTable,
		CategoriesTable,
		CategoryAssignmentsTable,
		ChatsTable,
		CommentsTable,
		CustomBlocksTable,
		EventsTable,
		EventOrganizersTable,
		FaQsTable,
		FeatureReleasesTable,
		FitnessesTable,
		HelpsTable,
		InventoryAttributesTable,
		InventoryTypesTable,
		LikesTable,
		MediaTable,
		MenusTable,
		MenuItemsTable,
		NotificationsTable,
		OrdersTable,
		OrderItemsTable,
		PaymentsTable,
		PermissionsTable,
		PlacesTable,
		PlaceInventoriesTable,
		PlaceInventoryAttributesTable,
		PlaceTablesTable,
		PlansTable,
		PostsTable,
		PricesTable,
		RatingsTable,
		ReactionsTable,
		ReservationsTable,
		ReservationBlocksTable,
		ResoursesTable,
		ReviewsTable,
		RoomsTable,
		RoomCategoriesTable,
		StaffsTable,
		SubscriptionsTable,
		TemplatesTable,
		TicketsTable,
		TicketOptionsTable,
		TrainersTable,
		TransactionHistoriesTable,
		UsersTable,
		UserBusinessesTable,
		UserFollowBusinessesTable,
		UserFollowEventsTable,
		UserFollowPlacesTable,
		UserFollowUsersTable,
		UserLikePlacesTable,
		WebsitesTable,
		AmenityPlacesTable,
		BusinessNotificationsTable,
		BusinessStaffsTable,
		CategoryMediaTable,
		CommentNotificationsTable,
		FaqPlaceTable,
		FaqEventTable,
		MenuCategoriesTable,
		MenuMenuItemsTable,
		MenuMediaTable,
		MenuItemOrderItemsTable,
		OrderOrderItemsTable,
		PlaceMenusTable,
		PlaceMediasTable,
		PlaceRoomsTable,
		PlaceNotificationsTable,
		PlaceStaffsTable,
		PlaceRoomCategoriesTable,
		PlaceTrainersTable,
		PlaceMembersTable,
		PlaceRegularUsersTable,
		PlaceInventoryMediaTable,
		PlaceTableOrdersTable,
		PlanUsersTable,
		PlanBusinessesTable,
		PlanPlacesTable,
		PostNotificationsTable,
		RoomAmenitiesTable,
		RoomMediaTable,
		RoomCategoryRoomsTable,
		RoomCategoryMediaTable,
		RoomCategoryAmenitiesTable,
		StaffPermissionsTable,
		UserPlacesTable,
		UserNotificationsTable,
		UserCreatedMenusTable,
		UserUpdatedMenusTable,
		UserTrainersTable,
	}
)

func init() {
	AccountSettingsTable.ForeignKeys[0].RefTable = BusinessesTable
	AccountWalletsTable.ForeignKeys[0].RefTable = BusinessesTable
	AccountWalletsTable.ForeignKeys[1].RefTable = UsersTable
	BookingsTable.ForeignKeys[0].RefTable = PlacesTable
	BookingsTable.ForeignKeys[1].RefTable = RoomsTable
	BookingsTable.ForeignKeys[2].RefTable = UsersTable
	BusinessFollowBusinessesTable.ForeignKeys[0].RefTable = BusinessesTable
	BusinessFollowBusinessesTable.ForeignKeys[1].RefTable = BusinessesTable
	BusinessFollowEventsTable.ForeignKeys[0].RefTable = BusinessesTable
	BusinessFollowEventsTable.ForeignKeys[1].RefTable = EventsTable
	BusinessFollowUsersTable.ForeignKeys[0].RefTable = BusinessesTable
	BusinessFollowUsersTable.ForeignKeys[1].RefTable = UsersTable
	CategoriesTable.ForeignKeys[0].RefTable = BusinessesTable
	CategoriesTable.ForeignKeys[1].RefTable = EventsTable
	CategoriesTable.ForeignKeys[2].RefTable = PlacesTable
	CategoriesTable.ForeignKeys[3].RefTable = PostsTable
	CategoriesTable.ForeignKeys[4].RefTable = UsersTable
	CategoryAssignmentsTable.ForeignKeys[0].RefTable = BusinessesTable
	CategoryAssignmentsTable.ForeignKeys[1].RefTable = CategoriesTable
	CategoryAssignmentsTable.ForeignKeys[2].RefTable = EventsTable
	CategoryAssignmentsTable.ForeignKeys[3].RefTable = PlacesTable
	CategoryAssignmentsTable.ForeignKeys[4].RefTable = UsersTable
	CommentsTable.ForeignKeys[0].RefTable = CommentsTable
	CommentsTable.ForeignKeys[1].RefTable = EventsTable
	CommentsTable.ForeignKeys[2].RefTable = PostsTable
	CommentsTable.ForeignKeys[3].RefTable = ReviewsTable
	CommentsTable.ForeignKeys[4].RefTable = UsersTable
	CustomBlocksTable.ForeignKeys[0].RefTable = WebsitesTable
	EventsTable.ForeignKeys[0].RefTable = BusinessesTable
	EventsTable.ForeignKeys[1].RefTable = PlacesTable
	EventsTable.ForeignKeys[2].RefTable = UsersTable
	EventOrganizersTable.ForeignKeys[0].RefTable = EventsTable
	FaQsTable.ForeignKeys[0].RefTable = BusinessesTable
	HelpsTable.ForeignKeys[0].RefTable = UsersTable
	InventoryAttributesTable.ForeignKeys[0].RefTable = InventoryTypesTable
	LikesTable.ForeignKeys[0].RefTable = ReviewsTable
	LikesTable.ForeignKeys[1].RefTable = MediaTable
	LikesTable.ForeignKeys[2].RefTable = PostsTable
	LikesTable.ForeignKeys[3].RefTable = PostsTable
	LikesTable.ForeignKeys[4].RefTable = ReviewsTable
	LikesTable.ForeignKeys[5].RefTable = UsersTable
	MediaTable.ForeignKeys[0].RefTable = EventsTable
	MediaTable.ForeignKeys[1].RefTable = MenuItemsTable
	MediaTable.ForeignKeys[2].RefTable = PlansTable
	MediaTable.ForeignKeys[3].RefTable = PostsTable
	MediaTable.ForeignKeys[4].RefTable = ReviewsTable
	MediaTable.ForeignKeys[5].RefTable = TicketOptionsTable
	MediaTable.ForeignKeys[6].RefTable = WebsitesTable
	OrdersTable.ForeignKeys[0].RefTable = UsersTable
	PlacesTable.ForeignKeys[0].RefTable = BusinessesTable
	PlacesTable.ForeignKeys[1].RefTable = EventsTable
	PlaceInventoriesTable.ForeignKeys[0].RefTable = BusinessesTable
	PlaceInventoriesTable.ForeignKeys[1].RefTable = CategoriesTable
	PlaceInventoriesTable.ForeignKeys[2].RefTable = InventoryTypesTable
	PlaceInventoriesTable.ForeignKeys[3].RefTable = MenuItemsTable
	PlaceInventoriesTable.ForeignKeys[4].RefTable = PlacesTable
	PlaceInventoryAttributesTable.ForeignKeys[0].RefTable = InventoryAttributesTable
	PlaceInventoryAttributesTable.ForeignKeys[1].RefTable = PlaceInventoriesTable
	PlaceTablesTable.ForeignKeys[0].RefTable = PlacesTable
	PlaceTablesTable.ForeignKeys[1].RefTable = UsersTable
	PlaceTablesTable.ForeignKeys[2].RefTable = UsersTable
	PlaceTablesTable.ForeignKeys[3].RefTable = UsersTable
	PlaceTablesTable.ForeignKeys[4].RefTable = UsersTable
	PlaceTablesTable.ForeignKeys[5].RefTable = UsersTable
	PostsTable.ForeignKeys[0].RefTable = BusinessesTable
	PostsTable.ForeignKeys[1].RefTable = PostsTable
	PostsTable.ForeignKeys[2].RefTable = UsersTable
	PricesTable.ForeignKeys[0].RefTable = PlansTable
	RatingsTable.ForeignKeys[0].RefTable = BusinessesTable
	RatingsTable.ForeignKeys[1].RefTable = EventsTable
	RatingsTable.ForeignKeys[2].RefTable = PlacesTable
	RatingsTable.ForeignKeys[3].RefTable = BusinessesTable
	RatingsTable.ForeignKeys[4].RefTable = PlacesTable
	RatingsTable.ForeignKeys[5].RefTable = EventsTable
	RatingsTable.ForeignKeys[6].RefTable = UsersTable
	ReservationsTable.ForeignKeys[0].RefTable = PlacesTable
	ReservationsTable.ForeignKeys[1].RefTable = RoomsTable
	ReservationsTable.ForeignKeys[2].RefTable = UsersTable
	ReservationBlocksTable.ForeignKeys[0].RefTable = PlaceInventoriesTable
	ReservationBlocksTable.ForeignKeys[1].RefTable = UsersTable
	ReviewsTable.ForeignKeys[0].RefTable = EventsTable
	ReviewsTable.ForeignKeys[1].RefTable = PlacesTable
	ReviewsTable.ForeignKeys[2].RefTable = BusinessesTable
	ReviewsTable.ForeignKeys[3].RefTable = PlacesTable
	ReviewsTable.ForeignKeys[4].RefTable = EventsTable
	ReviewsTable.ForeignKeys[5].RefTable = UsersTable
	StaffsTable.ForeignKeys[0].RefTable = UsersTable
	SubscriptionsTable.ForeignKeys[0].RefTable = PlansTable
	SubscriptionsTable.ForeignKeys[1].RefTable = PricesTable
	SubscriptionsTable.ForeignKeys[2].RefTable = UsersTable
	TicketsTable.ForeignKeys[0].RefTable = EventsTable
	TicketsTable.ForeignKeys[1].RefTable = TicketOptionsTable
	TicketsTable.ForeignKeys[2].RefTable = UsersTable
	TicketOptionsTable.ForeignKeys[0].RefTable = EventsTable
	TransactionHistoriesTable.ForeignKeys[0].RefTable = PlaceInventoriesTable
	TransactionHistoriesTable.ForeignKeys[1].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = EventsTable
	UsersTable.ForeignKeys[1].RefTable = EventsTable
	UserBusinessesTable.ForeignKeys[0].RefTable = BusinessesTable
	UserBusinessesTable.ForeignKeys[1].RefTable = UsersTable
	UserFollowBusinessesTable.ForeignKeys[0].RefTable = BusinessesTable
	UserFollowBusinessesTable.ForeignKeys[1].RefTable = UsersTable
	UserFollowEventsTable.ForeignKeys[0].RefTable = UsersTable
	UserFollowEventsTable.ForeignKeys[1].RefTable = EventsTable
	UserFollowPlacesTable.ForeignKeys[0].RefTable = PlacesTable
	UserFollowPlacesTable.ForeignKeys[1].RefTable = UsersTable
	UserFollowPlacesTable.ForeignKeys[2].RefTable = PlacesTable
	UserFollowUsersTable.ForeignKeys[0].RefTable = UsersTable
	UserFollowUsersTable.ForeignKeys[1].RefTable = UsersTable
	UserLikePlacesTable.ForeignKeys[0].RefTable = UsersTable
	UserLikePlacesTable.ForeignKeys[1].RefTable = PlacesTable
	WebsitesTable.ForeignKeys[0].RefTable = BusinessesTable
	WebsitesTable.ForeignKeys[1].RefTable = TemplatesTable
	AmenityPlacesTable.ForeignKeys[0].RefTable = AmenitiesTable
	AmenityPlacesTable.ForeignKeys[1].RefTable = PlacesTable
	BusinessNotificationsTable.ForeignKeys[0].RefTable = BusinessesTable
	BusinessNotificationsTable.ForeignKeys[1].RefTable = NotificationsTable
	BusinessStaffsTable.ForeignKeys[0].RefTable = BusinessesTable
	BusinessStaffsTable.ForeignKeys[1].RefTable = StaffsTable
	CategoryMediaTable.ForeignKeys[0].RefTable = CategoriesTable
	CategoryMediaTable.ForeignKeys[1].RefTable = MediaTable
	CommentNotificationsTable.ForeignKeys[0].RefTable = CommentsTable
	CommentNotificationsTable.ForeignKeys[1].RefTable = NotificationsTable
	FaqPlaceTable.ForeignKeys[0].RefTable = FaQsTable
	FaqPlaceTable.ForeignKeys[1].RefTable = PlacesTable
	FaqEventTable.ForeignKeys[0].RefTable = FaQsTable
	FaqEventTable.ForeignKeys[1].RefTable = EventsTable
	MenuCategoriesTable.ForeignKeys[0].RefTable = MenusTable
	MenuCategoriesTable.ForeignKeys[1].RefTable = CategoriesTable
	MenuMenuItemsTable.ForeignKeys[0].RefTable = MenusTable
	MenuMenuItemsTable.ForeignKeys[1].RefTable = MenuItemsTable
	MenuMediaTable.ForeignKeys[0].RefTable = MenusTable
	MenuMediaTable.ForeignKeys[1].RefTable = MediaTable
	MenuItemOrderItemsTable.ForeignKeys[0].RefTable = MenuItemsTable
	MenuItemOrderItemsTable.ForeignKeys[1].RefTable = OrderItemsTable
	OrderOrderItemsTable.ForeignKeys[0].RefTable = OrdersTable
	OrderOrderItemsTable.ForeignKeys[1].RefTable = OrderItemsTable
	PlaceMenusTable.ForeignKeys[0].RefTable = PlacesTable
	PlaceMenusTable.ForeignKeys[1].RefTable = MenusTable
	PlaceMediasTable.ForeignKeys[0].RefTable = PlacesTable
	PlaceMediasTable.ForeignKeys[1].RefTable = MediaTable
	PlaceRoomsTable.ForeignKeys[0].RefTable = PlacesTable
	PlaceRoomsTable.ForeignKeys[1].RefTable = RoomsTable
	PlaceNotificationsTable.ForeignKeys[0].RefTable = PlacesTable
	PlaceNotificationsTable.ForeignKeys[1].RefTable = NotificationsTable
	PlaceStaffsTable.ForeignKeys[0].RefTable = PlacesTable
	PlaceStaffsTable.ForeignKeys[1].RefTable = StaffsTable
	PlaceRoomCategoriesTable.ForeignKeys[0].RefTable = PlacesTable
	PlaceRoomCategoriesTable.ForeignKeys[1].RefTable = RoomCategoriesTable
	PlaceTrainersTable.ForeignKeys[0].RefTable = PlacesTable
	PlaceTrainersTable.ForeignKeys[1].RefTable = TrainersTable
	PlaceMembersTable.ForeignKeys[0].RefTable = PlacesTable
	PlaceMembersTable.ForeignKeys[1].RefTable = UsersTable
	PlaceRegularUsersTable.ForeignKeys[0].RefTable = PlacesTable
	PlaceRegularUsersTable.ForeignKeys[1].RefTable = UsersTable
	PlaceInventoryMediaTable.ForeignKeys[0].RefTable = PlaceInventoriesTable
	PlaceInventoryMediaTable.ForeignKeys[1].RefTable = MediaTable
	PlaceTableOrdersTable.ForeignKeys[0].RefTable = PlaceTablesTable
	PlaceTableOrdersTable.ForeignKeys[1].RefTable = OrdersTable
	PlanUsersTable.ForeignKeys[0].RefTable = PlansTable
	PlanUsersTable.ForeignKeys[1].RefTable = UsersTable
	PlanBusinessesTable.ForeignKeys[0].RefTable = PlansTable
	PlanBusinessesTable.ForeignKeys[1].RefTable = BusinessesTable
	PlanPlacesTable.ForeignKeys[0].RefTable = PlansTable
	PlanPlacesTable.ForeignKeys[1].RefTable = PlacesTable
	PostNotificationsTable.ForeignKeys[0].RefTable = PostsTable
	PostNotificationsTable.ForeignKeys[1].RefTable = NotificationsTable
	RoomAmenitiesTable.ForeignKeys[0].RefTable = RoomsTable
	RoomAmenitiesTable.ForeignKeys[1].RefTable = AmenitiesTable
	RoomMediaTable.ForeignKeys[0].RefTable = RoomsTable
	RoomMediaTable.ForeignKeys[1].RefTable = MediaTable
	RoomCategoryRoomsTable.ForeignKeys[0].RefTable = RoomCategoriesTable
	RoomCategoryRoomsTable.ForeignKeys[1].RefTable = RoomsTable
	RoomCategoryMediaTable.ForeignKeys[0].RefTable = RoomCategoriesTable
	RoomCategoryMediaTable.ForeignKeys[1].RefTable = MediaTable
	RoomCategoryAmenitiesTable.ForeignKeys[0].RefTable = RoomCategoriesTable
	RoomCategoryAmenitiesTable.ForeignKeys[1].RefTable = AmenitiesTable
	StaffPermissionsTable.ForeignKeys[0].RefTable = StaffsTable
	StaffPermissionsTable.ForeignKeys[1].RefTable = PermissionsTable
	UserPlacesTable.ForeignKeys[0].RefTable = UsersTable
	UserPlacesTable.ForeignKeys[1].RefTable = PlacesTable
	UserNotificationsTable.ForeignKeys[0].RefTable = UsersTable
	UserNotificationsTable.ForeignKeys[1].RefTable = NotificationsTable
	UserCreatedMenusTable.ForeignKeys[0].RefTable = UsersTable
	UserCreatedMenusTable.ForeignKeys[1].RefTable = MenusTable
	UserUpdatedMenusTable.ForeignKeys[0].RefTable = UsersTable
	UserUpdatedMenusTable.ForeignKeys[1].RefTable = MenusTable
	UserTrainersTable.ForeignKeys[0].RefTable = UsersTable
	UserTrainersTable.ForeignKeys[1].RefTable = TrainersTable
}
