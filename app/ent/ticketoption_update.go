// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/event"
	"placio-app/ent/media"
	"placio-app/ent/predicate"
	"placio-app/ent/ticket"
	"placio-app/ent/ticketoption"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TicketOptionUpdate is the builder for updating TicketOption entities.
type TicketOptionUpdate struct {
	config
	hooks    []Hook
	mutation *TicketOptionMutation
}

// Where appends a list predicates to the TicketOptionUpdate builder.
func (tou *TicketOptionUpdate) Where(ps ...predicate.TicketOption) *TicketOptionUpdate {
	tou.mutation.Where(ps...)
	return tou
}

// SetName sets the "name" field.
func (tou *TicketOptionUpdate) SetName(s string) *TicketOptionUpdate {
	tou.mutation.SetName(s)
	return tou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tou *TicketOptionUpdate) SetNillableName(s *string) *TicketOptionUpdate {
	if s != nil {
		tou.SetName(*s)
	}
	return tou
}

// SetDescription sets the "description" field.
func (tou *TicketOptionUpdate) SetDescription(s string) *TicketOptionUpdate {
	tou.mutation.SetDescription(s)
	return tou
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tou *TicketOptionUpdate) SetNillableDescription(s *string) *TicketOptionUpdate {
	if s != nil {
		tou.SetDescription(*s)
	}
	return tou
}

// SetPrice sets the "price" field.
func (tou *TicketOptionUpdate) SetPrice(f float64) *TicketOptionUpdate {
	tou.mutation.ResetPrice()
	tou.mutation.SetPrice(f)
	return tou
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (tou *TicketOptionUpdate) SetNillablePrice(f *float64) *TicketOptionUpdate {
	if f != nil {
		tou.SetPrice(*f)
	}
	return tou
}

// AddPrice adds f to the "price" field.
func (tou *TicketOptionUpdate) AddPrice(f float64) *TicketOptionUpdate {
	tou.mutation.AddPrice(f)
	return tou
}

// SetQuantityAvailable sets the "quantityAvailable" field.
func (tou *TicketOptionUpdate) SetQuantityAvailable(i int) *TicketOptionUpdate {
	tou.mutation.ResetQuantityAvailable()
	tou.mutation.SetQuantityAvailable(i)
	return tou
}

// SetNillableQuantityAvailable sets the "quantityAvailable" field if the given value is not nil.
func (tou *TicketOptionUpdate) SetNillableQuantityAvailable(i *int) *TicketOptionUpdate {
	if i != nil {
		tou.SetQuantityAvailable(*i)
	}
	return tou
}

// AddQuantityAvailable adds i to the "quantityAvailable" field.
func (tou *TicketOptionUpdate) AddQuantityAvailable(i int) *TicketOptionUpdate {
	tou.mutation.AddQuantityAvailable(i)
	return tou
}

// SetQuantitySold sets the "quantitySold" field.
func (tou *TicketOptionUpdate) SetQuantitySold(i int) *TicketOptionUpdate {
	tou.mutation.ResetQuantitySold()
	tou.mutation.SetQuantitySold(i)
	return tou
}

// SetNillableQuantitySold sets the "quantitySold" field if the given value is not nil.
func (tou *TicketOptionUpdate) SetNillableQuantitySold(i *int) *TicketOptionUpdate {
	if i != nil {
		tou.SetQuantitySold(*i)
	}
	return tou
}

// AddQuantitySold adds i to the "quantitySold" field.
func (tou *TicketOptionUpdate) AddQuantitySold(i int) *TicketOptionUpdate {
	tou.mutation.AddQuantitySold(i)
	return tou
}

// SetStatus sets the "status" field.
func (tou *TicketOptionUpdate) SetStatus(t ticketoption.Status) *TicketOptionUpdate {
	tou.mutation.SetStatus(t)
	return tou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tou *TicketOptionUpdate) SetNillableStatus(t *ticketoption.Status) *TicketOptionUpdate {
	if t != nil {
		tou.SetStatus(*t)
	}
	return tou
}

// SetDiscount sets the "discount" field.
func (tou *TicketOptionUpdate) SetDiscount(f float64) *TicketOptionUpdate {
	tou.mutation.ResetDiscount()
	tou.mutation.SetDiscount(f)
	return tou
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (tou *TicketOptionUpdate) SetNillableDiscount(f *float64) *TicketOptionUpdate {
	if f != nil {
		tou.SetDiscount(*f)
	}
	return tou
}

// AddDiscount adds f to the "discount" field.
func (tou *TicketOptionUpdate) AddDiscount(f float64) *TicketOptionUpdate {
	tou.mutation.AddDiscount(f)
	return tou
}

// SetCreatedAt sets the "createdAt" field.
func (tou *TicketOptionUpdate) SetCreatedAt(t time.Time) *TicketOptionUpdate {
	tou.mutation.SetCreatedAt(t)
	return tou
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tou *TicketOptionUpdate) SetNillableCreatedAt(t *time.Time) *TicketOptionUpdate {
	if t != nil {
		tou.SetCreatedAt(*t)
	}
	return tou
}

// SetUpdatedAt sets the "updatedAt" field.
func (tou *TicketOptionUpdate) SetUpdatedAt(t time.Time) *TicketOptionUpdate {
	tou.mutation.SetUpdatedAt(t)
	return tou
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (tou *TicketOptionUpdate) SetEventID(id string) *TicketOptionUpdate {
	tou.mutation.SetEventID(id)
	return tou
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (tou *TicketOptionUpdate) SetNillableEventID(id *string) *TicketOptionUpdate {
	if id != nil {
		tou = tou.SetEventID(*id)
	}
	return tou
}

// SetEvent sets the "event" edge to the Event entity.
func (tou *TicketOptionUpdate) SetEvent(e *Event) *TicketOptionUpdate {
	return tou.SetEventID(e.ID)
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (tou *TicketOptionUpdate) AddTicketIDs(ids ...string) *TicketOptionUpdate {
	tou.mutation.AddTicketIDs(ids...)
	return tou
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (tou *TicketOptionUpdate) AddTickets(t ...*Ticket) *TicketOptionUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tou.AddTicketIDs(ids...)
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (tou *TicketOptionUpdate) AddMediumIDs(ids ...string) *TicketOptionUpdate {
	tou.mutation.AddMediumIDs(ids...)
	return tou
}

// AddMedia adds the "media" edges to the Media entity.
func (tou *TicketOptionUpdate) AddMedia(m ...*Media) *TicketOptionUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tou.AddMediumIDs(ids...)
}

// Mutation returns the TicketOptionMutation object of the builder.
func (tou *TicketOptionUpdate) Mutation() *TicketOptionMutation {
	return tou.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (tou *TicketOptionUpdate) ClearEvent() *TicketOptionUpdate {
	tou.mutation.ClearEvent()
	return tou
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (tou *TicketOptionUpdate) ClearTickets() *TicketOptionUpdate {
	tou.mutation.ClearTickets()
	return tou
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (tou *TicketOptionUpdate) RemoveTicketIDs(ids ...string) *TicketOptionUpdate {
	tou.mutation.RemoveTicketIDs(ids...)
	return tou
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (tou *TicketOptionUpdate) RemoveTickets(t ...*Ticket) *TicketOptionUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tou.RemoveTicketIDs(ids...)
}

// ClearMedia clears all "media" edges to the Media entity.
func (tou *TicketOptionUpdate) ClearMedia() *TicketOptionUpdate {
	tou.mutation.ClearMedia()
	return tou
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (tou *TicketOptionUpdate) RemoveMediumIDs(ids ...string) *TicketOptionUpdate {
	tou.mutation.RemoveMediumIDs(ids...)
	return tou
}

// RemoveMedia removes "media" edges to Media entities.
func (tou *TicketOptionUpdate) RemoveMedia(m ...*Media) *TicketOptionUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tou.RemoveMediumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tou *TicketOptionUpdate) Save(ctx context.Context) (int, error) {
	tou.defaults()
	return withHooks(ctx, tou.sqlSave, tou.mutation, tou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tou *TicketOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := tou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tou *TicketOptionUpdate) Exec(ctx context.Context) error {
	_, err := tou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tou *TicketOptionUpdate) ExecX(ctx context.Context) {
	if err := tou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tou *TicketOptionUpdate) defaults() {
	if _, ok := tou.mutation.UpdatedAt(); !ok {
		v := ticketoption.UpdateDefaultUpdatedAt()
		tou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tou *TicketOptionUpdate) check() error {
	if v, ok := tou.mutation.Name(); ok {
		if err := ticketoption.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TicketOption.name": %w`, err)}
		}
	}
	if v, ok := tou.mutation.Price(); ok {
		if err := ticketoption.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "TicketOption.price": %w`, err)}
		}
	}
	if v, ok := tou.mutation.Status(); ok {
		if err := ticketoption.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TicketOption.status": %w`, err)}
		}
	}
	if v, ok := tou.mutation.Discount(); ok {
		if err := ticketoption.DiscountValidator(v); err != nil {
			return &ValidationError{Name: "discount", err: fmt.Errorf(`ent: validator failed for field "TicketOption.discount": %w`, err)}
		}
	}
	return nil
}

func (tou *TicketOptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ticketoption.Table, ticketoption.Columns, sqlgraph.NewFieldSpec(ticketoption.FieldID, field.TypeString))
	if ps := tou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tou.mutation.Name(); ok {
		_spec.SetField(ticketoption.FieldName, field.TypeString, value)
	}
	if value, ok := tou.mutation.Description(); ok {
		_spec.SetField(ticketoption.FieldDescription, field.TypeString, value)
	}
	if value, ok := tou.mutation.Price(); ok {
		_spec.SetField(ticketoption.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := tou.mutation.AddedPrice(); ok {
		_spec.AddField(ticketoption.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := tou.mutation.QuantityAvailable(); ok {
		_spec.SetField(ticketoption.FieldQuantityAvailable, field.TypeInt, value)
	}
	if value, ok := tou.mutation.AddedQuantityAvailable(); ok {
		_spec.AddField(ticketoption.FieldQuantityAvailable, field.TypeInt, value)
	}
	if value, ok := tou.mutation.QuantitySold(); ok {
		_spec.SetField(ticketoption.FieldQuantitySold, field.TypeInt, value)
	}
	if value, ok := tou.mutation.AddedQuantitySold(); ok {
		_spec.AddField(ticketoption.FieldQuantitySold, field.TypeInt, value)
	}
	if value, ok := tou.mutation.Status(); ok {
		_spec.SetField(ticketoption.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tou.mutation.Discount(); ok {
		_spec.SetField(ticketoption.FieldDiscount, field.TypeFloat64, value)
	}
	if value, ok := tou.mutation.AddedDiscount(); ok {
		_spec.AddField(ticketoption.FieldDiscount, field.TypeFloat64, value)
	}
	if value, ok := tou.mutation.CreatedAt(); ok {
		_spec.SetField(ticketoption.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tou.mutation.UpdatedAt(); ok {
		_spec.SetField(ticketoption.FieldUpdatedAt, field.TypeTime, value)
	}
	if tou.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticketoption.EventTable,
			Columns: []string{ticketoption.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticketoption.EventTable,
			Columns: []string{ticketoption.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tou.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketoption.TicketsTable,
			Columns: []string{ticketoption.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !tou.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketoption.TicketsTable,
			Columns: []string{ticketoption.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketoption.TicketsTable,
			Columns: []string{ticketoption.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tou.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketoption.MediaTable,
			Columns: []string{ticketoption.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.RemovedMediaIDs(); len(nodes) > 0 && !tou.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketoption.MediaTable,
			Columns: []string{ticketoption.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketoption.MediaTable,
			Columns: []string{ticketoption.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticketoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tou.mutation.done = true
	return n, nil
}

// TicketOptionUpdateOne is the builder for updating a single TicketOption entity.
type TicketOptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TicketOptionMutation
}

// SetName sets the "name" field.
func (touo *TicketOptionUpdateOne) SetName(s string) *TicketOptionUpdateOne {
	touo.mutation.SetName(s)
	return touo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (touo *TicketOptionUpdateOne) SetNillableName(s *string) *TicketOptionUpdateOne {
	if s != nil {
		touo.SetName(*s)
	}
	return touo
}

// SetDescription sets the "description" field.
func (touo *TicketOptionUpdateOne) SetDescription(s string) *TicketOptionUpdateOne {
	touo.mutation.SetDescription(s)
	return touo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (touo *TicketOptionUpdateOne) SetNillableDescription(s *string) *TicketOptionUpdateOne {
	if s != nil {
		touo.SetDescription(*s)
	}
	return touo
}

// SetPrice sets the "price" field.
func (touo *TicketOptionUpdateOne) SetPrice(f float64) *TicketOptionUpdateOne {
	touo.mutation.ResetPrice()
	touo.mutation.SetPrice(f)
	return touo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (touo *TicketOptionUpdateOne) SetNillablePrice(f *float64) *TicketOptionUpdateOne {
	if f != nil {
		touo.SetPrice(*f)
	}
	return touo
}

// AddPrice adds f to the "price" field.
func (touo *TicketOptionUpdateOne) AddPrice(f float64) *TicketOptionUpdateOne {
	touo.mutation.AddPrice(f)
	return touo
}

// SetQuantityAvailable sets the "quantityAvailable" field.
func (touo *TicketOptionUpdateOne) SetQuantityAvailable(i int) *TicketOptionUpdateOne {
	touo.mutation.ResetQuantityAvailable()
	touo.mutation.SetQuantityAvailable(i)
	return touo
}

// SetNillableQuantityAvailable sets the "quantityAvailable" field if the given value is not nil.
func (touo *TicketOptionUpdateOne) SetNillableQuantityAvailable(i *int) *TicketOptionUpdateOne {
	if i != nil {
		touo.SetQuantityAvailable(*i)
	}
	return touo
}

// AddQuantityAvailable adds i to the "quantityAvailable" field.
func (touo *TicketOptionUpdateOne) AddQuantityAvailable(i int) *TicketOptionUpdateOne {
	touo.mutation.AddQuantityAvailable(i)
	return touo
}

// SetQuantitySold sets the "quantitySold" field.
func (touo *TicketOptionUpdateOne) SetQuantitySold(i int) *TicketOptionUpdateOne {
	touo.mutation.ResetQuantitySold()
	touo.mutation.SetQuantitySold(i)
	return touo
}

// SetNillableQuantitySold sets the "quantitySold" field if the given value is not nil.
func (touo *TicketOptionUpdateOne) SetNillableQuantitySold(i *int) *TicketOptionUpdateOne {
	if i != nil {
		touo.SetQuantitySold(*i)
	}
	return touo
}

// AddQuantitySold adds i to the "quantitySold" field.
func (touo *TicketOptionUpdateOne) AddQuantitySold(i int) *TicketOptionUpdateOne {
	touo.mutation.AddQuantitySold(i)
	return touo
}

// SetStatus sets the "status" field.
func (touo *TicketOptionUpdateOne) SetStatus(t ticketoption.Status) *TicketOptionUpdateOne {
	touo.mutation.SetStatus(t)
	return touo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (touo *TicketOptionUpdateOne) SetNillableStatus(t *ticketoption.Status) *TicketOptionUpdateOne {
	if t != nil {
		touo.SetStatus(*t)
	}
	return touo
}

// SetDiscount sets the "discount" field.
func (touo *TicketOptionUpdateOne) SetDiscount(f float64) *TicketOptionUpdateOne {
	touo.mutation.ResetDiscount()
	touo.mutation.SetDiscount(f)
	return touo
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (touo *TicketOptionUpdateOne) SetNillableDiscount(f *float64) *TicketOptionUpdateOne {
	if f != nil {
		touo.SetDiscount(*f)
	}
	return touo
}

// AddDiscount adds f to the "discount" field.
func (touo *TicketOptionUpdateOne) AddDiscount(f float64) *TicketOptionUpdateOne {
	touo.mutation.AddDiscount(f)
	return touo
}

// SetCreatedAt sets the "createdAt" field.
func (touo *TicketOptionUpdateOne) SetCreatedAt(t time.Time) *TicketOptionUpdateOne {
	touo.mutation.SetCreatedAt(t)
	return touo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (touo *TicketOptionUpdateOne) SetNillableCreatedAt(t *time.Time) *TicketOptionUpdateOne {
	if t != nil {
		touo.SetCreatedAt(*t)
	}
	return touo
}

// SetUpdatedAt sets the "updatedAt" field.
func (touo *TicketOptionUpdateOne) SetUpdatedAt(t time.Time) *TicketOptionUpdateOne {
	touo.mutation.SetUpdatedAt(t)
	return touo
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (touo *TicketOptionUpdateOne) SetEventID(id string) *TicketOptionUpdateOne {
	touo.mutation.SetEventID(id)
	return touo
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (touo *TicketOptionUpdateOne) SetNillableEventID(id *string) *TicketOptionUpdateOne {
	if id != nil {
		touo = touo.SetEventID(*id)
	}
	return touo
}

// SetEvent sets the "event" edge to the Event entity.
func (touo *TicketOptionUpdateOne) SetEvent(e *Event) *TicketOptionUpdateOne {
	return touo.SetEventID(e.ID)
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (touo *TicketOptionUpdateOne) AddTicketIDs(ids ...string) *TicketOptionUpdateOne {
	touo.mutation.AddTicketIDs(ids...)
	return touo
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (touo *TicketOptionUpdateOne) AddTickets(t ...*Ticket) *TicketOptionUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return touo.AddTicketIDs(ids...)
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (touo *TicketOptionUpdateOne) AddMediumIDs(ids ...string) *TicketOptionUpdateOne {
	touo.mutation.AddMediumIDs(ids...)
	return touo
}

// AddMedia adds the "media" edges to the Media entity.
func (touo *TicketOptionUpdateOne) AddMedia(m ...*Media) *TicketOptionUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return touo.AddMediumIDs(ids...)
}

// Mutation returns the TicketOptionMutation object of the builder.
func (touo *TicketOptionUpdateOne) Mutation() *TicketOptionMutation {
	return touo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (touo *TicketOptionUpdateOne) ClearEvent() *TicketOptionUpdateOne {
	touo.mutation.ClearEvent()
	return touo
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (touo *TicketOptionUpdateOne) ClearTickets() *TicketOptionUpdateOne {
	touo.mutation.ClearTickets()
	return touo
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (touo *TicketOptionUpdateOne) RemoveTicketIDs(ids ...string) *TicketOptionUpdateOne {
	touo.mutation.RemoveTicketIDs(ids...)
	return touo
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (touo *TicketOptionUpdateOne) RemoveTickets(t ...*Ticket) *TicketOptionUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return touo.RemoveTicketIDs(ids...)
}

// ClearMedia clears all "media" edges to the Media entity.
func (touo *TicketOptionUpdateOne) ClearMedia() *TicketOptionUpdateOne {
	touo.mutation.ClearMedia()
	return touo
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (touo *TicketOptionUpdateOne) RemoveMediumIDs(ids ...string) *TicketOptionUpdateOne {
	touo.mutation.RemoveMediumIDs(ids...)
	return touo
}

// RemoveMedia removes "media" edges to Media entities.
func (touo *TicketOptionUpdateOne) RemoveMedia(m ...*Media) *TicketOptionUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return touo.RemoveMediumIDs(ids...)
}

// Where appends a list predicates to the TicketOptionUpdate builder.
func (touo *TicketOptionUpdateOne) Where(ps ...predicate.TicketOption) *TicketOptionUpdateOne {
	touo.mutation.Where(ps...)
	return touo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (touo *TicketOptionUpdateOne) Select(field string, fields ...string) *TicketOptionUpdateOne {
	touo.fields = append([]string{field}, fields...)
	return touo
}

// Save executes the query and returns the updated TicketOption entity.
func (touo *TicketOptionUpdateOne) Save(ctx context.Context) (*TicketOption, error) {
	touo.defaults()
	return withHooks(ctx, touo.sqlSave, touo.mutation, touo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (touo *TicketOptionUpdateOne) SaveX(ctx context.Context) *TicketOption {
	node, err := touo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (touo *TicketOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := touo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (touo *TicketOptionUpdateOne) ExecX(ctx context.Context) {
	if err := touo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (touo *TicketOptionUpdateOne) defaults() {
	if _, ok := touo.mutation.UpdatedAt(); !ok {
		v := ticketoption.UpdateDefaultUpdatedAt()
		touo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (touo *TicketOptionUpdateOne) check() error {
	if v, ok := touo.mutation.Name(); ok {
		if err := ticketoption.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TicketOption.name": %w`, err)}
		}
	}
	if v, ok := touo.mutation.Price(); ok {
		if err := ticketoption.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "TicketOption.price": %w`, err)}
		}
	}
	if v, ok := touo.mutation.Status(); ok {
		if err := ticketoption.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TicketOption.status": %w`, err)}
		}
	}
	if v, ok := touo.mutation.Discount(); ok {
		if err := ticketoption.DiscountValidator(v); err != nil {
			return &ValidationError{Name: "discount", err: fmt.Errorf(`ent: validator failed for field "TicketOption.discount": %w`, err)}
		}
	}
	return nil
}

func (touo *TicketOptionUpdateOne) sqlSave(ctx context.Context) (_node *TicketOption, err error) {
	if err := touo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ticketoption.Table, ticketoption.Columns, sqlgraph.NewFieldSpec(ticketoption.FieldID, field.TypeString))
	id, ok := touo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TicketOption.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := touo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ticketoption.FieldID)
		for _, f := range fields {
			if !ticketoption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ticketoption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := touo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := touo.mutation.Name(); ok {
		_spec.SetField(ticketoption.FieldName, field.TypeString, value)
	}
	if value, ok := touo.mutation.Description(); ok {
		_spec.SetField(ticketoption.FieldDescription, field.TypeString, value)
	}
	if value, ok := touo.mutation.Price(); ok {
		_spec.SetField(ticketoption.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := touo.mutation.AddedPrice(); ok {
		_spec.AddField(ticketoption.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := touo.mutation.QuantityAvailable(); ok {
		_spec.SetField(ticketoption.FieldQuantityAvailable, field.TypeInt, value)
	}
	if value, ok := touo.mutation.AddedQuantityAvailable(); ok {
		_spec.AddField(ticketoption.FieldQuantityAvailable, field.TypeInt, value)
	}
	if value, ok := touo.mutation.QuantitySold(); ok {
		_spec.SetField(ticketoption.FieldQuantitySold, field.TypeInt, value)
	}
	if value, ok := touo.mutation.AddedQuantitySold(); ok {
		_spec.AddField(ticketoption.FieldQuantitySold, field.TypeInt, value)
	}
	if value, ok := touo.mutation.Status(); ok {
		_spec.SetField(ticketoption.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := touo.mutation.Discount(); ok {
		_spec.SetField(ticketoption.FieldDiscount, field.TypeFloat64, value)
	}
	if value, ok := touo.mutation.AddedDiscount(); ok {
		_spec.AddField(ticketoption.FieldDiscount, field.TypeFloat64, value)
	}
	if value, ok := touo.mutation.CreatedAt(); ok {
		_spec.SetField(ticketoption.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := touo.mutation.UpdatedAt(); ok {
		_spec.SetField(ticketoption.FieldUpdatedAt, field.TypeTime, value)
	}
	if touo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticketoption.EventTable,
			Columns: []string{ticketoption.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticketoption.EventTable,
			Columns: []string{ticketoption.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if touo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketoption.TicketsTable,
			Columns: []string{ticketoption.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !touo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketoption.TicketsTable,
			Columns: []string{ticketoption.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketoption.TicketsTable,
			Columns: []string{ticketoption.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if touo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketoption.MediaTable,
			Columns: []string{ticketoption.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.RemovedMediaIDs(); len(nodes) > 0 && !touo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketoption.MediaTable,
			Columns: []string{ticketoption.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketoption.MediaTable,
			Columns: []string{ticketoption.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TicketOption{config: touo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, touo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticketoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	touo.mutation.done = true
	return _node, nil
}
